
eeprom_programmer_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fb8  08008fb8  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08008fb8  08008fb8  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fb8  08008fb8  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fbc  08008fbc  00018fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08008fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001540  200001a8  08009168  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016e8  08009168  000216e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011140  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033de  00000000  00000000  00031311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000346f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00035590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae58  00000000  00000000  000362c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014412  00000000  00000000  00051118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008732a  00000000  00000000  0006552a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec854  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c4  00000000  00000000  000ec8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008f30 	.word	0x08008f30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08008f30 	.word	0x08008f30

0800014c <sendCommand>:
uint8_t g_buffer[PKG_DATA_MAX];




HAL_StatusTypeDef sendCommand(uint8_t cmd) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	return sendPackage(cmd, NULL, 0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2200      	movs	r2, #0
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f000 f805 	bl	800016c <sendPackage>
 8000162:	4603      	mov	r3, r0
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}

0800016c <sendPackage>:

HAL_StatusTypeDef sendPackage(uint8_t cmd, uint8_t *data, uint16_t len) {
 800016c:	b580      	push	{r7, lr}
 800016e:	b084      	sub	sp, #16
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	6039      	str	r1, [r7, #0]
 8000176:	71fb      	strb	r3, [r7, #7]
 8000178:	4613      	mov	r3, r2
 800017a:	80bb      	strh	r3, [r7, #4]

	SEND(serial_writebyte(CMD_STARTXFER));
 800017c:	20a5      	movs	r0, #165	; 0xa5
 800017e:	f000 fc67 	bl	8000a50 <serial_writebyte>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d001      	beq.n	800018c <sendPackage+0x20>
 8000188:	2301      	movs	r3, #1
 800018a:	e02e      	b.n	80001ea <sendPackage+0x7e>
	SEND(serial_writebyte(cmd));
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fc5e 	bl	8000a50 <serial_writebyte>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <sendPackage+0x32>
 800019a:	2301      	movs	r3, #1
 800019c:	e025      	b.n	80001ea <sendPackage+0x7e>

	if(data != NULL && len != 0) {
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d00c      	beq.n	80001be <sendPackage+0x52>
 80001a4:	88bb      	ldrh	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d009      	beq.n	80001be <sendPackage+0x52>
		SEND(serial_write(data, len));
 80001aa:	88bb      	ldrh	r3, [r7, #4]
 80001ac:	4619      	mov	r1, r3
 80001ae:	6838      	ldr	r0, [r7, #0]
 80001b0:	f000 fc2c 	bl	8000a0c <serial_write>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <sendPackage+0x52>
 80001ba:	2301      	movs	r3, #1
 80001bc:	e015      	b.n	80001ea <sendPackage+0x7e>
	}

	uint8_t crc[2] = {0,0}; // TODO: crc
 80001be:	2300      	movs	r3, #0
 80001c0:	81bb      	strh	r3, [r7, #12]
	SEND(serial_write(crc, 2));
 80001c2:	f107 030c 	add.w	r3, r7, #12
 80001c6:	2102      	movs	r1, #2
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 fc1f 	bl	8000a0c <serial_write>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <sendPackage+0x6c>
 80001d4:	2301      	movs	r3, #1
 80001d6:	e008      	b.n	80001ea <sendPackage+0x7e>

	SEND(serial_writebyte(CMD_ENDXFER));
 80001d8:	205a      	movs	r0, #90	; 0x5a
 80001da:	f000 fc39 	bl	8000a50 <serial_writebyte>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <sendPackage+0x7c>
 80001e4:	2301      	movs	r3, #1
 80001e6:	e000      	b.n	80001ea <sendPackage+0x7e>

	return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}

080001f2 <sendErr>:

HAL_StatusTypeDef sendErr(uint8_t status) {
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b082      	sub	sp, #8
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	4603      	mov	r3, r0
 80001fa:	71fb      	strb	r3, [r7, #7]
	return sendPackage(CMD_ERR, &status, 1);
 80001fc:	1dfb      	adds	r3, r7, #7
 80001fe:	2201      	movs	r2, #1
 8000200:	4619      	mov	r1, r3
 8000202:	20f0      	movs	r0, #240	; 0xf0
 8000204:	f7ff ffb2 	bl	800016c <sendPackage>
 8000208:	4603      	mov	r3, r0
}
 800020a:	4618      	mov	r0, r3
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <receivePackage>:

HAL_StatusTypeDef sendOK(void) {
	return sendCommand(CMD_OK);
}

HAL_StatusTypeDef receivePackage(package_t *pkg) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]

	//	<STX><COMMAND>[<DATA><DATA>...]<CHECKSUM[1]><CHECKSUM[0]><ETX>
	
	if(!serial_available())
 800021c:	f000 fc27 	bl	8000a6e <serial_available>
 8000220:	4603      	mov	r3, r0
 8000222:	f083 0301 	eor.w	r3, r3, #1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <receivePackage+0x1c>
		return HAL_ERROR;
 800022c:	2301      	movs	r3, #1
 800022e:	e04b      	b.n	80002c8 <receivePackage+0xb4>

	uint8_t *buf = g_buffer;
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <receivePackage+0xbc>)
 8000232:	60fb      	str	r3, [r7, #12]
	uint8_t tmp[3];

	if(pkg == NULL)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d101      	bne.n	800023e <receivePackage+0x2a>
		return HAL_ERROR;
 800023a:	2301      	movs	r3, #1
 800023c:	e044      	b.n	80002c8 <receivePackage+0xb4>
	
	pkg->cmd = CMD_ERR;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	22f0      	movs	r2, #240	; 0xf0
 8000242:	701a      	strb	r2, [r3, #0]
	pkg->data = NULL;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2200      	movs	r2, #0
 8000248:	605a      	str	r2, [r3, #4]

	RECV(serial_read(tmp, 2));
 800024a:	f107 0308 	add.w	r3, r7, #8
 800024e:	2102      	movs	r1, #2
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fc3c 	bl	8000ace <serial_read>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <receivePackage+0x4c>
 800025c:	2301      	movs	r3, #1
 800025e:	e033      	b.n	80002c8 <receivePackage+0xb4>

	if(tmp[0] != CMD_STARTXFER)
 8000260:	7a3b      	ldrb	r3, [r7, #8]
 8000262:	2ba5      	cmp	r3, #165	; 0xa5
 8000264:	d001      	beq.n	800026a <receivePackage+0x56>
		return HAL_ERROR;
 8000266:	2301      	movs	r3, #1
 8000268:	e02e      	b.n	80002c8 <receivePackage+0xb4>

	pkg->cmd = tmp[1];
 800026a:	7a7a      	ldrb	r2, [r7, #9]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	701a      	strb	r2, [r3, #0]
	pkg->datalen = cmdHasData(pkg->cmd);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f82d 	bl	80002d4 <cmdHasData>
 800027a:	4603      	mov	r3, r0
 800027c:	b29a      	uxth	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	805a      	strh	r2, [r3, #2]

	if(pkg->datalen != 0)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	885b      	ldrh	r3, [r3, #2]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d00d      	beq.n	80002a6 <receivePackage+0x92>
	{
		RECV(serial_read(buf, pkg->datalen));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	885b      	ldrh	r3, [r3, #2]
 800028e:	4619      	mov	r1, r3
 8000290:	68f8      	ldr	r0, [r7, #12]
 8000292:	f000 fc1c 	bl	8000ace <serial_read>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <receivePackage+0x8c>
 800029c:	2301      	movs	r3, #1
 800029e:	e013      	b.n	80002c8 <receivePackage+0xb4>
		pkg->data = buf;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	605a      	str	r2, [r3, #4]
	}

	RECV(serial_read(tmp, 3));
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	2103      	movs	r1, #3
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fc0e 	bl	8000ace <serial_read>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <receivePackage+0xa8>
 80002b8:	2301      	movs	r3, #1
 80002ba:	e005      	b.n	80002c8 <receivePackage+0xb4>
	
	// TODO: { tmp[1], tmp[0] } is the checksum, we can ignore it...
	if(tmp[2] != CMD_ENDXFER)
 80002bc:	7abb      	ldrb	r3, [r7, #10]
 80002be:	2b5a      	cmp	r3, #90	; 0x5a
 80002c0:	d001      	beq.n	80002c6 <receivePackage+0xb2>
		return HAL_ERROR;
 80002c2:	2301      	movs	r3, #1
 80002c4:	e000      	b.n	80002c8 <receivePackage+0xb4>

	return HAL_OK;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	200001cc 	.word	0x200001cc

080002d4 <cmdHasData>:

int cmdHasData(commands_t command) {
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
	switch(command) {
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2bf1      	cmp	r3, #241	; 0xf1
 80002e2:	f000 80ae 	beq.w	8000442 <cmdHasData+0x16e>
 80002e6:	2bf1      	cmp	r3, #241	; 0xf1
 80002e8:	f300 80ad 	bgt.w	8000446 <cmdHasData+0x172>
 80002ec:	2bf0      	cmp	r3, #240	; 0xf0
 80002ee:	f000 80a6 	beq.w	800043e <cmdHasData+0x16a>
 80002f2:	2bf0      	cmp	r3, #240	; 0xf0
 80002f4:	f300 80a7 	bgt.w	8000446 <cmdHasData+0x172>
 80002f8:	2ba5      	cmp	r3, #165	; 0xa5
 80002fa:	f000 80a2 	beq.w	8000442 <cmdHasData+0x16e>
 80002fe:	2ba5      	cmp	r3, #165	; 0xa5
 8000300:	f300 80a1 	bgt.w	8000446 <cmdHasData+0x172>
 8000304:	2b12      	cmp	r3, #18
 8000306:	f300 8085 	bgt.w	8000414 <cmdHasData+0x140>
 800030a:	2b00      	cmp	r3, #0
 800030c:	da56      	bge.n	80003bc <cmdHasData+0xe8>
 800030e:	e09a      	b.n	8000446 <cmdHasData+0x172>
 8000310:	3b5a      	subs	r3, #90	; 0x5a
 8000312:	2b26      	cmp	r3, #38	; 0x26
 8000314:	f200 8097 	bhi.w	8000446 <cmdHasData+0x172>
 8000318:	a201      	add	r2, pc, #4	; (adr r2, 8000320 <cmdHasData+0x4c>)
 800031a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031e:	bf00      	nop
 8000320:	08000443 	.word	0x08000443
 8000324:	08000447 	.word	0x08000447
 8000328:	08000447 	.word	0x08000447
 800032c:	08000447 	.word	0x08000447
 8000330:	08000447 	.word	0x08000447
 8000334:	08000447 	.word	0x08000447
 8000338:	08000429 	.word	0x08000429
 800033c:	0800042d 	.word	0x0800042d
 8000340:	08000447 	.word	0x08000447
 8000344:	08000447 	.word	0x08000447
 8000348:	08000447 	.word	0x08000447
 800034c:	08000447 	.word	0x08000447
 8000350:	08000447 	.word	0x08000447
 8000354:	08000447 	.word	0x08000447
 8000358:	08000447 	.word	0x08000447
 800035c:	08000447 	.word	0x08000447
 8000360:	08000447 	.word	0x08000447
 8000364:	08000447 	.word	0x08000447
 8000368:	08000447 	.word	0x08000447
 800036c:	08000447 	.word	0x08000447
 8000370:	08000447 	.word	0x08000447
 8000374:	08000447 	.word	0x08000447
 8000378:	08000431 	.word	0x08000431
 800037c:	08000447 	.word	0x08000447
 8000380:	08000447 	.word	0x08000447
 8000384:	08000447 	.word	0x08000447
 8000388:	08000447 	.word	0x08000447
 800038c:	08000447 	.word	0x08000447
 8000390:	08000447 	.word	0x08000447
 8000394:	08000447 	.word	0x08000447
 8000398:	08000447 	.word	0x08000447
 800039c:	08000447 	.word	0x08000447
 80003a0:	08000447 	.word	0x08000447
 80003a4:	08000447 	.word	0x08000447
 80003a8:	08000447 	.word	0x08000447
 80003ac:	08000447 	.word	0x08000447
 80003b0:	08000447 	.word	0x08000447
 80003b4:	08000447 	.word	0x08000447
 80003b8:	08000437 	.word	0x08000437
 80003bc:	2b12      	cmp	r3, #18
 80003be:	d842      	bhi.n	8000446 <cmdHasData+0x172>
 80003c0:	a201      	add	r2, pc, #4	; (adr r2, 80003c8 <cmdHasData+0xf4>)
 80003c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c6:	bf00      	nop
 80003c8:	08000443 	.word	0x08000443
 80003cc:	08000421 	.word	0x08000421
 80003d0:	08000443 	.word	0x08000443
 80003d4:	08000425 	.word	0x08000425
 80003d8:	08000447 	.word	0x08000447
 80003dc:	08000447 	.word	0x08000447
 80003e0:	08000447 	.word	0x08000447
 80003e4:	08000447 	.word	0x08000447
 80003e8:	08000447 	.word	0x08000447
 80003ec:	08000447 	.word	0x08000447
 80003f0:	08000447 	.word	0x08000447
 80003f4:	08000447 	.word	0x08000447
 80003f8:	08000447 	.word	0x08000447
 80003fc:	08000447 	.word	0x08000447
 8000400:	08000447 	.word	0x08000447
 8000404:	08000443 	.word	0x08000443
 8000408:	0800043b 	.word	0x0800043b
 800040c:	08000443 	.word	0x08000443
 8000410:	08000443 	.word	0x08000443
 8000414:	2b80      	cmp	r3, #128	; 0x80
 8000416:	dc16      	bgt.n	8000446 <cmdHasData+0x172>
 8000418:	2b5a      	cmp	r3, #90	; 0x5a
 800041a:	f6bf af79 	bge.w	8000310 <cmdHasData+0x3c>
 800041e:	e012      	b.n	8000446 <cmdHasData+0x172>

	case CMD_INIT:  return 0;
 8000420:	2300      	movs	r3, #0
 8000422:	e011      	b.n	8000448 <cmdHasData+0x174>
	case CMD_MEMID: return 1;
 8000424:	2301      	movs	r3, #1
 8000426:	e00f      	b.n	8000448 <cmdHasData+0x174>

	case CMD_READMEM: return 1; /* contains the memtype_e */
 8000428:	2301      	movs	r3, #1
 800042a:	e00d      	b.n	8000448 <cmdHasData+0x174>
	case CMD_READNEXT: return 0;
 800042c:	2300      	movs	r3, #0
 800042e:	e00b      	b.n	8000448 <cmdHasData+0x174>
	case CMD_MEMDATA: return PKG_DATA_MAX;
 8000430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000434:	e008      	b.n	8000448 <cmdHasData+0x174>

	case CMD_WRITEMEM: return 1;
 8000436:	2301      	movs	r3, #1
 8000438:	e006      	b.n	8000448 <cmdHasData+0x174>

	case CMD_OK:  return 0;
 800043a:	2300      	movs	r3, #0
 800043c:	e004      	b.n	8000448 <cmdHasData+0x174>
	case CMD_ERR: return 1;
 800043e:	2301      	movs	r3, #1
 8000440:	e002      	b.n	8000448 <cmdHasData+0x174>
	case CMD_TXRX_DONE:
	case CMD_TXRX_ERR:
	case CMD_STARTXFER:
	case CMD_ENDXFER:
	case CMD_DISCONNECT:
		return 0;
 8000442:	2300      	movs	r3, #0
 8000444:	e000      	b.n	8000448 <cmdHasData+0x174>
	}
	return 0;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <sendMemoryBlock>:


static errorcode_t sendMemoryBlock(uint8_t cmd, uint16_t offset)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	460a      	mov	r2, r1
 800045e:	71fb      	strb	r3, [r7, #7]
 8000460:	4613      	mov	r3, r2
 8000462:	80bb      	strh	r3, [r7, #4]
//	package_t pkg;
	uint8_t *buf = g_buffer;
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <sendMemoryBlock+0x4c>)
 8000466:	60fb      	str	r3, [r7, #12]

	if(readMemoryBlock(buf, offset) != HAL_OK) {
 8000468:	88bb      	ldrh	r3, [r7, #4]
 800046a:	4619      	mov	r1, r3
 800046c:	68f8      	ldr	r0, [r7, #12]
 800046e:	f000 fa9f 	bl	80009b0 <readMemoryBlock>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <sendMemoryBlock+0x28>
		return ERROR_READMEM;
 8000478:	2303      	movs	r3, #3
 800047a:	e00c      	b.n	8000496 <sendMemoryBlock+0x42>
	}
	if(sendPackage(cmd, buf, PKG_DATA_MAX) != HAL_OK) {
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000482:	68f9      	ldr	r1, [r7, #12]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe71 	bl	800016c <sendPackage>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <sendMemoryBlock+0x40>
		return ERROR_COMM;
 8000490:	2304      	movs	r3, #4
 8000492:	e000      	b.n	8000496 <sendMemoryBlock+0x42>
	}
	return ERROR_NONE;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200001cc 	.word	0x200001cc

080004a4 <sendNext>:

static void sendNext(uint16_t mem_idx, int *st) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	6039      	str	r1, [r7, #0]
 80004ae:	80fb      	strh	r3, [r7, #6]
	errorcode_t ret = sendMemoryBlock(CMD_MEMDATA, mem_idx);
 80004b0:	88fb      	ldrh	r3, [r7, #6]
 80004b2:	4619      	mov	r1, r3
 80004b4:	2070      	movs	r0, #112	; 0x70
 80004b6:	f7ff ffcd 	bl	8000454 <sendMemoryBlock>
 80004ba:	4603      	mov	r3, r0
 80004bc:	73fb      	strb	r3, [r7, #15]
	if (ret == ERROR_NONE) {
 80004be:	7bfb      	ldrb	r3, [r7, #15]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d103      	bne.n	80004cc <sendNext+0x28>
		*st = CMD_READNEXT;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	2261      	movs	r2, #97	; 0x61
 80004c8:	601a      	str	r2, [r3, #0]
		if (ret == ERROR_COMM)
			*st = 0;
		else
			*st = 1;
	}
}
 80004ca:	e00d      	b.n	80004e8 <sendNext+0x44>
		sendErr(ret);
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fe8f 	bl	80001f2 <sendErr>
		if (ret == ERROR_COMM)
 80004d4:	7bfb      	ldrb	r3, [r7, #15]
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d103      	bne.n	80004e2 <sendNext+0x3e>
			*st = 0;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
}
 80004e0:	e002      	b.n	80004e8 <sendNext+0x44>
			*st = 1;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	2201      	movs	r2, #1
 80004e6:	601a      	str	r2, [r3, #0]
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <uart_fsm>:


/*********************************************************/

void uart_fsm(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
	static int st=0;
	static uint32_t timeout = TIMEOUT_MS;
	static uint16_t retries = 0;
	static package_t package = {0};
	uint16_t mem_idx = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	if(HAL_GetTick() > timeout) {
 80004fa:	f000 fd4f 	bl	8000f9c <HAL_GetTick>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b93      	ldr	r3, [pc, #588]	; (8000750 <uart_fsm+0x260>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	429a      	cmp	r2, r3
 8000506:	d909      	bls.n	800051c <uart_fsm+0x2c>
		if(st != 0)
 8000508:	4b92      	ldr	r3, [pc, #584]	; (8000754 <uart_fsm+0x264>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <uart_fsm+0x26>
			sendErr(ERROR_TIMEOUT);
 8000510:	2006      	movs	r0, #6
 8000512:	f7ff fe6e 	bl	80001f2 <sendErr>
		st = 0;
 8000516:	4b8f      	ldr	r3, [pc, #572]	; (8000754 <uart_fsm+0x264>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
	}

	switch (st)
 800051c:	4b8d      	ldr	r3, [pc, #564]	; (8000754 <uart_fsm+0x264>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b61      	cmp	r3, #97	; 0x61
 8000522:	f000 80af 	beq.w	8000684 <uart_fsm+0x194>
 8000526:	2b61      	cmp	r3, #97	; 0x61
 8000528:	f300 8102 	bgt.w	8000730 <uart_fsm+0x240>
 800052c:	2b11      	cmp	r3, #17
 800052e:	dc2d      	bgt.n	800058c <uart_fsm+0x9c>
 8000530:	2b00      	cmp	r3, #0
 8000532:	f2c0 80fd 	blt.w	8000730 <uart_fsm+0x240>
 8000536:	2b11      	cmp	r3, #17
 8000538:	f200 80fa 	bhi.w	8000730 <uart_fsm+0x240>
 800053c:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <uart_fsm+0x54>)
 800053e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000542:	bf00      	nop
 8000544:	08000593 	.word	0x08000593
 8000548:	080005e9 	.word	0x080005e9
 800054c:	0800070b 	.word	0x0800070b
 8000550:	08000731 	.word	0x08000731
 8000554:	08000731 	.word	0x08000731
 8000558:	08000731 	.word	0x08000731
 800055c:	08000731 	.word	0x08000731
 8000560:	08000731 	.word	0x08000731
 8000564:	08000731 	.word	0x08000731
 8000568:	08000731 	.word	0x08000731
 800056c:	08000731 	.word	0x08000731
 8000570:	08000731 	.word	0x08000731
 8000574:	08000731 	.word	0x08000731
 8000578:	08000731 	.word	0x08000731
 800057c:	08000731 	.word	0x08000731
 8000580:	08000729 	.word	0x08000729
 8000584:	08000731 	.word	0x08000731
 8000588:	0800064d 	.word	0x0800064d
 800058c:	2b60      	cmp	r3, #96	; 0x60
 800058e:	d042      	beq.n	8000616 <uart_fsm+0x126>
 8000590:	e0ce      	b.n	8000730 <uart_fsm+0x240>
	{
	case 0: /* disconnected */
		led_off();
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	486f      	ldr	r0, [pc, #444]	; (8000758 <uart_fsm+0x268>)
 800059a:	f000 ffbf 	bl	800151c <HAL_GPIO_WritePin>
		// try to establish connection with serial port server
		ret = receivePackage(&package);
 800059e:	486f      	ldr	r0, [pc, #444]	; (800075c <uart_fsm+0x26c>)
 80005a0:	f7ff fe38 	bl	8000214 <receivePackage>
 80005a4:	4603      	mov	r3, r0
 80005a6:	717b      	strb	r3, [r7, #5]

		if (ret == HAL_OK) {
 80005a8:	797b      	ldrb	r3, [r7, #5]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f040 80c4 	bne.w	8000738 <uart_fsm+0x248>
			if(package.cmd == CMD_INIT) {
 80005b0:	4b6a      	ldr	r3, [pc, #424]	; (800075c <uart_fsm+0x26c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	f040 80bf 	bne.w	8000738 <uart_fsm+0x248>
				sendCommand(CMD_INIT);
 80005ba:	2001      	movs	r0, #1
 80005bc:	f7ff fdc6 	bl	800014c <sendCommand>
				led_on();
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	4864      	ldr	r0, [pc, #400]	; (8000758 <uart_fsm+0x268>)
 80005c8:	f000 ffa8 	bl	800151c <HAL_GPIO_WritePin>
				st++;
 80005cc:	4b61      	ldr	r3, [pc, #388]	; (8000754 <uart_fsm+0x264>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a60      	ldr	r2, [pc, #384]	; (8000754 <uart_fsm+0x264>)
 80005d4:	6013      	str	r3, [r2, #0]
				timeout = HAL_GetTick()+TIMEOUT_MS;
 80005d6:	f000 fce1 	bl	8000f9c <HAL_GetTick>
 80005da:	4603      	mov	r3, r0
 80005dc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80005e0:	3308      	adds	r3, #8
 80005e2:	4a5b      	ldr	r2, [pc, #364]	; (8000750 <uart_fsm+0x260>)
 80005e4:	6013      	str	r3, [r2, #0]
			}
		}
		break;
 80005e6:	e0a7      	b.n	8000738 <uart_fsm+0x248>

	case 1: /* waiting to receive a package */
		ret = receivePackage(&package);
 80005e8:	485c      	ldr	r0, [pc, #368]	; (800075c <uart_fsm+0x26c>)
 80005ea:	f7ff fe13 	bl	8000214 <receivePackage>
 80005ee:	4603      	mov	r3, r0
 80005f0:	717b      	strb	r3, [r7, #5]
		if(ret != HAL_OK)
 80005f2:	797b      	ldrb	r3, [r7, #5]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	f040 80a1 	bne.w	800073c <uart_fsm+0x24c>
			break;

		timeout = HAL_GetTick()+TIMEOUT_MS;
 80005fa:	f000 fccf 	bl	8000f9c <HAL_GetTick>
 80005fe:	4603      	mov	r3, r0
 8000600:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000604:	3308      	adds	r3, #8
 8000606:	4a52      	ldr	r2, [pc, #328]	; (8000750 <uart_fsm+0x260>)
 8000608:	6013      	str	r3, [r2, #0]
		st = package.cmd;
 800060a:	4b54      	ldr	r3, [pc, #336]	; (800075c <uart_fsm+0x26c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4b50      	ldr	r3, [pc, #320]	; (8000754 <uart_fsm+0x264>)
 8000612:	601a      	str	r2, [r3, #0]
		break;
 8000614:	e097      	b.n	8000746 <uart_fsm+0x256>

	case CMD_READMEM:
		if(package.data[0] != g_memtype) {
 8000616:	4b51      	ldr	r3, [pc, #324]	; (800075c <uart_fsm+0x26c>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	781a      	ldrb	r2, [r3, #0]
 800061c:	4b50      	ldr	r3, [pc, #320]	; (8000760 <uart_fsm+0x270>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d006      	beq.n	8000632 <uart_fsm+0x142>
			sendErr(ERROR_MEMID);
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff fde4 	bl	80001f2 <sendErr>
			st = 1;
 800062a:	4b4a      	ldr	r3, [pc, #296]	; (8000754 <uart_fsm+0x264>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
			break;
 8000630:	e089      	b.n	8000746 <uart_fsm+0x256>
		}
		mem_idx = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	80fb      	strh	r3, [r7, #6]
		timeout = HAL_GetTick()+TIMEOUT_MS;
 8000636:	f000 fcb1 	bl	8000f9c <HAL_GetTick>
 800063a:	4603      	mov	r3, r0
 800063c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000640:	3308      	adds	r3, #8
 8000642:	4a43      	ldr	r2, [pc, #268]	; (8000750 <uart_fsm+0x260>)
 8000644:	6013      	str	r3, [r2, #0]
		// set state so next time we skip memtype verification
		st = CMD_TXRX_ACK;
 8000646:	4b43      	ldr	r3, [pc, #268]	; (8000754 <uart_fsm+0x264>)
 8000648:	2211      	movs	r2, #17
 800064a:	601a      	str	r2, [r3, #0]
		// FALLTHROUGH

	case CMD_TXRX_ACK:
		ret = receivePackage(&package);
 800064c:	4843      	ldr	r0, [pc, #268]	; (800075c <uart_fsm+0x26c>)
 800064e:	f7ff fde1 	bl	8000214 <receivePackage>
 8000652:	4603      	mov	r3, r0
 8000654:	717b      	strb	r3, [r7, #5]
		if(ret != HAL_OK)
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d171      	bne.n	8000740 <uart_fsm+0x250>
			break;

		if(package.cmd == CMD_READNEXT)
 800065c:	4b3f      	ldr	r3, [pc, #252]	; (800075c <uart_fsm+0x26c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b61      	cmp	r3, #97	; 0x61
 8000662:	d108      	bne.n	8000676 <uart_fsm+0x186>
		{
			sendNext(mem_idx, &st);
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	493b      	ldr	r1, [pc, #236]	; (8000754 <uart_fsm+0x264>)
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff1b 	bl	80004a4 <sendNext>
			retries = 0;
 800066e:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <uart_fsm+0x274>)
 8000670:	2200      	movs	r2, #0
 8000672:	801a      	strh	r2, [r3, #0]
		}
		else {
			sendErr(ERROR_UNKNOWN);
			st = 0;
		}
		break;
 8000674:	e067      	b.n	8000746 <uart_fsm+0x256>
			sendErr(ERROR_UNKNOWN);
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff fdbb 	bl	80001f2 <sendErr>
			st = 0;
 800067c:	4b35      	ldr	r3, [pc, #212]	; (8000754 <uart_fsm+0x264>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
		break;
 8000682:	e060      	b.n	8000746 <uart_fsm+0x256>

	case CMD_READNEXT: /* Chunk of memory sent. Waiting acknowledge */
		ret = receivePackage(&package);
 8000684:	4835      	ldr	r0, [pc, #212]	; (800075c <uart_fsm+0x26c>)
 8000686:	f7ff fdc5 	bl	8000214 <receivePackage>
 800068a:	4603      	mov	r3, r0
 800068c:	717b      	strb	r3, [r7, #5]
		if(ret != HAL_OK)
 800068e:	797b      	ldrb	r3, [r7, #5]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d157      	bne.n	8000744 <uart_fsm+0x254>
			break;

		if(package.cmd == CMD_TXRX_ACK) {
 8000694:	4b31      	ldr	r3, [pc, #196]	; (800075c <uart_fsm+0x26c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b11      	cmp	r3, #17
 800069a:	d107      	bne.n	80006ac <uart_fsm+0x1bc>
			// go send next chunk
			mem_idx += PKG_DATA_MAX;
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80006a2:	80fb      	strh	r3, [r7, #6]
			st = CMD_TXRX_ACK;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <uart_fsm+0x264>)
 80006a6:	2211      	movs	r2, #17
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	e025      	b.n	80006f8 <uart_fsm+0x208>
		}
		else if(package.cmd == CMD_TXRX_ERR && retries < RETRIES_MAX) {
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <uart_fsm+0x26c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2bf1      	cmp	r3, #241	; 0xf1
 80006b2:	d10f      	bne.n	80006d4 <uart_fsm+0x1e4>
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <uart_fsm+0x274>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b09      	cmp	r3, #9
 80006ba:	d80b      	bhi.n	80006d4 <uart_fsm+0x1e4>
			// resend current chunk
			sendNext(mem_idx, &st);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	4925      	ldr	r1, [pc, #148]	; (8000754 <uart_fsm+0x264>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff feef 	bl	80004a4 <sendNext>
			++retries;
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <uart_fsm+0x274>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <uart_fsm+0x274>)
 80006d0:	801a      	strh	r2, [r3, #0]
 80006d2:	e011      	b.n	80006f8 <uart_fsm+0x208>
		}
		else if(package.cmd == CMD_TXRX_DONE) {
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <uart_fsm+0x26c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b12      	cmp	r3, #18
 80006da:	d103      	bne.n	80006e4 <uart_fsm+0x1f4>
			st = 1;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <uart_fsm+0x264>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	e009      	b.n	80006f8 <uart_fsm+0x208>
		}
		else {
			// something went wrong
			if(retries >= RETRIES_MAX)
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <uart_fsm+0x274>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d902      	bls.n	80006f2 <uart_fsm+0x202>
				sendErr(ERROR_MAX_RETRY);
 80006ec:	2005      	movs	r0, #5
 80006ee:	f7ff fd80 	bl	80001f2 <sendErr>
		//	sendCommand(CMD_DISCONNECT);
			st = 0;
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <uart_fsm+0x264>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
		}

		timeout = HAL_GetTick()+TIMEOUT_MS;
 80006f8:	f000 fc50 	bl	8000f9c <HAL_GetTick>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000702:	3308      	adds	r3, #8
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <uart_fsm+0x260>)
 8000706:	6013      	str	r3, [r2, #0]
		break;
 8000708:	e01d      	b.n	8000746 <uart_fsm+0x256>
		st = 1;
		break;
*/

	case CMD_PING:
		sendCommand(CMD_TXRX_ACK);
 800070a:	2011      	movs	r0, #17
 800070c:	f7ff fd1e 	bl	800014c <sendCommand>
		timeout = HAL_GetTick()+TIMEOUT_MS;
 8000710:	f000 fc44 	bl	8000f9c <HAL_GetTick>
 8000714:	4603      	mov	r3, r0
 8000716:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800071a:	3308      	adds	r3, #8
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <uart_fsm+0x260>)
 800071e:	6013      	str	r3, [r2, #0]
		st = 1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <uart_fsm+0x264>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e00e      	b.n	8000746 <uart_fsm+0x256>

	case CMD_DISCONNECT:
		st = 0;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <uart_fsm+0x264>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
		break;
 800072e:	e00a      	b.n	8000746 <uart_fsm+0x256>

	default:
		st=0;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <uart_fsm+0x264>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
		break;
 8000736:	e006      	b.n	8000746 <uart_fsm+0x256>
		break;
 8000738:	bf00      	nop
 800073a:	e004      	b.n	8000746 <uart_fsm+0x256>
			break;
 800073c:	bf00      	nop
 800073e:	e002      	b.n	8000746 <uart_fsm+0x256>
			break;
 8000740:	bf00      	nop
 8000742:	e000      	b.n	8000746 <uart_fsm+0x256>
			break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000
 8000754:	200002cc 	.word	0x200002cc
 8000758:	40010c00 	.word	0x40010c00
 800075c:	200002d0 	.word	0x200002d0
 8000760:	200001c4 	.word	0x200001c4
 8000764:	200002dc 	.word	0x200002dc

08000768 <getDevAddress>:


/*************************************************************************************************/

static uint16_t getDevAddress(memtype_t device, uint16_t register_address)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	80bb      	strh	r3, [r7, #4]
	uint16_t DevAddress = memory[device].address7;
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <getDevAddress+0x60>)
 800077c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000780:	81fb      	strh	r3, [r7, #14]

	// Set specific device registers
	switch(device) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d002      	beq.n	800078e <getDevAddress+0x26>
 8000788:	2b03      	cmp	r3, #3
 800078a:	d00a      	beq.n	80007a2 <getDevAddress+0x3a>
		break;
	case MEMTYPE_X24645:
		DevAddress = DevAddress | ((register_address >> 8) & 0x1FU);
		break;
	default:
		break;
 800078c:	e013      	b.n	80007b6 <getDevAddress+0x4e>
		DevAddress = DevAddress | ((register_address >> 8) & 0x07U);
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	f003 0307 	and.w	r3, r3, #7
 8000798:	b29a      	uxth	r2, r3
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	4313      	orrs	r3, r2
 800079e:	81fb      	strh	r3, [r7, #14]
		break;
 80007a0:	e009      	b.n	80007b6 <getDevAddress+0x4e>
		DevAddress = DevAddress | ((register_address >> 8) & 0x1FU);
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	81fb      	strh	r3, [r7, #14]
		break;
 80007b4:	bf00      	nop
	}

	// Convert to 8bit address
	DevAddress <<= 1;
 80007b6:	89fb      	ldrh	r3, [r7, #14]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	81fb      	strh	r3, [r7, #14]
	return DevAddress;
 80007bc:	89fb      	ldrh	r3, [r7, #14]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000004 	.word	0x20000004

080007cc <EEPROM_write_reg>:

int EEPROM_write_reg(memtype_t device, uint8_t reg, uint16_t register_address)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af04      	add	r7, sp, #16
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	460b      	mov	r3, r1
 80007d8:	71bb      	strb	r3, [r7, #6]
 80007da:	4613      	mov	r3, r2
 80007dc:	80bb      	strh	r3, [r7, #4]
	int ret = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
	int attempts = 10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	613b      	str	r3, [r7, #16]

	uint16_t DevAddress = getDevAddress(device, register_address);
 80007e6:	88ba      	ldrh	r2, [r7, #4]
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ffbb 	bl	8000768 <getDevAddress>
 80007f2:	4603      	mov	r3, r0
 80007f4:	81fb      	strh	r3, [r7, #14]
	uint16_t MemAddress = register_address;
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	81bb      	strh	r3, [r7, #12]
	uint16_t MemAddSz   = memory[device].addrSz;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <EEPROM_write_reg+0x78>)
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	4413      	add	r3, r2
 8000802:	88db      	ldrh	r3, [r3, #6]
 8000804:	817b      	strh	r3, [r7, #10]

	while(--attempts && ret != HAL_OK) {
 8000806:	e00e      	b.n	8000826 <EEPROM_write_reg+0x5a>
		ret = HAL_I2C_Mem_Write(&hi2c2, DevAddress, MemAddress, MemAddSz,
 8000808:	8978      	ldrh	r0, [r7, #10]
 800080a:	89ba      	ldrh	r2, [r7, #12]
 800080c:	89f9      	ldrh	r1, [r7, #14]
 800080e:	2364      	movs	r3, #100	; 0x64
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	2301      	movs	r3, #1
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4603      	mov	r3, r0
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <EEPROM_write_reg+0x7c>)
 800081e:	f000 ffd9 	bl	80017d4 <HAL_I2C_Mem_Write>
 8000822:	4603      	mov	r3, r0
 8000824:	617b      	str	r3, [r7, #20]
	while(--attempts && ret != HAL_OK) {
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	3b01      	subs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <EEPROM_write_reg+0x6c>
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1e7      	bne.n	8000808 <EEPROM_write_reg+0x3c>
								&reg, 1, 100);
	}

	return ret;
 8000838:	697b      	ldr	r3, [r7, #20]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000004 	.word	0x20000004
 8000848:	200002e0 	.word	0x200002e0

0800084c <read_aux>:

/*************************************************************************************************/

static int read_aux(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSz,
					uint8_t *Buf, uint16_t Size, uint16_t Attempts, uint32_t Timeout)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af04      	add	r7, sp, #16
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4603      	mov	r3, r0
 8000856:	81fb      	strh	r3, [r7, #14]
 8000858:	460b      	mov	r3, r1
 800085a:	81bb      	strh	r3, [r7, #12]
 800085c:	4613      	mov	r3, r2
 800085e:	817b      	strh	r3, [r7, #10]
	int ret = HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]

	while(--Attempts && ret != HAL_OK) {
 8000864:	e00e      	b.n	8000884 <read_aux+0x38>
		ret=HAL_I2C_Mem_Read(&hi2c2, DevAddress, MemAddress, MemAddSz, Buf, Size, Timeout);
 8000866:	8978      	ldrh	r0, [r7, #10]
 8000868:	89ba      	ldrh	r2, [r7, #12]
 800086a:	89f9      	ldrh	r1, [r7, #14]
 800086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	8c3b      	ldrh	r3, [r7, #32]
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	4603      	mov	r3, r0
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <read_aux+0x54>)
 800087c:	f001 f8a4 	bl	80019c8 <HAL_I2C_Mem_Read>
 8000880:	4603      	mov	r3, r0
 8000882:	617b      	str	r3, [r7, #20]
	while(--Attempts && ret != HAL_OK) {
 8000884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000886:	3b01      	subs	r3, #1
 8000888:	84bb      	strh	r3, [r7, #36]	; 0x24
 800088a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <read_aux+0x4a>
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1e7      	bne.n	8000866 <read_aux+0x1a>
	}

	return ret;
 8000896:	697b      	ldr	r3, [r7, #20]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200002e0 	.word	0x200002e0

080008a4 <EEPROM_read>:

	return read_aux(DevAddress, MemAddress, MemAddSz, page, Size, Attempts, Timeout);
}

int EEPROM_read(memtype_t device, uint8_t *buf, uint16_t register_base, uint16_t size)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af04      	add	r7, sp, #16
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	4611      	mov	r1, r2
 80008ae:	461a      	mov	r2, r3
 80008b0:	4603      	mov	r3, r0
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	460b      	mov	r3, r1
 80008b6:	81bb      	strh	r3, [r7, #12]
 80008b8:	4613      	mov	r3, r2
 80008ba:	80fb      	strh	r3, [r7, #6]
	uint16_t DevAddress = getDevAddress(device, register_base);
 80008bc:	89ba      	ldrh	r2, [r7, #12]
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff50 	bl	8000768 <getDevAddress>
 80008c8:	4603      	mov	r3, r0
 80008ca:	83fb      	strh	r3, [r7, #30]
	uint16_t MemAddress = register_base;
 80008cc:	89bb      	ldrh	r3, [r7, #12]
 80008ce:	83bb      	strh	r3, [r7, #28]
	uint16_t MemAddSz   = memory[device].addrSz;
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <EEPROM_read+0x68>)
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	4413      	add	r3, r2
 80008d8:	88db      	ldrh	r3, [r3, #6]
 80008da:	837b      	strh	r3, [r7, #26]
	uint16_t Size       = size;
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	833b      	strh	r3, [r7, #24]
	uint16_t Attempts   = 100;
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	82fb      	strh	r3, [r7, #22]
	uint32_t Timeout    = 5000;
 80008e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80008e8:	613b      	str	r3, [r7, #16]

	return read_aux(DevAddress, MemAddress, MemAddSz, buf, Size, Attempts, Timeout);
 80008ea:	8b7a      	ldrh	r2, [r7, #26]
 80008ec:	8bb9      	ldrh	r1, [r7, #28]
 80008ee:	8bf8      	ldrh	r0, [r7, #30]
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	8afb      	ldrh	r3, [r7, #22]
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	8b3b      	ldrh	r3, [r7, #24]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	f7ff ffa5 	bl	800084c <read_aux>
 8000902:	4603      	mov	r3, r0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000004 	.word	0x20000004

08000910 <MEMX24645_enableWriteAccess>:
}

/*************************************************************************************************/

void MEMX24645_enableWriteAccess()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	if(HAL_OK != EEPROM_write_reg(MEMTYPE_X24645, 0x02, 0x1FFF)) {
 8000914:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000918:	2102      	movs	r1, #2
 800091a:	2003      	movs	r0, #3
 800091c:	f7ff ff56 	bl	80007cc <EEPROM_write_reg>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <MEMX24645_enableWriteAccess+0x18>
		while(1); // Do not continue
 8000926:	e7fe      	b.n	8000926 <MEMX24645_enableWriteAccess+0x16>
	}
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <getMemSize>:

uint32_t getMemSize(enum memtype_e memtype) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]

//	if(memtype >= MEMTYPE_NONE && memtype <= MEMTYPE_mAX)
		return memory[memtype].size;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <getMemSize+0x20>)
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	4413      	add	r3, r2
 800093e:	885b      	ldrh	r3, [r3, #2]

//	return 0;
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000004 	.word	0x20000004

08000950 <query_devices>:

static int query_devices(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
	int status = HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	607b      	str	r3, [r7, #4]
			break;
		}
	}

	return status;*/ // testing :-)
	g_memtype = MEMTYPE_24LC16;
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <query_devices+0x1c>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	200001c4 	.word	0x200001c4

08000970 <EEPROM_Init>:

void EEPROM_Init()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	while(query_devices() != HAL_OK)
 8000974:	e002      	b.n	800097c <EEPROM_Init+0xc>
		HAL_Delay(10);
 8000976:	200a      	movs	r0, #10
 8000978:	f000 fb1a 	bl	8000fb0 <HAL_Delay>
	while(query_devices() != HAL_OK)
 800097c:	f7ff ffe8 	bl	8000950 <query_devices>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f7      	bne.n	8000976 <EEPROM_Init+0x6>

	g_memsize = getMemSize(g_memtype);
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <EEPROM_Init+0x38>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffce 	bl	800092c <getMemSize>
 8000990:	4603      	mov	r3, r0
 8000992:	4a06      	ldr	r2, [pc, #24]	; (80009ac <EEPROM_Init+0x3c>)
 8000994:	6013      	str	r3, [r2, #0]

	if(g_memtype == MEMTYPE_X24645) {
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <EEPROM_Init+0x38>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d101      	bne.n	80009a2 <EEPROM_Init+0x32>
		MEMX24645_enableWriteAccess();
 800099e:	f7ff ffb7 	bl	8000910 <MEMX24645_enableWriteAccess>
	}
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001c4 	.word	0x200001c4
 80009ac:	200001c8 	.word	0x200001c8

080009b0 <readMemoryBlock>:
#include "main.h"



int readMemoryBlock(uint8_t *buffer, uint16_t offset)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	807b      	strh	r3, [r7, #2]
	return EEPROM_read(g_memtype, buffer, offset, PKG_DATA_MAX);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <readMemoryBlock+0x28>)
 80009be:	7818      	ldrb	r0, [r3, #0]
 80009c0:	887a      	ldrh	r2, [r7, #2]
 80009c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f7ff ff6c 	bl	80008a4 <EEPROM_read>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200001c4 	.word	0x200001c4

080009dc <write>:
}

#if 1 // USB-CDC

static int write(const uint8_t *data, uint16_t sz)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
	int ret = USBD_FAIL;
 80009e8:	2302      	movs	r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]

	while ( (ret = CDC_Transmit_FS((uint8_t *) data, sz)) == USBD_BUSY );
 80009ec:	bf00      	nop
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	4619      	mov	r1, r3
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f007 fe18 	bl	8008628 <CDC_Transmit_FS>
 80009f8:	4603      	mov	r3, r0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d0f5      	beq.n	80009ee <write+0x12>

	return ret;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <serial_write>:

int serial_write(const uint8_t *data, uint16_t len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]
	uint32_t tstart = HAL_GetTick();
 8000a18:	f000 fac0 	bl	8000f9c <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]
	int ret = USBD_FAIL;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	60fb      	str	r3, [r7, #12]

	while(ret != USBD_OK && (HAL_GetTick()-tstart) < 1000)
 8000a22:	e005      	b.n	8000a30 <serial_write+0x24>
		ret = write(data, len);
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	4619      	mov	r1, r3
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ffd7 	bl	80009dc <write>
 8000a2e:	60f8      	str	r0, [r7, #12]
	while(ret != USBD_OK && (HAL_GetTick()-tstart) < 1000)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d007      	beq.n	8000a46 <serial_write+0x3a>
 8000a36:	f000 fab1 	bl	8000f9c <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a44:	d3ee      	bcc.n	8000a24 <serial_write+0x18>

	return ret;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <serial_writebyte>:

int serial_writebyte(uint8_t byte)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	return serial_write(&byte, 1);
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ffd4 	bl	8000a0c <serial_write>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <serial_available>:


bool serial_available(void) {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
	return CDC_GetRxBufferBytesAvailable_FS() > 0;
 8000a72:	f007 fe37 	bl	80086e4 <CDC_GetRxBufferBytesAvailable_FS>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2301      	movne	r3, #1
 8000a7e:	2300      	moveq	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <read>:

static int read(uint8_t *buf, uint16_t sz)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	807b      	strh	r3, [r7, #2]
	uint16_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 8000a92:	f007 fe27 	bl	80086e4 <CDC_GetRxBufferBytesAvailable_FS>
 8000a96:	4603      	mov	r3, r0
 8000a98:	81bb      	strh	r3, [r7, #12]
	uint16_t bytesReaded = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	81fb      	strh	r3, [r7, #14]

	if (bytesAvailable > 0) {
 8000a9e:	89bb      	ldrh	r3, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00f      	beq.n	8000ac4 <read+0x3e>

		uint16_t bytesToRead = bytesAvailable >= sz ? sz : bytesAvailable;
 8000aa4:	887a      	ldrh	r2, [r7, #2]
 8000aa6:	89bb      	ldrh	r3, [r7, #12]
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	bf28      	it	cs
 8000aac:	4613      	movcs	r3, r2
 8000aae:	817b      	strh	r3, [r7, #10]

		if (CDC_ReadRxBuffer_FS(buf, bytesToRead) == USB_CDC_RX_BUFFER_OK) {
 8000ab0:	897b      	ldrh	r3, [r7, #10]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f007 fddd 	bl	8008674 <CDC_ReadRxBuffer_FS>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <read+0x3e>
			bytesReaded = bytesToRead;
 8000ac0:	897b      	ldrh	r3, [r7, #10]
 8000ac2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return bytesReaded;
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <serial_read>:

int serial_read(uint8_t *buffer, uint16_t len)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	807b      	strh	r3, [r7, #2]
	uint32_t tstart = HAL_GetTick();
 8000ada:	f000 fa5f 	bl	8000f9c <HAL_GetTick>
 8000ade:	6138      	str	r0, [r7, #16]
	uint16_t bytesRemaining = len;
 8000ae0:	887b      	ldrh	r3, [r7, #2]
 8000ae2:	82fb      	strh	r3, [r7, #22]

	while(bytesRemaining > 0 && (HAL_GetTick()-tstart) < 1000)
 8000ae4:	e015      	b.n	8000b12 <serial_read+0x44>
	{
		uint16_t bytesToRead = bytesRemaining > HL_RX_BUFFER_SIZE ?
 8000ae6:	8afb      	ldrh	r3, [r7, #22]
 8000ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aec:	bf28      	it	cs
 8000aee:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8000af2:	81fb      	strh	r3, [r7, #14]
				HL_RX_BUFFER_SIZE : bytesRemaining;

		uint16_t bytesReaded = read(buffer, bytesToRead);
 8000af4:	89fb      	ldrh	r3, [r7, #14]
 8000af6:	4619      	mov	r1, r3
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ffc4 	bl	8000a86 <read>
 8000afe:	4603      	mov	r3, r0
 8000b00:	81bb      	strh	r3, [r7, #12]

		bytesRemaining -= bytesReaded;
 8000b02:	8afa      	ldrh	r2, [r7, #22]
 8000b04:	89bb      	ldrh	r3, [r7, #12]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	82fb      	strh	r3, [r7, #22]
		buffer += bytesReaded;
 8000b0a:	89bb      	ldrh	r3, [r7, #12]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	607b      	str	r3, [r7, #4]
	while(bytesRemaining > 0 && (HAL_GetTick()-tstart) < 1000)
 8000b12:	8afb      	ldrh	r3, [r7, #22]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d007      	beq.n	8000b28 <serial_read+0x5a>
 8000b18:	f000 fa40 	bl	8000f9c <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b26:	d3de      	bcc.n	8000ae6 <serial_read+0x18>
	}

	if(bytesRemaining != 0)
 8000b28:	8afb      	ldrh	r3, [r7, #22]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <serial_read+0x64>
		return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <serial_read+0x66>

	return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f000 f9d4 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f81e 	bl	8000b84 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 f8a4 	bl	8000c94 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b4c:	f000 f874 	bl	8000c38 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000b50:	f007 fbf4 	bl	800833c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  EEPROM_Init();
 8000b54:	f7ff ff0c 	bl	8000970 <EEPROM_Init>

  led_on();
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <main+0x44>)
 8000b60:	f000 fcdc 	bl	800151c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000b64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b68:	f000 fa22 	bl	8000fb0 <HAL_Delay>
  led_off();
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b72:	4803      	ldr	r0, [pc, #12]	; (8000b80 <main+0x44>)
 8000b74:	f000 fcd2 	bl	800151c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  //  write_test();
  //  read_test();
  while (1)
  {
    uart_fsm();
 8000b78:	f7ff fcba 	bl	80004f0 <uart_fsm>
 8000b7c:	e7fc      	b.n	8000b78 <main+0x3c>
 8000b7e:	bf00      	nop
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	; 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8e:	2228      	movs	r2, #40	; 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f008 f9c4 	bl	8008f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 f846 	bl	8003c6c <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000be6:	f000 f8a1 	bl	8000d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2102      	movs	r1, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fab2 	bl	8004170 <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c12:	f000 f88b 	bl	8000d2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c16:	2310      	movs	r3, #16
 8000c18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fc29 	bl	8004478 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c2c:	f000 f87e 	bl	8000d2c <Error_Handler>
  }
}
 8000c30:	bf00      	nop
 8000c32:	3750      	adds	r7, #80	; 0x50
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c3e:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <MX_I2C2_Init+0x54>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_I2C2_Init+0x58>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_I2C2_Init+0x50>)
 8000c76:	f000 fc69 	bl	800154c <HAL_I2C_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f000 f854 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200002e0 	.word	0x200002e0
 8000c8c:	40005800 	.word	0x40005800
 8000c90:	000186a0 	.word	0x000186a0

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000cae:	f043 0320 	orr.w	r3, r3, #32
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0320 	and.w	r3, r3, #32
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_GPIO_Init+0x90>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf6:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_GPIO_Init+0x94>)
 8000cf8:	f000 fc10 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_GPIO_Init+0x94>)
 8000d16:	f000 fa7d 	bl	8001214 <HAL_GPIO_Init>

}
 8000d1a:	bf00      	nop
 8000d1c:	3720      	adds	r7, #32
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010c00 	.word	0x40010c00

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_MspInit+0x5c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <HAL_MspInit+0x5c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6193      	str	r3, [r2, #24]
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_MspInit+0x5c>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <HAL_MspInit+0x5c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_MspInit+0x5c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_MspInit+0x5c>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_MspInit+0x60>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_MspInit+0x60>)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010000 	.word	0x40010000

08000d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <HAL_I2C_MspInit+0x74>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d124      	bne.n	8000e06 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_I2C_MspInit+0x78>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <HAL_I2C_MspInit+0x78>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_I2C_MspInit+0x78>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <HAL_I2C_MspInit+0x7c>)
 8000dea:	f000 fa13 	bl	8001214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_I2C_MspInit+0x78>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_I2C_MspInit+0x78>)
 8000df4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_I2C_MspInit+0x78>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40005800 	.word	0x40005800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 f889 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000e72:	f001 fc9c 	bl	80027ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200011dc 	.word	0x200011dc

08000e80 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e86:	f001 fc92 	bl	80027ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200011dc 	.word	0x200011dc

08000e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ea0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ea2:	e003      	b.n	8000eac <LoopCopyDataInit>

08000ea4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ea6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ea8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eaa:	3104      	adds	r1, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000eb0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eb2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000eb4:	d3f6      	bcc.n	8000ea4 <CopyDataInit>
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000eb8:	e002      	b.n	8000ec0 <LoopFillZerobss>

08000eba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ebc:	f842 3b04 	str.w	r3, [r2], #4

08000ec0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ec2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ec4:	d3f9      	bcc.n	8000eba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ec6:	f7ff ffe5 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f008 f805 	bl	8008ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ece:	f7ff fe35 	bl	8000b3c <main>
  bx lr
 8000ed2:	4770      	bx	lr
  ldr r3, =_sidata
 8000ed4:	08008fc0 	.word	0x08008fc0
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000edc:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 8000ee0:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8000ee4:	200016e8 	.word	0x200016e8

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x28>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f947 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff ff16 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f95f 	bl	80011fa <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f54:	f000 f927 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000002c 	.word	0x2000002c
 8000f70:	20000034 	.word	0x20000034
 8000f74:	20000030 	.word	0x20000030

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x20>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000034 	.word	0x20000034
 8000f98:	20000334 	.word	0x20000334

08000f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000334 	.word	0x20000334

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff fff0 	bl	8000f9c <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffe0 	bl	8000f9c <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000034 	.word	0x20000034

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4906      	ldr	r1, [pc, #24]	; (8001090 <__NVIC_EnableIRQ+0x34>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001170:	f7ff ff90 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff2d 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff42 	bl	8001040 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff90 	bl	80010e8 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff35 	bl	800105c <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b08b      	sub	sp, #44	; 0x2c
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e169      	b.n	80014fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001228:	2201      	movs	r2, #1
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8158 	bne.w	80014f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4a9a      	ldr	r2, [pc, #616]	; (80014b4 <HAL_GPIO_Init+0x2a0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d05e      	beq.n	800130e <HAL_GPIO_Init+0xfa>
 8001250:	4a98      	ldr	r2, [pc, #608]	; (80014b4 <HAL_GPIO_Init+0x2a0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d875      	bhi.n	8001342 <HAL_GPIO_Init+0x12e>
 8001256:	4a98      	ldr	r2, [pc, #608]	; (80014b8 <HAL_GPIO_Init+0x2a4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d058      	beq.n	800130e <HAL_GPIO_Init+0xfa>
 800125c:	4a96      	ldr	r2, [pc, #600]	; (80014b8 <HAL_GPIO_Init+0x2a4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d86f      	bhi.n	8001342 <HAL_GPIO_Init+0x12e>
 8001262:	4a96      	ldr	r2, [pc, #600]	; (80014bc <HAL_GPIO_Init+0x2a8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d052      	beq.n	800130e <HAL_GPIO_Init+0xfa>
 8001268:	4a94      	ldr	r2, [pc, #592]	; (80014bc <HAL_GPIO_Init+0x2a8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d869      	bhi.n	8001342 <HAL_GPIO_Init+0x12e>
 800126e:	4a94      	ldr	r2, [pc, #592]	; (80014c0 <HAL_GPIO_Init+0x2ac>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d04c      	beq.n	800130e <HAL_GPIO_Init+0xfa>
 8001274:	4a92      	ldr	r2, [pc, #584]	; (80014c0 <HAL_GPIO_Init+0x2ac>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d863      	bhi.n	8001342 <HAL_GPIO_Init+0x12e>
 800127a:	4a92      	ldr	r2, [pc, #584]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d046      	beq.n	800130e <HAL_GPIO_Init+0xfa>
 8001280:	4a90      	ldr	r2, [pc, #576]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d85d      	bhi.n	8001342 <HAL_GPIO_Init+0x12e>
 8001286:	2b12      	cmp	r3, #18
 8001288:	d82a      	bhi.n	80012e0 <HAL_GPIO_Init+0xcc>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d859      	bhi.n	8001342 <HAL_GPIO_Init+0x12e>
 800128e:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <HAL_GPIO_Init+0x80>)
 8001290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001294:	0800130f 	.word	0x0800130f
 8001298:	080012e9 	.word	0x080012e9
 800129c:	080012fb 	.word	0x080012fb
 80012a0:	0800133d 	.word	0x0800133d
 80012a4:	08001343 	.word	0x08001343
 80012a8:	08001343 	.word	0x08001343
 80012ac:	08001343 	.word	0x08001343
 80012b0:	08001343 	.word	0x08001343
 80012b4:	08001343 	.word	0x08001343
 80012b8:	08001343 	.word	0x08001343
 80012bc:	08001343 	.word	0x08001343
 80012c0:	08001343 	.word	0x08001343
 80012c4:	08001343 	.word	0x08001343
 80012c8:	08001343 	.word	0x08001343
 80012cc:	08001343 	.word	0x08001343
 80012d0:	08001343 	.word	0x08001343
 80012d4:	08001343 	.word	0x08001343
 80012d8:	080012f1 	.word	0x080012f1
 80012dc:	08001305 	.word	0x08001305
 80012e0:	4a79      	ldr	r2, [pc, #484]	; (80014c8 <HAL_GPIO_Init+0x2b4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012e6:	e02c      	b.n	8001342 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e029      	b.n	8001344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	3304      	adds	r3, #4
 80012f6:	623b      	str	r3, [r7, #32]
          break;
 80012f8:	e024      	b.n	8001344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	3308      	adds	r3, #8
 8001300:	623b      	str	r3, [r7, #32]
          break;
 8001302:	e01f      	b.n	8001344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	330c      	adds	r3, #12
 800130a:	623b      	str	r3, [r7, #32]
          break;
 800130c:	e01a      	b.n	8001344 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001316:	2304      	movs	r3, #4
 8001318:	623b      	str	r3, [r7, #32]
          break;
 800131a:	e013      	b.n	8001344 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d105      	bne.n	8001330 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001324:	2308      	movs	r3, #8
 8001326:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	611a      	str	r2, [r3, #16]
          break;
 800132e:	e009      	b.n	8001344 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	615a      	str	r2, [r3, #20]
          break;
 800133a:	e003      	b.n	8001344 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x130>
          break;
 8001342:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2bff      	cmp	r3, #255	; 0xff
 8001348:	d801      	bhi.n	800134e <HAL_GPIO_Init+0x13a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	e001      	b.n	8001352 <HAL_GPIO_Init+0x13e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3304      	adds	r3, #4
 8001352:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2bff      	cmp	r3, #255	; 0xff
 8001358:	d802      	bhi.n	8001360 <HAL_GPIO_Init+0x14c>
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	e002      	b.n	8001366 <HAL_GPIO_Init+0x152>
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	3b08      	subs	r3, #8
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	210f      	movs	r1, #15
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	401a      	ands	r2, r3
 8001378:	6a39      	ldr	r1, [r7, #32]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	431a      	orrs	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80b1 	beq.w	80014f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001394:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <HAL_GPIO_Init+0x2b8>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <HAL_GPIO_Init+0x2b8>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013ac:	4a48      	ldr	r2, [pc, #288]	; (80014d0 <HAL_GPIO_Init+0x2bc>)
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a40      	ldr	r2, [pc, #256]	; (80014d4 <HAL_GPIO_Init+0x2c0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d013      	beq.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a3f      	ldr	r2, [pc, #252]	; (80014d8 <HAL_GPIO_Init+0x2c4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1e8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a3e      	ldr	r2, [pc, #248]	; (80014dc <HAL_GPIO_Init+0x2c8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1e4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a3d      	ldr	r2, [pc, #244]	; (80014e0 <HAL_GPIO_Init+0x2cc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1e0>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e006      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e004      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e002      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 8001400:	2300      	movs	r3, #0
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	f002 0203 	and.w	r2, r2, #3
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	4093      	lsls	r3, r2
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001412:	492f      	ldr	r1, [pc, #188]	; (80014d0 <HAL_GPIO_Init+0x2bc>)
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	492c      	ldr	r1, [pc, #176]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	43db      	mvns	r3, r3
 8001442:	4928      	ldr	r1, [pc, #160]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001444:	4013      	ands	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	4922      	ldr	r1, [pc, #136]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	43db      	mvns	r3, r3
 800146a:	491e      	ldr	r1, [pc, #120]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800146c:	4013      	ands	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	4918      	ldr	r1, [pc, #96]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	608b      	str	r3, [r1, #8]
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	43db      	mvns	r3, r3
 8001492:	4914      	ldr	r1, [pc, #80]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001494:	4013      	ands	r3, r2
 8001496:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d021      	beq.n	80014e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	490e      	ldr	r1, [pc, #56]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	60cb      	str	r3, [r1, #12]
 80014b0:	e021      	b.n	80014f6 <HAL_GPIO_Init+0x2e2>
 80014b2:	bf00      	nop
 80014b4:	10320000 	.word	0x10320000
 80014b8:	10310000 	.word	0x10310000
 80014bc:	10220000 	.word	0x10220000
 80014c0:	10210000 	.word	0x10210000
 80014c4:	10120000 	.word	0x10120000
 80014c8:	10110000 	.word	0x10110000
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000
 80014d4:	40010800 	.word	0x40010800
 80014d8:	40010c00 	.word	0x40010c00
 80014dc:	40011000 	.word	0x40011000
 80014e0:	40011400 	.word	0x40011400
 80014e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_GPIO_Init+0x304>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4909      	ldr	r1, [pc, #36]	; (8001518 <HAL_GPIO_Init+0x304>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	3301      	adds	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	fa22 f303 	lsr.w	r3, r2, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	f47f ae8e 	bne.w	8001228 <HAL_GPIO_Init+0x14>
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	372c      	adds	r7, #44	; 0x2c
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	611a      	str	r2, [r3, #16]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e12b      	b.n	80017b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fc12 	bl	8000d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800159e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b0:	f002 ff30 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80015b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a81      	ldr	r2, [pc, #516]	; (80017c0 <HAL_I2C_Init+0x274>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d807      	bhi.n	80015d0 <HAL_I2C_Init+0x84>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a80      	ldr	r2, [pc, #512]	; (80017c4 <HAL_I2C_Init+0x278>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bf94      	ite	ls
 80015c8:	2301      	movls	r3, #1
 80015ca:	2300      	movhi	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	e006      	b.n	80015de <HAL_I2C_Init+0x92>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a7d      	ldr	r2, [pc, #500]	; (80017c8 <HAL_I2C_Init+0x27c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf94      	ite	ls
 80015d8:	2301      	movls	r3, #1
 80015da:	2300      	movhi	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0e7      	b.n	80017b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a78      	ldr	r2, [pc, #480]	; (80017cc <HAL_I2C_Init+0x280>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	430a      	orrs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a6a      	ldr	r2, [pc, #424]	; (80017c0 <HAL_I2C_Init+0x274>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d802      	bhi.n	8001620 <HAL_I2C_Init+0xd4>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	e009      	b.n	8001634 <HAL_I2C_Init+0xe8>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	4a69      	ldr	r2, [pc, #420]	; (80017d0 <HAL_I2C_Init+0x284>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	3301      	adds	r3, #1
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	430b      	orrs	r3, r1
 800163a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	495c      	ldr	r1, [pc, #368]	; (80017c0 <HAL_I2C_Init+0x274>)
 8001650:	428b      	cmp	r3, r1
 8001652:	d819      	bhi.n	8001688 <HAL_I2C_Init+0x13c>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e59      	subs	r1, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001662:	1c59      	adds	r1, r3, #1
 8001664:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001668:	400b      	ands	r3, r1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00a      	beq.n	8001684 <HAL_I2C_Init+0x138>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1e59      	subs	r1, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fbb1 f3f3 	udiv	r3, r1, r3
 800167c:	3301      	adds	r3, #1
 800167e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001682:	e051      	b.n	8001728 <HAL_I2C_Init+0x1dc>
 8001684:	2304      	movs	r3, #4
 8001686:	e04f      	b.n	8001728 <HAL_I2C_Init+0x1dc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d111      	bne.n	80016b4 <HAL_I2C_Init+0x168>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1e58      	subs	r0, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	440b      	add	r3, r1
 800169e:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	e012      	b.n	80016da <HAL_I2C_Init+0x18e>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1e58      	subs	r0, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	0099      	lsls	r1, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf0c      	ite	eq
 80016d4:	2301      	moveq	r3, #1
 80016d6:	2300      	movne	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Init+0x196>
 80016de:	2301      	movs	r3, #1
 80016e0:	e022      	b.n	8001728 <HAL_I2C_Init+0x1dc>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10e      	bne.n	8001708 <HAL_I2C_Init+0x1bc>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1e58      	subs	r0, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6859      	ldr	r1, [r3, #4]
 80016f2:	460b      	mov	r3, r1
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	440b      	add	r3, r1
 80016f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001706:	e00f      	b.n	8001728 <HAL_I2C_Init+0x1dc>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e58      	subs	r0, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	0099      	lsls	r1, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	fbb0 f3f3 	udiv	r3, r0, r3
 800171e:	3301      	adds	r3, #1
 8001720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	6809      	ldr	r1, [r1, #0]
 800172c:	4313      	orrs	r3, r2
 800172e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6911      	ldr	r1, [r2, #16]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68d2      	ldr	r2, [r2, #12]
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	000186a0 	.word	0x000186a0
 80017c4:	001e847f 	.word	0x001e847f
 80017c8:	003d08ff 	.word	0x003d08ff
 80017cc:	431bde83 	.word	0x431bde83
 80017d0:	10624dd3 	.word	0x10624dd3

080017d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	817b      	strh	r3, [r7, #10]
 80017e6:	460b      	mov	r3, r1
 80017e8:	813b      	strh	r3, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017ee:	f7ff fbd5 	bl	8000f9c <HAL_GetTick>
 80017f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	f040 80d9 	bne.w	80019b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2319      	movs	r3, #25
 8001808:	2201      	movs	r2, #1
 800180a:	496d      	ldr	r1, [pc, #436]	; (80019c0 <HAL_I2C_Mem_Write+0x1ec>)
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fcc1 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
 800181a:	e0cc      	b.n	80019b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_I2C_Mem_Write+0x56>
 8001826:	2302      	movs	r3, #2
 8001828:	e0c5      	b.n	80019b6 <HAL_I2C_Mem_Write+0x1e2>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d007      	beq.n	8001850 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2221      	movs	r2, #33	; 0x21
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a3a      	ldr	r2, [r7, #32]
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4a4d      	ldr	r2, [pc, #308]	; (80019c4 <HAL_I2C_Mem_Write+0x1f0>)
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001892:	88f8      	ldrh	r0, [r7, #6]
 8001894:	893a      	ldrh	r2, [r7, #8]
 8001896:	8979      	ldrh	r1, [r7, #10]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	4603      	mov	r3, r0
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 faf8 	bl	8001e98 <I2C_RequestMemoryWrite>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d052      	beq.n	8001954 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e081      	b.n	80019b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fd42 	bl	8002340 <I2C_WaitOnTXEFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00d      	beq.n	80018de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d107      	bne.n	80018da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e06b      	b.n	80019b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b04      	cmp	r3, #4
 800191a:	d11b      	bne.n	8001954 <HAL_I2C_Mem_Write+0x180>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	d017      	beq.n	8001954 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193e:	3b01      	subs	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1aa      	bne.n	80018b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 fd2e 	bl	80023c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00d      	beq.n	8001988 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	2b04      	cmp	r3, #4
 8001972:	d107      	bne.n	8001984 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001982:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e016      	b.n	80019b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	00100002 	.word	0x00100002
 80019c4:	ffff0000 	.word	0xffff0000

080019c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	460b      	mov	r3, r1
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e6:	f7ff fad9 	bl	8000f9c <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	f040 8244 	bne.w	8001e82 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2319      	movs	r3, #25
 8001a00:	2201      	movs	r2, #1
 8001a02:	4982      	ldr	r1, [pc, #520]	; (8001c0c <HAL_I2C_Mem_Read+0x244>)
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 fbc5 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001a10:	2302      	movs	r3, #2
 8001a12:	e237      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_I2C_Mem_Read+0x5a>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e230      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d007      	beq.n	8001a48 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2222      	movs	r2, #34	; 0x22
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2240      	movs	r2, #64	; 0x40
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a62      	ldr	r2, [pc, #392]	; (8001c10 <HAL_I2C_Mem_Read+0x248>)
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a8a:	88f8      	ldrh	r0, [r7, #6]
 8001a8c:	893a      	ldrh	r2, [r7, #8]
 8001a8e:	8979      	ldrh	r1, [r7, #10]
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4603      	mov	r3, r0
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fa92 	bl	8001fc4 <I2C_RequestMemoryRead>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1ec      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d113      	bne.n	8001ada <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e1c0      	b.n	8001e5c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d11e      	bne.n	8001b20 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001af2:	b672      	cpsid	i
}
 8001af4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b1c:	b662      	cpsie	i
}
 8001b1e:	e035      	b.n	8001b8c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d11e      	bne.n	8001b66 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b62:	b662      	cpsie	i
}
 8001b64:	e012      	b.n	8001b8c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b74:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001b8c:	e166      	b.n	8001e5c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	f200 811f 	bhi.w	8001dd6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d123      	bne.n	8001be8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fc4d 	bl	8002444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e167      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001be6:	e139      	b.n	8001e5c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d152      	bne.n	8001c96 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <HAL_I2C_Mem_Read+0x24c>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 faca 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e13c      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
 8001c0a:	bf00      	nop
 8001c0c:	00100002 	.word	0x00100002
 8001c10:	ffff0000 	.word	0xffff0000
 8001c14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5e:	b662      	cpsie	i
}
 8001c60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c94:	e0e2      	b.n	8001e5c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	497b      	ldr	r1, [pc, #492]	; (8001e8c <HAL_I2C_Mem_Read+0x4c4>)
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 fa77 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0e9      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc0:	b672      	cpsid	i
}
 8001cc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001cf6:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <HAL_I2C_Mem_Read+0x4c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_I2C_Mem_Read+0x4cc>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0a1a      	lsrs	r2, r3, #8
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00da      	lsls	r2, r3, #3
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d118      	bne.n	8001d4e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2220      	movs	r2, #32
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3e:	b662      	cpsie	i
}
 8001d40:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e09a      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d1d9      	bne.n	8001d10 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d9e:	b662      	cpsie	i
}
 8001da0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd4:	e042      	b.n	8001e5c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fb32 	bl	8002444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e04c      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d118      	bne.n	8001e5c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f47f ae94 	bne.w	8001b8e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
  }
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3728      	adds	r7, #40	; 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	00010004 	.word	0x00010004
 8001e90:	2000002c 	.word	0x2000002c
 8001e94:	14f8b589 	.word	0x14f8b589

08001e98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f960 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee8:	d103      	bne.n	8001ef2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e05f      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	6a3a      	ldr	r2, [r7, #32]
 8001f0a:	492d      	ldr	r1, [pc, #180]	; (8001fc0 <I2C_RequestMemoryWrite+0x128>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f998 	bl	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e04c      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fa02 	bl	8002340 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d107      	bne.n	8001f5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e02b      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f64:	893b      	ldrh	r3, [r7, #8]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	e021      	b.n	8001fb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f70:	893b      	ldrh	r3, [r7, #8]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f9dc 	bl	8002340 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d107      	bne.n	8001fa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e005      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00010002 	.word	0x00010002

08001fc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	4608      	mov	r0, r1
 8001fce:	4611      	mov	r1, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	817b      	strh	r3, [r7, #10]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	813b      	strh	r3, [r7, #8]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	2200      	movs	r2, #0
 8002006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f8c2 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00d      	beq.n	8002032 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002024:	d103      	bne.n	800202e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0aa      	b.n	8002188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	6a3a      	ldr	r2, [r7, #32]
 8002046:	4952      	ldr	r1, [pc, #328]	; (8002190 <I2C_RequestMemoryRead+0x1cc>)
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f8fa 	bl	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e097      	b.n	8002188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f964 	bl	8002340 <I2C_WaitOnTXEFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b04      	cmp	r3, #4
 8002084:	d107      	bne.n	8002096 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e076      	b.n	8002188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020a0:	893b      	ldrh	r3, [r7, #8]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	e021      	b.n	80020f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020ac:	893b      	ldrh	r3, [r7, #8]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020bc:	6a39      	ldr	r1, [r7, #32]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f93e 	bl	8002340 <I2C_WaitOnTXEFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d107      	bne.n	80020e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e050      	b.n	8002188 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020e6:	893b      	ldrh	r3, [r7, #8]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f2:	6a39      	ldr	r1, [r7, #32]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f923 	bl	8002340 <I2C_WaitOnTXEFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b04      	cmp	r3, #4
 8002106:	d107      	bne.n	8002118 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002116:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e035      	b.n	8002188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800212a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	2200      	movs	r2, #0
 8002134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f82b 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002152:	d103      	bne.n	800215c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e013      	b.n	8002188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002160:	897b      	ldrh	r3, [r7, #10]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	6a3a      	ldr	r2, [r7, #32]
 8002174:	4906      	ldr	r1, [pc, #24]	; (8002190 <I2C_RequestMemoryRead+0x1cc>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f863 	bl	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	00010002 	.word	0x00010002

08002194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a4:	e025      	b.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ac:	d021      	beq.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7fe fef5 	bl	8000f9c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d116      	bne.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e023      	b.n	800223a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d10d      	bne.n	8002218 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4013      	ands	r3, r2
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf0c      	ite	eq
 800220e:	2301      	moveq	r3, #1
 8002210:	2300      	movne	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	e00c      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4013      	ands	r3, r2
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	429a      	cmp	r2, r3
 8002236:	d0b6      	beq.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002250:	e051      	b.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002260:	d123      	bne.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002270:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800227a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f043 0204 	orr.w	r2, r3, #4
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e046      	b.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022b0:	d021      	beq.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b2:	f7fe fe73 	bl	8000f9c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d116      	bne.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e020      	b.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4013      	ands	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	e00b      	b.n	8002332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	43da      	mvns	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4013      	ands	r3, r2
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d18d      	bne.n	8002252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800234c:	e02d      	b.n	80023aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f8ce 	bl	80024f0 <I2C_IsAcknowledgeFailed>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e02d      	b.n	80023ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002364:	d021      	beq.n	80023aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7fe fe19 	bl	8000f9c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d116      	bne.n	80023aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e007      	b.n	80023ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d1ca      	bne.n	800234e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ce:	e02d      	b.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f88d 	bl	80024f0 <I2C_IsAcknowledgeFailed>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e02d      	b.n	800243c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e6:	d021      	beq.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7fe fdd8 	bl	8000f9c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d302      	bcc.n	80023fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d1ca      	bne.n	80023d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002450:	e042      	b.n	80024d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b10      	cmp	r3, #16
 800245e:	d119      	bne.n	8002494 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0210 	mvn.w	r2, #16
 8002468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e029      	b.n	80024e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7fe fd82 	bl	8000f9c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e007      	b.n	80024e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d1b5      	bne.n	8002452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002506:	d11b      	bne.n	8002540 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002510:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b08b      	sub	sp, #44	; 0x2c
 8002550:	af06      	add	r7, sp, #24
 8002552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0fd      	b.n	800275a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f006 f9fe 	bl	8008974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2203      	movs	r2, #3
 800257c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f002 f853 	bl	8004630 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	687e      	ldr	r6, [r7, #4]
 8002592:	466d      	mov	r5, sp
 8002594:	f106 0410 	add.w	r4, r6, #16
 8002598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	602b      	str	r3, [r5, #0]
 80025a0:	1d33      	adds	r3, r6, #4
 80025a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	f002 f81d 	bl	80045e4 <USB_CoreInit>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0ce      	b.n	800275a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 f84e 	bl	8004664 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e04c      	b.n	8002668 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	440b      	add	r3, r1
 80025de:	3301      	adds	r3, #1
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	b298      	uxth	r0, r3
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	3336      	adds	r3, #54	; 0x36
 800260c:	4602      	mov	r2, r0
 800260e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3303      	adds	r3, #3
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	3338      	adds	r3, #56	; 0x38
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	333c      	adds	r3, #60	; 0x3c
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	3340      	adds	r3, #64	; 0x40
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	3301      	adds	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d3ad      	bcc.n	80025ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
 8002676:	e044      	b.n	8002702 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	f203 1369 	addw	r3, r3, #361	; 0x169
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	3301      	adds	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d3b5      	bcc.n	8002678 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	687e      	ldr	r6, [r7, #4]
 8002714:	466d      	mov	r5, sp
 8002716:	f106 0410 	add.w	r4, r6, #16
 800271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	602b      	str	r3, [r5, #0]
 8002722:	1d33      	adds	r3, r6, #4
 8002724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	f001 ffa8 	bl	800467c <USB_DevInit>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00d      	b.n	800275a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 f9c9 	bl	8006aea <USB_DevDisconnect>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002762 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_PCD_Start+0x16>
 8002774:	2302      	movs	r3, #2
 8002776:	e016      	b.n	80027a6 <HAL_PCD_Start+0x44>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f001 ff3d 	bl	8004604 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800278a:	2101      	movs	r1, #1
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f006 fb6c 	bl	8008e6a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f004 f99d 	bl	8006ad6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b088      	sub	sp, #32
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 f99f 	bl	8006afe <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ca:	d102      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fb5f 	bl	8002e90 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 f991 	bl	8006afe <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e6:	d112      	bne.n	800280e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fa:	b292      	uxth	r2, r2
 80027fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f006 f93a 	bl	8008a7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002806:	2100      	movs	r1, #0
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f923 	bl	8002a54 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f004 f973 	bl	8006afe <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002822:	d10b      	bne.n	800283c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002836:	b292      	uxth	r2, r2
 8002838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f004 f95c 	bl	8006afe <USB_ReadInterrupts>
 8002846:	4603      	mov	r3, r0
 8002848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002850:	d10b      	bne.n	800286a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800285a:	b29a      	uxth	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002864:	b292      	uxth	r2, r2
 8002866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f004 f945 	bl	8006afe <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	d126      	bne.n	80028ce <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002888:	b29a      	uxth	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	b292      	uxth	r2, r2
 8002894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0208 	bic.w	r2, r2, #8
 80028aa:	b292      	uxth	r2, r2
 80028ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f006 f91b 	bl	8008aec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028c8:	b292      	uxth	r2, r2
 80028ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 f913 	bl	8006afe <USB_ReadInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e2:	f040 8082 	bne.w	80029ea <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	77fb      	strb	r3, [r7, #31]
 80028ea:	e010      	b.n	800290e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	7ffb      	ldrb	r3, [r7, #31]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	7ffb      	ldrb	r3, [r7, #31]
 80028fa:	8812      	ldrh	r2, [r2, #0]
 80028fc:	b292      	uxth	r2, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	3320      	adds	r3, #32
 8002902:	443b      	add	r3, r7
 8002904:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002908:	7ffb      	ldrb	r3, [r7, #31]
 800290a:	3301      	adds	r3, #1
 800290c:	77fb      	strb	r3, [r7, #31]
 800290e:	7ffb      	ldrb	r3, [r7, #31]
 8002910:	2b07      	cmp	r3, #7
 8002912:	d9eb      	bls.n	80028ec <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800291c:	b29a      	uxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	b292      	uxth	r2, r2
 8002928:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002934:	b29a      	uxth	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0201 	bic.w	r2, r2, #1
 800293e:	b292      	uxth	r2, r2
 8002940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002944:	bf00      	nop
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800294e:	b29b      	uxth	r3, r3
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f6      	beq.n	8002946 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296a:	b292      	uxth	r2, r2
 800296c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002970:	2300      	movs	r3, #0
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e00f      	b.n	8002996 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	4611      	mov	r1, r2
 800297e:	7ffa      	ldrb	r2, [r7, #31]
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	440a      	add	r2, r1
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	3320      	adds	r3, #32
 8002988:	443b      	add	r3, r7
 800298a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800298e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002990:	7ffb      	ldrb	r3, [r7, #31]
 8002992:	3301      	adds	r3, #1
 8002994:	77fb      	strb	r3, [r7, #31]
 8002996:	7ffb      	ldrb	r3, [r7, #31]
 8002998:	2b07      	cmp	r3, #7
 800299a:	d9ec      	bls.n	8002976 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0208 	orr.w	r2, r2, #8
 80029ae:	b292      	uxth	r2, r2
 80029b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029bc:	b29a      	uxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c6:	b292      	uxth	r2, r2
 80029c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0204 	orr.w	r2, r2, #4
 80029de:	b292      	uxth	r2, r2
 80029e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f006 f867 	bl	8008ab8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f004 f885 	bl	8006afe <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fe:	d10e      	bne.n	8002a1e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a12:	b292      	uxth	r2, r2
 8002a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f006 f820 	bl	8008a5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 f86b 	bl	8006afe <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a32:	d10b      	bne.n	8002a4c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a46:	b292      	uxth	r2, r2
 8002a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_PCD_SetAddress+0x1a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e013      	b.n	8002a96 <HAL_PCD_SetAddress+0x42>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 f812 	bl	8006ab0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	4608      	mov	r0, r1
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4603      	mov	r3, r0
 8002aae:	70fb      	strb	r3, [r7, #3]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	803b      	strh	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da0e      	bge.n	8002ae2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	705a      	strb	r2, [r3, #1]
 8002ae0:	e00e      	b.n	8002b00 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	f003 0207 	and.w	r2, r3, #7
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b0c:	883a      	ldrh	r2, [r7, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	78ba      	ldrb	r2, [r7, #2]
 8002b16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b2a:	78bb      	ldrb	r3, [r7, #2]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d102      	bne.n	8002b36 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_PCD_EP_Open+0xa6>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e00e      	b.n	8002b62 <HAL_PCD_EP_Open+0xc4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68f9      	ldr	r1, [r7, #12]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fdb2 	bl	80046bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002b60:	7afb      	ldrb	r3, [r7, #11]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	da0e      	bge.n	8002b9c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	705a      	strb	r2, [r3, #1]
 8002b9a:	e00e      	b.n	8002bba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	f003 0207 	and.w	r2, r3, #7
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_PCD_EP_Close+0x6a>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e00e      	b.n	8002bf2 <HAL_PCD_EP_Close+0x88>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 f8d4 	bl	8004d90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	460b      	mov	r3, r1
 8002c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0a:	7afb      	ldrb	r3, [r7, #11]
 8002c0c:	f003 0207 	and.w	r2, r3, #7
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2200      	movs	r2, #0
 8002c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c46:	7afb      	ldrb	r3, [r7, #11]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6979      	ldr	r1, [r7, #20]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f002 fa86 	bl	8005168 <USB_EPStartXfer>
 8002c5c:	e005      	b.n	8002c6a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6979      	ldr	r1, [r7, #20]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fa7f 	bl	8005168 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 0207 	and.w	r2, r3, #7
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2201      	movs	r2, #1
 8002cec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6979      	ldr	r1, [r7, #20]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 fa2c 	bl	8005168 <USB_EPStartXfer>
 8002d10:	e005      	b.n	8002d1e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6979      	ldr	r1, [r7, #20]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fa25 	bl	8005168 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 0207 	and.w	r2, r3, #7
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d901      	bls.n	8002d46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e04c      	b.n	8002de0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da0e      	bge.n	8002d6c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	705a      	strb	r2, [r3, #1]
 8002d6a:	e00c      	b.n	8002d86 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_EP_SetStall+0x7e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e01c      	b.n	8002de0 <HAL_PCD_EP_SetStall+0xb8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fd7e 	bl	80068b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d108      	bne.n	8002dd6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f003 fea3 	bl	8006b1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d901      	bls.n	8002e06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e040      	b.n	8002e88 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da0e      	bge.n	8002e2c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	705a      	strb	r2, [r3, #1]
 8002e2a:	e00e      	b.n	8002e4a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 0207 	and.w	r2, r3, #7
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_PCD_EP_ClrStall+0x82>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e00e      	b.n	8002e88 <HAL_PCD_EP_ClrStall+0xa0>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fd6c 	bl	8006956 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08e      	sub	sp, #56	; 0x38
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e98:	e2df      	b.n	800345a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ea2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ea4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002eb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 8158 	bne.w	800316a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002eba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d152      	bne.n	8002f6a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	81fb      	strh	r3, [r7, #14]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3328      	adds	r3, #40	; 0x28
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	3302      	adds	r3, #2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	441a      	add	r2, r3
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f28:	2100      	movs	r1, #0
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f005 fd7d 	bl	8008a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 828e 	beq.w	800345a <PCD_EP_ISR_Handler+0x5ca>
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 8289 	bne.w	800345a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f68:	e277      	b.n	800345a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002f7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d034      	beq.n	8002fee <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	3306      	adds	r3, #6
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f003 fdfa 	bl	8006bbc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	823b      	strh	r3, [r7, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	8a3a      	ldrh	r2, [r7, #16]
 8002fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f005 fcf2 	bl	80089d0 <HAL_PCD_SetupStageCallback>
 8002fec:	e235      	b.n	800345a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f280 8231 	bge.w	800345a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003004:	4013      	ands	r3, r2
 8003006:	83bb      	strh	r3, [r7, #28]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	8bba      	ldrh	r2, [r7, #28]
 800300e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003012:	b292      	uxth	r2, r2
 8003014:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	3306      	adds	r3, #6
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d019      	beq.n	800307e <PCD_EP_ISR_Handler+0x1ee>
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d015      	beq.n	800307e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	6959      	ldr	r1, [r3, #20]
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003062:	b29b      	uxth	r3, r3
 8003064:	f003 fdaa 	bl	8006bbc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	441a      	add	r2, r3
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003076:	2100      	movs	r1, #0
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f005 fcbb 	bl	80089f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	4413      	add	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d112      	bne.n	80030cc <PCD_EP_ISR_Handler+0x23c>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e02f      	b.n	800312c <PCD_EP_ISR_Handler+0x29c>
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b3e      	cmp	r3, #62	; 0x3e
 80030d2:	d813      	bhi.n	80030fc <PCD_EP_ISR_Handler+0x26c>
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	633b      	str	r3, [r7, #48]	; 0x30
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <PCD_EP_ISR_Handler+0x25e>
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	3301      	adds	r3, #1
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	029b      	lsls	r3, r3, #10
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	801a      	strh	r2, [r3, #0]
 80030fa:	e017      	b.n	800312c <PCD_EP_ISR_Handler+0x29c>
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <PCD_EP_ISR_Handler+0x286>
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	3b01      	subs	r3, #1
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	b29b      	uxth	r3, r3
 800311a:	029b      	lsls	r3, r3, #10
 800311c:	b29b      	uxth	r3, r3
 800311e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003126:	b29a      	uxth	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313c:	827b      	strh	r3, [r7, #18]
 800313e:	8a7b      	ldrh	r3, [r7, #18]
 8003140:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003144:	827b      	strh	r3, [r7, #18]
 8003146:	8a7b      	ldrh	r3, [r7, #18]
 8003148:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800314c:	827b      	strh	r3, [r7, #18]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	8a7b      	ldrh	r3, [r7, #18]
 8003154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003164:	b29b      	uxth	r3, r3
 8003166:	8013      	strh	r3, [r2, #0]
 8003168:	e177      	b.n	800345a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800317c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003180:	2b00      	cmp	r3, #0
 8003182:	f280 80ea 	bge.w	800335a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29a      	uxth	r2, r3
 8003198:	f640 738f 	movw	r3, #3983	; 0xf8f
 800319c:	4013      	ands	r3, r2
 800319e:	853b      	strh	r3, [r7, #40]	; 0x28
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b4:	b292      	uxth	r2, r2
 80031b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80031b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	7b1b      	ldrb	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d122      	bne.n	800321c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031de:	b29b      	uxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	3306      	adds	r3, #6
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8087 	beq.w	8003316 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	6959      	ldr	r1, [r3, #20]
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	88da      	ldrh	r2, [r3, #6]
 8003214:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003216:	f003 fcd1 	bl	8006bbc <USB_ReadPMA>
 800321a:	e07c      	b.n	8003316 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	78db      	ldrb	r3, [r3, #3]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d108      	bne.n	8003236 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003224:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003226:	461a      	mov	r2, r3
 8003228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f923 	bl	8003476 <HAL_PCD_EP_DB_Receive>
 8003230:	4603      	mov	r3, r0
 8003232:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003234:	e06f      	b.n	8003316 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003250:	847b      	strh	r3, [r7, #34]	; 0x22
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800326a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003272:	b29b      	uxth	r3, r3
 8003274:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d021      	beq.n	80032d4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003298:	b29b      	uxth	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	3302      	adds	r3, #2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80032ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02a      	beq.n	8003316 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	6959      	ldr	r1, [r3, #20]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	891a      	ldrh	r2, [r3, #8]
 80032cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032ce:	f003 fc75 	bl	8006bbc <USB_ReadPMA>
 80032d2:	e020      	b.n	8003316 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032dc:	b29b      	uxth	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	3306      	adds	r3, #6
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80032fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	6959      	ldr	r1, [r3, #20]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	895a      	ldrh	r2, [r3, #10]
 8003310:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003312:	f003 fc53 	bl	8006bbc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800331c:	441a      	add	r2, r3
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003328:	441a      	add	r2, r3
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <PCD_EP_ISR_Handler+0x4b0>
 8003336:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	429a      	cmp	r2, r3
 800333e:	d206      	bcs.n	800334e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f005 fb54 	bl	80089f4 <HAL_PCD_DataOutStageCallback>
 800334c:	e005      	b.n	800335a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003354:	4618      	mov	r0, r3
 8003356:	f001 ff07 	bl	8005168 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800335a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b00      	cmp	r3, #0
 8003362:	d07a      	beq.n	800345a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003364:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003392:	843b      	strh	r3, [r7, #32]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	8c3b      	ldrh	r3, [r7, #32]
 80033a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	78db      	ldrb	r3, [r3, #3]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d108      	bne.n	80033ca <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d146      	bne.n	800344e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80033c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d141      	bne.n	800344e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	3302      	adds	r3, #2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d906      	bls.n	800340c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	8bfb      	ldrh	r3, [r7, #30]
 8003404:	1ad2      	subs	r2, r2, r3
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	619a      	str	r2, [r3, #24]
 800340a:	e002      	b.n	8003412 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f005 fb02 	bl	8008a2a <HAL_PCD_DataInStageCallback>
 8003426:	e018      	b.n	800345a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	8bfb      	ldrh	r3, [r7, #30]
 800342e:	441a      	add	r2, r3
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	8bfb      	ldrh	r3, [r7, #30]
 800343a:	441a      	add	r2, r3
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003446:	4618      	mov	r0, r3
 8003448:	f001 fe8e 	bl	8005168 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800344c:	e005      	b.n	800345a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800344e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003450:	461a      	mov	r2, r3
 8003452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f91b 	bl	8003690 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003462:	b29b      	uxth	r3, r3
 8003464:	b21b      	sxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	f6ff ad17 	blt.w	8002e9a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3738      	adds	r7, #56	; 0x38
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b088      	sub	sp, #32
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	4613      	mov	r3, r2
 8003482:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d07e      	beq.n	800358c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	3302      	adds	r3, #2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	8b7b      	ldrh	r3, [r7, #26]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d306      	bcc.n	80034d0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	8b7b      	ldrh	r3, [r7, #26]
 80034c8:	1ad2      	subs	r2, r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	619a      	str	r2, [r3, #24]
 80034ce:	e002      	b.n	80034d6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d123      	bne.n	8003526 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f8:	833b      	strh	r3, [r7, #24]
 80034fa:	8b3b      	ldrh	r3, [r7, #24]
 80034fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003500:	833b      	strh	r3, [r7, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	441a      	add	r2, r3
 8003510:	8b3b      	ldrh	r3, [r7, #24]
 8003512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003522:	b29b      	uxth	r3, r3
 8003524:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01f      	beq.n	8003570 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	82fb      	strh	r3, [r7, #22]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	441a      	add	r2, r3
 800355a:	8afb      	ldrh	r3, [r7, #22]
 800355c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800356c:	b29b      	uxth	r3, r3
 800356e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003570:	8b7b      	ldrh	r3, [r7, #26]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8087 	beq.w	8003686 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6959      	ldr	r1, [r3, #20]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	891a      	ldrh	r2, [r3, #8]
 8003584:	8b7b      	ldrh	r3, [r7, #26]
 8003586:	f003 fb19 	bl	8006bbc <USB_ReadPMA>
 800358a:	e07c      	b.n	8003686 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	3306      	adds	r3, #6
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	8b7b      	ldrh	r3, [r7, #26]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d306      	bcc.n	80035ce <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	8b7b      	ldrh	r3, [r7, #26]
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	e002      	b.n	80035d4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d123      	bne.n	8003624 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f6:	83fb      	strh	r3, [r7, #30]
 80035f8:	8bfb      	ldrh	r3, [r7, #30]
 80035fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035fe:	83fb      	strh	r3, [r7, #30]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	8bfb      	ldrh	r3, [r7, #30]
 8003610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	b29b      	uxth	r3, r3
 8003622:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11f      	bne.n	800366e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003648:	83bb      	strh	r3, [r7, #28]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	441a      	add	r2, r3
 8003658:	8bbb      	ldrh	r3, [r7, #28]
 800365a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800365e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003666:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800366a:	b29b      	uxth	r3, r3
 800366c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800366e:	8b7b      	ldrh	r3, [r7, #26]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6959      	ldr	r1, [r3, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	895a      	ldrh	r2, [r3, #10]
 8003680:	8b7b      	ldrh	r3, [r7, #26]
 8003682:	f003 fa9b 	bl	8006bbc <USB_ReadPMA>
    }
  }

  return count;
 8003686:	8b7b      	ldrh	r3, [r7, #26]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b094      	sub	sp, #80	; 0x50
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8138 	beq.w	800391a <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	3302      	adds	r3, #2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036de:	429a      	cmp	r2, r3
 80036e0:	d907      	bls.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	619a      	str	r2, [r3, #24]
 80036f0:	e002      	b.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2200      	movs	r2, #0
 80036f6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d12c      	bne.n	800375a <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	4619      	mov	r1, r3
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f005 f98f 	bl	8008a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 823a 	beq.w	8003b8c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	82fb      	strh	r3, [r7, #22]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	8afb      	ldrh	r3, [r7, #22]
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]
 8003758:	e218      	b.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01f      	beq.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800379c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	f040 81ee 	bne.w	8003b8c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037b8:	441a      	add	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037c6:	441a      	add	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d309      	bcc.n	80037ec <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6a1a      	ldr	r2, [r3, #32]
 80037e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e4:	1ad2      	subs	r2, r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	621a      	str	r2, [r3, #32]
 80037ea:	e015      	b.n	8003818 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80037f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037f8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003802:	e009      	b.n	8003818 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2200      	movs	r2, #0
 8003816:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d155      	bne.n	80038cc <HAL_PCD_EP_DB_Transmit+0x23c>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800382e:	b29b      	uxth	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	011a      	lsls	r2, r3, #4
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384a:	2b00      	cmp	r3, #0
 800384c:	d112      	bne.n	8003874 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003858:	b29a      	uxth	r2, r3
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386c:	b29a      	uxth	r2, r3
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	e047      	b.n	8003904 <HAL_PCD_EP_DB_Transmit+0x274>
 8003874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003876:	2b3e      	cmp	r3, #62	; 0x3e
 8003878:	d811      	bhi.n	800389e <HAL_PCD_EP_DB_Transmit+0x20e>
 800387a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_PCD_EP_DB_Transmit+0x200>
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	3301      	adds	r3, #1
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	b29b      	uxth	r3, r3
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	b29a      	uxth	r2, r3
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	801a      	strh	r2, [r3, #0]
 800389c:	e032      	b.n	8003904 <HAL_PCD_EP_DB_Transmit+0x274>
 800389e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_PCD_EP_DB_Transmit+0x224>
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	3b01      	subs	r3, #1
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	029b      	lsls	r3, r3, #10
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	e01b      	b.n	8003904 <HAL_PCD_EP_DB_Transmit+0x274>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d117      	bne.n	8003904 <HAL_PCD_EP_DB_Transmit+0x274>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	4413      	add	r3, r2
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	4413      	add	r3, r2
 80038f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fe:	b29a      	uxth	r2, r3
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	6959      	ldr	r1, [r3, #20]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	891a      	ldrh	r2, [r3, #8]
 8003910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003912:	b29b      	uxth	r3, r3
 8003914:	f003 f90d 	bl	8006b32 <USB_WritePMA>
 8003918:	e138      	b.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003922:	b29b      	uxth	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	3306      	adds	r3, #6
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003942:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800394e:	429a      	cmp	r2, r3
 8003950:	d307      	bcc.n	8003962 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	619a      	str	r2, [r3, #24]
 8003960:	e002      	b.n	8003968 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d12e      	bne.n	80039ce <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f005 f857 	bl	8008a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 8102 	bne.w	8003b8c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8013      	strh	r3, [r2, #0]
 80039cc:	e0de      	b.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11f      	bne.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	867b      	strh	r3, [r7, #50]	; 0x32
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	f040 80b4 	bne.w	8003b8c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a2c:	441a      	add	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d309      	bcc.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6a1a      	ldr	r2, [r3, #32]
 8003a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a58:	1ad2      	subs	r2, r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	621a      	str	r2, [r3, #32]
 8003a5e:	e015      	b.n	8003a8c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8003a68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a76:	e009      	b.n	8003a8c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	643b      	str	r3, [r7, #64]	; 0x40
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	785b      	ldrb	r3, [r3, #1]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d155      	bne.n	8003b46 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	4413      	add	r3, r2
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	011a      	lsls	r2, r3, #4
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	4413      	add	r3, r2
 8003abc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d112      	bne.n	8003aee <HAL_PCD_EP_DB_Transmit+0x45e>
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	801a      	strh	r2, [r3, #0]
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	e044      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af0:	2b3e      	cmp	r3, #62	; 0x3e
 8003af2:	d811      	bhi.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x488>
 8003af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_PCD_EP_DB_Transmit+0x47a>
 8003b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b06:	3301      	adds	r3, #1
 8003b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	029b      	lsls	r3, r3, #10
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e02f      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x49e>
 8003b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	029b      	lsls	r3, r3, #10
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	e018      	b.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d114      	bne.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5c:	4413      	add	r3, r2
 8003b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	011a      	lsls	r2, r3, #4
 8003b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b68:	4413      	add	r3, r2
 8003b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b76:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6959      	ldr	r1, [r3, #20]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	895a      	ldrh	r2, [r3, #10]
 8003b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f002 ffd3 	bl	8006b32 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba6:	82bb      	strh	r3, [r7, #20]
 8003ba8:	8abb      	ldrh	r3, [r7, #20]
 8003baa:	f083 0310 	eor.w	r3, r3, #16
 8003bae:	82bb      	strh	r3, [r7, #20]
 8003bb0:	8abb      	ldrh	r3, [r7, #20]
 8003bb2:	f083 0320 	eor.w	r3, r3, #32
 8003bb6:	82bb      	strh	r3, [r7, #20]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	8abb      	ldrh	r3, [r7, #20]
 8003bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3750      	adds	r7, #80	; 0x50
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b087      	sub	sp, #28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	817b      	strh	r3, [r7, #10]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003bf8:	897b      	ldrh	r3, [r7, #10]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c04:	897b      	ldrh	r3, [r7, #10]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e009      	b.n	8003c30 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c1c:	897a      	ldrh	r2, [r7, #10]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	80da      	strh	r2, [r3, #6]
 8003c44:	e00b      	b.n	8003c5e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	0c1b      	lsrs	r3, r3, #16
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e272      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8087 	beq.w	8003d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c8c:	4b92      	ldr	r3, [pc, #584]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d00c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c98:	4b8f      	ldr	r3, [pc, #572]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d112      	bne.n	8003cca <HAL_RCC_OscConfig+0x5e>
 8003ca4:	4b8c      	ldr	r3, [pc, #560]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d10b      	bne.n	8003cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb2:	4b89      	ldr	r3, [pc, #548]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d06c      	beq.n	8003d98 <HAL_RCC_OscConfig+0x12c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d168      	bne.n	8003d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e24c      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x76>
 8003cd4:	4b80      	ldr	r3, [pc, #512]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a7f      	ldr	r2, [pc, #508]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e02e      	b.n	8003d40 <HAL_RCC_OscConfig+0xd4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_RCC_OscConfig+0x98>
 8003cea:	4b7b      	ldr	r3, [pc, #492]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7a      	ldr	r2, [pc, #488]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b78      	ldr	r3, [pc, #480]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a77      	ldr	r2, [pc, #476]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e01d      	b.n	8003d40 <HAL_RCC_OscConfig+0xd4>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0xbc>
 8003d0e:	4b72      	ldr	r3, [pc, #456]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a71      	ldr	r2, [pc, #452]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6e      	ldr	r2, [pc, #440]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0xd4>
 8003d28:	4b6b      	ldr	r3, [pc, #428]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a6a      	ldr	r2, [pc, #424]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b68      	ldr	r3, [pc, #416]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a67      	ldr	r2, [pc, #412]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fd f928 	bl	8000f9c <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fd f924 	bl	8000f9c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e200      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b5d      	ldr	r3, [pc, #372]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0xe4>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd f914 	bl	8000f9c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fd f910 	bl	8000f9c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1ec      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x10c>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d063      	beq.n	8003e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003da6:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003db2:	4b49      	ldr	r3, [pc, #292]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d11c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x18c>
 8003dbe:	4b46      	ldr	r3, [pc, #280]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	4b43      	ldr	r3, [pc, #268]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_RCC_OscConfig+0x176>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1c0      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4939      	ldr	r1, [pc, #228]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	e03a      	b.n	8003e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e06:	f7fd f8c9 	bl	8000f9c <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7fd f8c5 	bl	8000f9c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1a1      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4927      	ldr	r1, [pc, #156]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]
 8003e40:	e015      	b.n	8003e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd f8a8 	bl	8000f9c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fd f8a4 	bl	8000f9c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e180      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03a      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d019      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e88:	f7fd f888 	bl	8000f9c <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fd f884 	bl	8000f9c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e160      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003eae:	2001      	movs	r0, #1
 8003eb0:	f000 fac4 	bl	800443c <RCC_Delay>
 8003eb4:	e01c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebc:	f7fd f86e 	bl	8000f9c <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec2:	e00f      	b.n	8003ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7fd f86a 	bl	8000f9c <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d908      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e146      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	42420000 	.word	0x42420000
 8003ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	4b92      	ldr	r3, [pc, #584]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e9      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a6 	beq.w	800404a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4a87      	ldr	r2, [pc, #540]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	61d3      	str	r3, [r2, #28]
 8003f1a:	4b85      	ldr	r3, [pc, #532]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f26:	2301      	movs	r3, #1
 8003f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4b82      	ldr	r3, [pc, #520]	; (8004134 <HAL_RCC_OscConfig+0x4c8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d118      	bne.n	8003f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f36:	4b7f      	ldr	r3, [pc, #508]	; (8004134 <HAL_RCC_OscConfig+0x4c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	; (8004134 <HAL_RCC_OscConfig+0x4c8>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f42:	f7fd f82b 	bl	8000f9c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4a:	f7fd f827 	bl	8000f9c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b64      	cmp	r3, #100	; 0x64
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e103      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	4b75      	ldr	r3, [pc, #468]	; (8004134 <HAL_RCC_OscConfig+0x4c8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x312>
 8003f70:	4b6f      	ldr	r3, [pc, #444]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4a6e      	ldr	r2, [pc, #440]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6213      	str	r3, [r2, #32]
 8003f7c:	e02d      	b.n	8003fda <HAL_RCC_OscConfig+0x36e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x334>
 8003f86:	4b6a      	ldr	r3, [pc, #424]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a69      	ldr	r2, [pc, #420]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6213      	str	r3, [r2, #32]
 8003f92:	4b67      	ldr	r3, [pc, #412]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a66      	ldr	r2, [pc, #408]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6213      	str	r3, [r2, #32]
 8003f9e:	e01c      	b.n	8003fda <HAL_RCC_OscConfig+0x36e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x356>
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4a60      	ldr	r2, [pc, #384]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	f043 0304 	orr.w	r3, r3, #4
 8003fb2:	6213      	str	r3, [r2, #32]
 8003fb4:	4b5e      	ldr	r3, [pc, #376]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	4a5d      	ldr	r2, [pc, #372]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6213      	str	r3, [r2, #32]
 8003fc0:	e00b      	b.n	8003fda <HAL_RCC_OscConfig+0x36e>
 8003fc2:	4b5b      	ldr	r3, [pc, #364]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4a5a      	ldr	r2, [pc, #360]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6213      	str	r3, [r2, #32]
 8003fce:	4b58      	ldr	r3, [pc, #352]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4a57      	ldr	r2, [pc, #348]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d015      	beq.n	800400e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe2:	f7fc ffdb 	bl	8000f9c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fc ffd7 	bl	8000f9c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e0b1      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	4b4b      	ldr	r3, [pc, #300]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ee      	beq.n	8003fea <HAL_RCC_OscConfig+0x37e>
 800400c:	e014      	b.n	8004038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400e:	f7fc ffc5 	bl	8000f9c <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004014:	e00a      	b.n	800402c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fc ffc1 	bl	8000f9c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	; 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e09b      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402c:	4b40      	ldr	r3, [pc, #256]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ee      	bne.n	8004016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403e:	4b3c      	ldr	r3, [pc, #240]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	4a3b      	ldr	r2, [pc, #236]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8087 	beq.w	8004162 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004054:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d061      	beq.n	8004124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d146      	bne.n	80040f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b33      	ldr	r3, [pc, #204]	; (8004138 <HAL_RCC_OscConfig+0x4cc>)
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fc ff95 	bl	8000f9c <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004076:	f7fc ff91 	bl	8000f9c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e06d      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004088:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d108      	bne.n	80040b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4921      	ldr	r1, [pc, #132]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b0:	4b1f      	ldr	r3, [pc, #124]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a19      	ldr	r1, [r3, #32]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	430b      	orrs	r3, r1
 80040c2:	491b      	ldr	r1, [pc, #108]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fc ff65 	bl	8000f9c <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fc ff61 	bl	8000f9c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e03d      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x46a>
 80040f4:	e035      	b.n	8004162 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_RCC_OscConfig+0x4cc>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fc ff4e 	bl	8000f9c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fc ff4a 	bl	8000f9c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e026      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x498>
 8004122:	e01e      	b.n	8004162 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e019      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
 8004138:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_OscConfig+0x500>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	429a      	cmp	r2, r3
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d001      	beq.n	8004162 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000

08004170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0d0      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d910      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	4965      	ldr	r1, [pc, #404]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b63      	ldr	r3, [pc, #396]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0b8      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041cc:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a58      	ldr	r2, [pc, #352]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e4:	4b53      	ldr	r3, [pc, #332]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a52      	ldr	r2, [pc, #328]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b50      	ldr	r3, [pc, #320]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	494d      	ldr	r1, [pc, #308]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d040      	beq.n	8004290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d115      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e07f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422e:	4b41      	ldr	r3, [pc, #260]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e073      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423e:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e06b      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424e:	4b39      	ldr	r3, [pc, #228]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f023 0203 	bic.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4936      	ldr	r1, [pc, #216]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004260:	f7fc fe9c 	bl	8000f9c <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004266:	e00a      	b.n	800427e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004268:	f7fc fe98 	bl	8000f9c <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e053      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 020c 	and.w	r2, r3, #12
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	429a      	cmp	r2, r3
 800428e:	d1eb      	bne.n	8004268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004290:	4b27      	ldr	r3, [pc, #156]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d210      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 0207 	bic.w	r2, r3, #7
 80042a6:	4922      	ldr	r1, [pc, #136]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b20      	ldr	r3, [pc, #128]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e032      	b.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4916      	ldr	r1, [pc, #88]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	490e      	ldr	r1, [pc, #56]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042fe:	f000 f821 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8004302:	4602      	mov	r2, r0
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	490a      	ldr	r1, [pc, #40]	; (8004338 <HAL_RCC_ClockConfig+0x1c8>)
 8004310:	5ccb      	ldrb	r3, [r1, r3]
 8004312:	fa22 f303 	lsr.w	r3, r2, r3
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1cc>)
 8004318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCC_ClockConfig+0x1d0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc fdfa 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40022000 	.word	0x40022000
 8004334:	40021000 	.word	0x40021000
 8004338:	08008fa0 	.word	0x08008fa0
 800433c:	2000002c 	.word	0x2000002c
 8004340:	20000030 	.word	0x20000030

08004344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	b490      	push	{r4, r7}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800434a:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800434c:	1d3c      	adds	r4, r7, #4
 800434e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004354:	f240 2301 	movw	r3, #513	; 0x201
 8004358:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800436e:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d002      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x40>
 800437e:	2b08      	cmp	r3, #8
 8004380:	d003      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x46>
 8004382:	e02b      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004386:	623b      	str	r3, [r7, #32]
      break;
 8004388:	e02b      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	0c9b      	lsrs	r3, r3, #18
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	3328      	adds	r3, #40	; 0x28
 8004394:	443b      	add	r3, r7
 8004396:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800439a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d012      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	0c5b      	lsrs	r3, r3, #17
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	3328      	adds	r3, #40	; 0x28
 80043b2:	443b      	add	r3, r7
 80043b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043be:	fb03 f202 	mul.w	r2, r3, r2
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ca:	e004      	b.n	80043d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	623b      	str	r3, [r7, #32]
      break;
 80043da:	e002      	b.n	80043e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043de:	623b      	str	r3, [r7, #32]
      break;
 80043e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e2:	6a3b      	ldr	r3, [r7, #32]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc90      	pop	{r4, r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	08008f48 	.word	0x08008f48
 80043f4:	40021000 	.word	0x40021000
 80043f8:	007a1200 	.word	0x007a1200
 80043fc:	003d0900 	.word	0x003d0900

08004400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b02      	ldr	r3, [pc, #8]	; (8004410 <HAL_RCC_GetHCLKFreq+0x10>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	2000002c 	.word	0x2000002c

08004414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004418:	f7ff fff2 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4903      	ldr	r1, [pc, #12]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	08008fb0 	.word	0x08008fb0

0800443c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004444:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <RCC_Delay+0x34>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <RCC_Delay+0x38>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0a5b      	lsrs	r3, r3, #9
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004458:	bf00      	nop
  }
  while (Delay --);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	60fa      	str	r2, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f9      	bne.n	8004458 <RCC_Delay+0x1c>
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	2000002c 	.word	0x2000002c
 8004474:	10624dd3 	.word	0x10624dd3

08004478 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d07d      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004494:	2300      	movs	r3, #0
 8004496:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004498:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10d      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b4c      	ldr	r3, [pc, #304]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4a4b      	ldr	r2, [pc, #300]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	61d3      	str	r3, [r2, #28]
 80044b0:	4b49      	ldr	r3, [pc, #292]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044bc:	2301      	movs	r3, #1
 80044be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	4b46      	ldr	r3, [pc, #280]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d118      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044cc:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a42      	ldr	r2, [pc, #264]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d8:	f7fc fd60 	bl	8000f9c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	e008      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e0:	f7fc fd5c 	bl	8000f9c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e06d      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f2:	4b3a      	ldr	r3, [pc, #232]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004506:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02e      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	429a      	cmp	r2, r3
 800451a:	d027      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451c:	4b2e      	ldr	r3, [pc, #184]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004526:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800452c:	4b2c      	ldr	r3, [pc, #176]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004532:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d014      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fc fd2b 	bl	8000f9c <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fc fd27 	bl	8000f9c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e036      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ee      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4917      	ldr	r1, [pc, #92]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	4313      	orrs	r3, r2
 800457c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d105      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800458e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800459c:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	490b      	ldr	r1, [pc, #44]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ba:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4904      	ldr	r1, [pc, #16]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
 80045e0:	42420440 	.word	0x42420440

080045e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045e4:	b084      	sub	sp, #16
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	f107 0014 	add.w	r0, r7, #20
 80045f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	b004      	add	sp, #16
 8004602:	4770      	bx	lr

08004604 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004614:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004618:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004638:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800463c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	b29b      	uxth	r3, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	b29b      	uxth	r3, r3
 800464e:	4013      	ands	r3, r2
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800467c:	b084      	sub	sp, #16
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	f107 0014 	add.w	r0, r7, #20
 800468a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	b004      	add	sp, #16
 80046ba:	4770      	bx	lr

080046bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046bc:	b480      	push	{r7}
 80046be:	b09b      	sub	sp, #108	; 0x6c
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	78db      	ldrb	r3, [r3, #3]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d81f      	bhi.n	800472e <USB_ActivateEndpoint+0x72>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <USB_ActivateEndpoint+0x38>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004705 	.word	0x08004705
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004737 	.word	0x08004737
 8004700:	08004713 	.word	0x08004713
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004704:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800470c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004710:	e012      	b.n	8004738 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004712:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004716:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800471a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800471e:	e00b      	b.n	8004738 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004720:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004728:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800472c:	e004      	b.n	8004738 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004734:	e000      	b.n	8004738 <USB_ActivateEndpoint+0x7c>
      break;
 8004736:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	b29a      	uxth	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	4313      	orrs	r3, r2
 800477a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800478c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479c:	b29b      	uxth	r3, r3
 800479e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	7b1b      	ldrb	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f040 8149 	bne.w	8004a3c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8084 	beq.w	80048bc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047be:	b29b      	uxth	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4413      	add	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	011a      	lsls	r2, r3, #4
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	88db      	ldrh	r3, [r3, #6]
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	81fb      	strh	r3, [r7, #14]
 80047f6:	89fb      	ldrh	r3, [r7, #14]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <USB_ActivateEndpoint+0x17c>
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	81bb      	strh	r3, [r7, #12]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	89bb      	ldrh	r3, [r7, #12]
 8004824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004834:	b29b      	uxth	r3, r3
 8004836:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	78db      	ldrb	r3, [r3, #3]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d020      	beq.n	8004882 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004856:	813b      	strh	r3, [r7, #8]
 8004858:	893b      	ldrh	r3, [r7, #8]
 800485a:	f083 0320 	eor.w	r3, r3, #32
 800485e:	813b      	strh	r3, [r7, #8]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	893b      	ldrh	r3, [r7, #8]
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]
 8004880:	e27f      	b.n	8004d82 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004898:	817b      	strh	r3, [r7, #10]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	441a      	add	r2, r3
 80048a4:	897b      	ldrh	r3, [r7, #10]
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]
 80048ba:	e262      	b.n	8004d82 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	4413      	add	r3, r2
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	011a      	lsls	r2, r3, #4
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	88db      	ldrh	r3, [r3, #6]
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	4413      	add	r3, r2
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	011a      	lsls	r2, r3, #4
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	4413      	add	r3, r2
 800490e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d112      	bne.n	8004942 <USB_ActivateEndpoint+0x286>
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004926:	b29a      	uxth	r2, r3
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493a:	b29a      	uxth	r2, r3
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	801a      	strh	r2, [r3, #0]
 8004940:	e02f      	b.n	80049a2 <USB_ActivateEndpoint+0x2e6>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b3e      	cmp	r3, #62	; 0x3e
 8004948:	d813      	bhi.n	8004972 <USB_ActivateEndpoint+0x2b6>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	663b      	str	r3, [r7, #96]	; 0x60
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <USB_ActivateEndpoint+0x2a8>
 800495e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004960:	3301      	adds	r3, #1
 8004962:	663b      	str	r3, [r7, #96]	; 0x60
 8004964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004966:	b29b      	uxth	r3, r3
 8004968:	029b      	lsls	r3, r3, #10
 800496a:	b29a      	uxth	r2, r3
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	e017      	b.n	80049a2 <USB_ActivateEndpoint+0x2e6>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	663b      	str	r3, [r7, #96]	; 0x60
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <USB_ActivateEndpoint+0x2d0>
 8004986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004988:	3b01      	subs	r3, #1
 800498a:	663b      	str	r3, [r7, #96]	; 0x60
 800498c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800498e:	b29b      	uxth	r3, r3
 8004990:	029b      	lsls	r3, r3, #10
 8004992:	b29b      	uxth	r3, r3
 8004994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499c:	b29a      	uxth	r2, r3
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	83fb      	strh	r3, [r7, #30]
 80049b0:	8bfb      	ldrh	r3, [r7, #30]
 80049b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01b      	beq.n	80049f2 <USB_ActivateEndpoint+0x336>
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	83bb      	strh	r3, [r7, #28]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	8bbb      	ldrh	r3, [r7, #28]
 80049de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	837b      	strh	r3, [r7, #26]
 8004a0a:	8b7b      	ldrh	r3, [r7, #26]
 8004a0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a10:	837b      	strh	r3, [r7, #26]
 8004a12:	8b7b      	ldrh	r3, [r7, #26]
 8004a14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a18:	837b      	strh	r3, [r7, #26]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8b7b      	ldrh	r3, [r7, #26]
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]
 8004a3a:	e1a2      	b.n	8004d82 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	441a      	add	r2, r3
 8004a60:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a88:	4413      	add	r3, r2
 8004a8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	011a      	lsls	r2, r3, #4
 8004a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	891b      	ldrh	r3, [r3, #8]
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aaa:	801a      	strh	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004abc:	4413      	add	r3, r2
 8004abe:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	895b      	ldrh	r3, [r3, #10]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ade:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 8091 	bne.w	8004c0c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004af8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01b      	beq.n	8004b3a <USB_ActivateEndpoint+0x47e>
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b18:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01b      	beq.n	8004b8a <USB_ActivateEndpoint+0x4ce>
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ba2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ba4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ba8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004baa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bb0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be8:	867b      	strh	r3, [r7, #50]	; 0x32
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]
 8004c0a:	e0ba      	b.n	8004d82 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01d      	beq.n	8004c64 <USB_ActivateEndpoint+0x5a8>
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01d      	beq.n	8004cbc <USB_ActivateEndpoint+0x600>
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	441a      	add	r2, r3
 8004ca4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	78db      	ldrb	r3, [r3, #3]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d024      	beq.n	8004d0e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004cde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ce2:	f083 0320 	eor.w	r3, r3, #32
 8004ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	441a      	add	r2, r3
 8004cf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
 8004d0c:	e01d      	b.n	8004d4a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	441a      	add	r2, r3
 8004d6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	376c      	adds	r7, #108	; 0x6c
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b08d      	sub	sp, #52	; 0x34
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	7b1b      	ldrb	r3, [r3, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 808e 	bne.w	8004ec0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d044      	beq.n	8004e36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	81bb      	strh	r3, [r7, #12]
 8004dba:	89bb      	ldrh	r3, [r7, #12]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01b      	beq.n	8004dfc <USB_DeactivateEndpoint+0x6c>
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	817b      	strh	r3, [r7, #10]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	897b      	ldrh	r3, [r7, #10]
 8004de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e12:	813b      	strh	r3, [r7, #8]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	893b      	ldrh	r3, [r7, #8]
 8004e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	8013      	strh	r3, [r2, #0]
 8004e34:	e192      	b.n	800515c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	827b      	strh	r3, [r7, #18]
 8004e44:	8a7b      	ldrh	r3, [r7, #18]
 8004e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01b      	beq.n	8004e86 <USB_DeactivateEndpoint+0xf6>
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e64:	823b      	strh	r3, [r7, #16]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	8a3b      	ldrh	r3, [r7, #16]
 8004e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9c:	81fb      	strh	r3, [r7, #14]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	441a      	add	r2, r3
 8004ea8:	89fb      	ldrh	r3, [r7, #14]
 8004eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	8013      	strh	r3, [r2, #0]
 8004ebe:	e14d      	b.n	800515c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f040 80a5 	bne.w	8005014 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	843b      	strh	r3, [r7, #32]
 8004ed8:	8c3b      	ldrh	r3, [r7, #32]
 8004eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01b      	beq.n	8004f1a <USB_DeactivateEndpoint+0x18a>
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef8:	83fb      	strh	r3, [r7, #30]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	8bfb      	ldrh	r3, [r7, #30]
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	83bb      	strh	r3, [r7, #28]
 8004f28:	8bbb      	ldrh	r3, [r7, #28]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01b      	beq.n	8004f6a <USB_DeactivateEndpoint+0x1da>
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f48:	837b      	strh	r3, [r7, #26]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	8b7b      	ldrh	r3, [r7, #26]
 8004f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	833b      	strh	r3, [r7, #24]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	441a      	add	r2, r3
 8004f8c:	8b3b      	ldrh	r3, [r7, #24]
 8004f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	82fb      	strh	r3, [r7, #22]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	8afb      	ldrh	r3, [r7, #22]
 8004fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff0:	82bb      	strh	r3, [r7, #20]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	8abb      	ldrh	r3, [r7, #20]
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]
 8005012:	e0a3      	b.n	800515c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01b      	beq.n	8005064 <USB_DeactivateEndpoint+0x2d4>
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800505c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005072:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01b      	beq.n	80050b4 <USB_DeactivateEndpoint+0x324>
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	853b      	strh	r3, [r7, #40]	; 0x28
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005102:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	441a      	add	r2, r3
 800510e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005120:	b29b      	uxth	r3, r3
 8005122:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	847b      	strh	r3, [r7, #34]	; 0x22
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005158:	b29b      	uxth	r3, r3
 800515a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3734      	adds	r7, #52	; 0x34
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b0c4      	sub	sp, #272	; 0x110
 800516c:	af00      	add	r7, sp, #0
 800516e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005172:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005176:	6018      	str	r0, [r3, #0]
 8005178:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800517c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005180:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005182:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005186:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	2b01      	cmp	r3, #1
 8005190:	f040 86ec 	bne.w	8005f6c <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005194:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005198:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d908      	bls.n	80051c2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80051b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051c0:	e007      	b.n	80051d2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80051c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	7b1b      	ldrb	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d142      	bne.n	8005268 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6959      	ldr	r1, [r3, #20]
 80051ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	88da      	ldrh	r2, [r3, #6]
 80051fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005204:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005208:	6800      	ldr	r0, [r0, #0]
 800520a:	f001 fc92 	bl	8006b32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800520e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005212:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800521e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005228:	b29b      	uxth	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4413      	add	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005236:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	011a      	lsls	r2, r3, #4
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	4413      	add	r3, r2
 8005244:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005248:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800524c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005256:	b29a      	uxth	r2, r3
 8005258:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800525c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	f000 be34 	b.w	8005ed0 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800526c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	78db      	ldrb	r3, [r3, #3]
 8005274:	2b02      	cmp	r3, #2
 8005276:	f040 843b 	bne.w	8005af0 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800527a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800527e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6a1a      	ldr	r2, [r3, #32]
 8005286:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800528a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	429a      	cmp	r2, r3
 8005294:	f240 83b8 	bls.w	8005a08 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005298:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800529c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80052c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	441a      	add	r2, r3
 80052dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80052e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80052f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6a1a      	ldr	r2, [r3, #32]
 8005300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005304:	1ad2      	subs	r2, r2, r3
 8005306:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800530a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005316:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005320:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 81b4 	beq.w	80056a2 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800533a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800533e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
 8005346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800534a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d16d      	bne.n	8005432 <USB_EPStartXfer+0x2ca>
 8005356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800535a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005362:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005366:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005370:	b29b      	uxth	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	4413      	add	r3, r2
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800537e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	011a      	lsls	r2, r3, #4
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	4413      	add	r3, r2
 800538c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
 8005392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d112      	bne.n	80053c0 <USB_EPStartXfer+0x258>
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	e05d      	b.n	800547c <USB_EPStartXfer+0x314>
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c4:	2b3e      	cmp	r3, #62	; 0x3e
 80053c6:	d817      	bhi.n	80053f8 <USB_EPStartXfer+0x290>
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <USB_EPStartXfer+0x280>
 80053de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e2:	3301      	adds	r3, #1
 80053e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	e041      	b.n	800547c <USB_EPStartXfer+0x314>
 80053f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <USB_EPStartXfer+0x2b0>
 800540e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005412:	3b01      	subs	r3, #1
 8005414:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541c:	b29b      	uxth	r3, r3
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	b29b      	uxth	r3, r3
 8005422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542a:	b29a      	uxth	r2, r3
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	e024      	b.n	800547c <USB_EPStartXfer+0x314>
 8005432:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005436:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d11c      	bne.n	800547c <USB_EPStartXfer+0x314>
 8005442:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005450:	b29b      	uxth	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	4413      	add	r3, r2
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
 800545a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800545e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	011a      	lsls	r2, r3, #4
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	4413      	add	r3, r2
 800546c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
 8005472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005476:	b29a      	uxth	r2, r3
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800547c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005480:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	895b      	ldrh	r3, [r3, #10]
 8005488:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800548c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005490:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6959      	ldr	r1, [r3, #20]
 8005498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549c:	b29b      	uxth	r3, r3
 800549e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80054a2:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80054a6:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	f001 fb41 	bl	8006b32 <USB_WritePMA>
            ep->xfer_buff += len;
 80054b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c0:	441a      	add	r2, r3
 80054c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d90f      	bls.n	800550a <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 80054ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005500:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	621a      	str	r2, [r3, #32]
 8005508:	e00e      	b.n	8005528 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 800550a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800550e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800551a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800551e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2200      	movs	r2, #0
 8005526:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005528:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800552c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d16d      	bne.n	8005614 <USB_EPStartXfer+0x4ac>
 8005538:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800553c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005548:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005552:	b29b      	uxth	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005560:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	011a      	lsls	r2, r3, #4
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d112      	bne.n	80055a2 <USB_EPStartXfer+0x43a>
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005586:	b29a      	uxth	r2, r3
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	801a      	strh	r2, [r3, #0]
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559a:	b29a      	uxth	r2, r3
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	801a      	strh	r2, [r3, #0]
 80055a0:	e063      	b.n	800566a <USB_EPStartXfer+0x502>
 80055a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a6:	2b3e      	cmp	r3, #62	; 0x3e
 80055a8:	d817      	bhi.n	80055da <USB_EPStartXfer+0x472>
 80055aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <USB_EPStartXfer+0x462>
 80055c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055c4:	3301      	adds	r3, #1
 80055c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	029b      	lsls	r3, r3, #10
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	801a      	strh	r2, [r3, #0]
 80055d8:	e047      	b.n	800566a <USB_EPStartXfer+0x502>
 80055da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d104      	bne.n	80055fa <USB_EPStartXfer+0x492>
 80055f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055f4:	3b01      	subs	r3, #1
 80055f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80055fe:	b29b      	uxth	r3, r3
 8005600:	029b      	lsls	r3, r3, #10
 8005602:	b29b      	uxth	r3, r3
 8005604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800560c:	b29a      	uxth	r2, r3
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	e02a      	b.n	800566a <USB_EPStartXfer+0x502>
 8005614:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005618:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d122      	bne.n	800566a <USB_EPStartXfer+0x502>
 8005624:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005628:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
 8005630:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005634:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563e:	b29b      	uxth	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	4413      	add	r3, r2
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
 8005648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800564c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	011a      	lsls	r2, r3, #4
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	4413      	add	r3, r2
 800565a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800565e:	623b      	str	r3, [r7, #32]
 8005660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005664:	b29a      	uxth	r2, r3
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800566a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800566e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	891b      	ldrh	r3, [r3, #8]
 8005676:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800567a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800567e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6959      	ldr	r1, [r3, #20]
 8005686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568a:	b29b      	uxth	r3, r3
 800568c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005690:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005694:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005698:	6800      	ldr	r0, [r0, #0]
 800569a:	f001 fa4a 	bl	8006b32 <USB_WritePMA>
 800569e:	f000 bc17 	b.w	8005ed0 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d16d      	bne.n	800578e <USB_EPStartXfer+0x626>
 80056b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d2:	4413      	add	r3, r2
 80056d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	011a      	lsls	r2, r3, #4
 80056e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e6:	4413      	add	r3, r2
 80056e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d112      	bne.n	800571c <USB_EPStartXfer+0x5b4>
 80056f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005700:	b29a      	uxth	r2, r3
 8005702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005714:	b29a      	uxth	r2, r3
 8005716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e063      	b.n	80057e4 <USB_EPStartXfer+0x67c>
 800571c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005720:	2b3e      	cmp	r3, #62	; 0x3e
 8005722:	d817      	bhi.n	8005754 <USB_EPStartXfer+0x5ec>
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800572e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <USB_EPStartXfer+0x5dc>
 800573a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800573e:	3301      	adds	r3, #1
 8005740:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005748:	b29b      	uxth	r3, r3
 800574a:	029b      	lsls	r3, r3, #10
 800574c:	b29a      	uxth	r2, r3
 800574e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	e047      	b.n	80057e4 <USB_EPStartXfer+0x67c>
 8005754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800575e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <USB_EPStartXfer+0x60c>
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800576e:	3b01      	subs	r3, #1
 8005770:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	e02a      	b.n	80057e4 <USB_EPStartXfer+0x67c>
 800578e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005792:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d122      	bne.n	80057e4 <USB_EPStartXfer+0x67c>
 800579e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	657b      	str	r3, [r7, #84]	; 0x54
 80057aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057be:	4413      	add	r3, r2
 80057c0:	657b      	str	r3, [r7, #84]	; 0x54
 80057c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	011a      	lsls	r2, r3, #4
 80057d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
 80057da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057de:	b29a      	uxth	r2, r3
 80057e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	891b      	ldrh	r3, [r3, #8]
 80057f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6959      	ldr	r1, [r3, #20]
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005804:	b29b      	uxth	r3, r3
 8005806:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800580a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800580e:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005812:	6800      	ldr	r0, [r0, #0]
 8005814:	f001 f98d 	bl	8006b32 <USB_WritePMA>
            ep->xfer_buff += len;
 8005818:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800581c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005828:	441a      	add	r2, r3
 800582a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800582e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800583a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005846:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	429a      	cmp	r2, r3
 8005850:	d90f      	bls.n	8005872 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8005852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005856:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005868:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	621a      	str	r2, [r3, #32]
 8005870:	e00e      	b.n	8005890 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8005872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005876:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005886:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2200      	movs	r2, #0
 800588e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005890:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005894:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	647b      	str	r3, [r7, #68]	; 0x44
 800589c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d16d      	bne.n	8005988 <USB_EPStartXfer+0x820>
 80058ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058cc:	4413      	add	r3, r2
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	011a      	lsls	r2, r3, #4
 80058de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e0:	4413      	add	r3, r2
 80058e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d112      	bne.n	8005916 <USB_EPStartXfer+0x7ae>
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29a      	uxth	r2, r3
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	e05d      	b.n	80059d2 <USB_EPStartXfer+0x86a>
 8005916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591a:	2b3e      	cmp	r3, #62	; 0x3e
 800591c:	d817      	bhi.n	800594e <USB_EPStartXfer+0x7e6>
 800591e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <USB_EPStartXfer+0x7d6>
 8005934:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005938:	3301      	adds	r3, #1
 800593a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800593e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005942:	b29b      	uxth	r3, r3
 8005944:	029b      	lsls	r3, r3, #10
 8005946:	b29a      	uxth	r2, r3
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	e041      	b.n	80059d2 <USB_EPStartXfer+0x86a>
 800594e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	2b00      	cmp	r3, #0
 8005962:	d104      	bne.n	800596e <USB_EPStartXfer+0x806>
 8005964:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005968:	3b01      	subs	r3, #1
 800596a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800596e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005972:	b29b      	uxth	r3, r3
 8005974:	029b      	lsls	r3, r3, #10
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005980:	b29a      	uxth	r2, r3
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e024      	b.n	80059d2 <USB_EPStartXfer+0x86a>
 8005988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800598c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d11c      	bne.n	80059d2 <USB_EPStartXfer+0x86a>
 8005998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800599c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ac:	4413      	add	r3, r2
 80059ae:	647b      	str	r3, [r7, #68]	; 0x44
 80059b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	011a      	lsls	r2, r3, #4
 80059be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c0:	4413      	add	r3, r2
 80059c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c6:	643b      	str	r3, [r7, #64]	; 0x40
 80059c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	895b      	ldrh	r3, [r3, #10]
 80059de:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6959      	ldr	r1, [r3, #20]
 80059ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80059f8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80059fc:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005a00:	6800      	ldr	r0, [r0, #0]
 8005a02:	f001 f896 	bl	8006b32 <USB_WritePMA>
 8005a06:	e263      	b.n	8005ed0 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005a18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a94:	4413      	add	r3, r2
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
 8005a98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	011a      	lsls	r2, r3, #4
 8005aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005abe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	891b      	ldrh	r3, [r3, #8]
 8005ac6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ace:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6959      	ldr	r1, [r3, #20]
 8005ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ae0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005ae4:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005ae8:	6800      	ldr	r0, [r0, #0]
 8005aea:	f001 f822 	bl	8006b32 <USB_WritePMA>
 8005aee:	e1ef      	b.n	8005ed0 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005af0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005af4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005afe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80aa 	beq.w	8005c6c <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d16d      	bne.n	8005c10 <USB_EPStartXfer+0xaa8>
 8005b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b54:	4413      	add	r3, r2
 8005b56:	673b      	str	r3, [r7, #112]	; 0x70
 8005b58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	011a      	lsls	r2, r3, #4
 8005b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b68:	4413      	add	r3, r2
 8005b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d112      	bne.n	8005b9e <USB_EPStartXfer+0xa36>
 8005b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	e05d      	b.n	8005c5a <USB_EPStartXfer+0xaf2>
 8005b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba4:	d817      	bhi.n	8005bd6 <USB_EPStartXfer+0xa6e>
 8005ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <USB_EPStartXfer+0xa5e>
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	e041      	b.n	8005c5a <USB_EPStartXfer+0xaf2>
 8005bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <USB_EPStartXfer+0xa8e>
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e024      	b.n	8005c5a <USB_EPStartXfer+0xaf2>
 8005c10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d11c      	bne.n	8005c5a <USB_EPStartXfer+0xaf2>
 8005c20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c34:	4413      	add	r3, r2
 8005c36:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	011a      	lsls	r2, r3, #4
 8005c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c48:	4413      	add	r3, r2
 8005c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c4e:	677b      	str	r3, [r7, #116]	; 0x74
 8005c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	895b      	ldrh	r3, [r3, #10]
 8005c66:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005c6a:	e0b2      	b.n	8005dd2 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d171      	bne.n	8005d60 <USB_EPStartXfer+0xbf8>
 8005c7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005caa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	011a      	lsls	r2, r3, #4
 8005cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d112      	bne.n	8005cee <USB_EPStartXfer+0xb86>
 8005cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	e069      	b.n	8005dc2 <USB_EPStartXfer+0xc5a>
 8005cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cf4:	d817      	bhi.n	8005d26 <USB_EPStartXfer+0xbbe>
 8005cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <USB_EPStartXfer+0xbae>
 8005d0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d10:	3301      	adds	r3, #1
 8005d12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	029b      	lsls	r3, r3, #10
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d22:	801a      	strh	r2, [r3, #0]
 8005d24:	e04d      	b.n	8005dc2 <USB_EPStartXfer+0xc5a>
 8005d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <USB_EPStartXfer+0xbde>
 8005d3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d40:	3b01      	subs	r3, #1
 8005d42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	029b      	lsls	r3, r3, #10
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e030      	b.n	8005dc2 <USB_EPStartXfer+0xc5a>
 8005d60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d128      	bne.n	8005dc2 <USB_EPStartXfer+0xc5a>
 8005d70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d94:	4413      	add	r3, r2
 8005d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	011a      	lsls	r2, r3, #4
 8005da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dac:	4413      	add	r3, r2
 8005dae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005db2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	891b      	ldrh	r3, [r3, #8]
 8005dce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6959      	ldr	r1, [r3, #20]
 8005dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005de8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005dec:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8005df0:	6800      	ldr	r0, [r0, #0]
 8005df2:	f000 fe9e 	bl	8006b32 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dfa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	785b      	ldrb	r3, [r3, #1]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d12e      	bne.n	8005e64 <USB_EPStartXfer+0xcfc>
 8005e06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005e30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	441a      	add	r2, r3
 8005e4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	8013      	strh	r3, [r2, #0]
 8005e62:	e035      	b.n	8005ed0 <USB_EPStartXfer+0xd68>
 8005e64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d12d      	bne.n	8005ed0 <USB_EPStartXfer+0xd68>
 8005e74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005e9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ea2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	441a      	add	r2, r3
 8005eb8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ed0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ed4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ede:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005ef2:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efe:	8013      	strh	r3, [r2, #0]
 8005f00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f04:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8005f08:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005f0c:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 8005f10:	8812      	ldrh	r2, [r2, #0]
 8005f12:	f082 0210 	eor.w	r2, r2, #16
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f1c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8005f20:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005f24:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 8005f28:	8812      	ldrh	r2, [r2, #0]
 8005f2a:	f082 0220 	eor.w	r2, r2, #32
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f4e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	8013      	strh	r3, [r2, #0]
 8005f68:	f000 bc9f 	b.w	80068aa <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	7b1b      	ldrb	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f040 80ae 	bne.w	80060da <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d917      	bls.n	8005fca <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 8005f9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005faa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	619a      	str	r2, [r3, #24]
 8005fc8:	e00e      	b.n	8005fe8 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 8005fca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005fda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fe8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ff6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ffa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006004:	b29b      	uxth	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800600c:	4413      	add	r3, r2
 800600e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006016:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	011a      	lsls	r2, r3, #4
 8006020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006024:	4413      	add	r3, r2
 8006026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800602a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800602e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d116      	bne.n	8006064 <USB_EPStartXfer+0xefc>
 8006036:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006042:	b29a      	uxth	r2, r3
 8006044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605a:	b29a      	uxth	r2, r3
 800605c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e3e8      	b.n	8006836 <USB_EPStartXfer+0x16ce>
 8006064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006068:	2b3e      	cmp	r3, #62	; 0x3e
 800606a:	d818      	bhi.n	800609e <USB_EPStartXfer+0xf36>
 800606c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006070:	085b      	lsrs	r3, r3, #1
 8006072:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <USB_EPStartXfer+0xf24>
 8006082:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006086:	3301      	adds	r3, #1
 8006088:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800608c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006090:	b29b      	uxth	r3, r3
 8006092:	029b      	lsls	r3, r3, #10
 8006094:	b29a      	uxth	r2, r3
 8006096:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	e3cb      	b.n	8006836 <USB_EPStartXfer+0x16ce>
 800609e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <USB_EPStartXfer+0xf56>
 80060b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060b8:	3b01      	subs	r3, #1
 80060ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e3ad      	b.n	8006836 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	78db      	ldrb	r3, [r3, #3]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	f040 8200 	bne.w	80064ec <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 8091 	bne.w	8006220 <USB_EPStartXfer+0x10b8>
 80060fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006102:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800610c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006110:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800611a:	b29b      	uxth	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006122:	4413      	add	r3, r2
 8006124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800612c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	011a      	lsls	r2, r3, #4
 8006136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800613a:	4413      	add	r3, r2
 800613c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006144:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006148:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d116      	bne.n	8006182 <USB_EPStartXfer+0x101a>
 8006154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006160:	b29a      	uxth	r2, r3
 8006162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006178:	b29a      	uxth	r2, r3
 800617a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e083      	b.n	800628a <USB_EPStartXfer+0x1122>
 8006182:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006186:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b3e      	cmp	r3, #62	; 0x3e
 8006190:	d820      	bhi.n	80061d4 <USB_EPStartXfer+0x106c>
 8006192:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006196:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d004      	beq.n	80061c2 <USB_EPStartXfer+0x105a>
 80061b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061bc:	3301      	adds	r3, #1
 80061be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	029b      	lsls	r3, r3, #10
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e05a      	b.n	800628a <USB_EPStartXfer+0x1122>
 80061d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f003 031f 	and.w	r3, r3, #31
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <USB_EPStartXfer+0x109c>
 80061fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061fe:	3b01      	subs	r3, #1
 8006200:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006208:	b29b      	uxth	r3, r3
 800620a:	029b      	lsls	r3, r3, #10
 800620c:	b29b      	uxth	r3, r3
 800620e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006216:	b29a      	uxth	r2, r3
 8006218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	e034      	b.n	800628a <USB_EPStartXfer+0x1122>
 8006220:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006224:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d12c      	bne.n	800628a <USB_EPStartXfer+0x1122>
 8006230:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006234:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800623e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624c:	b29b      	uxth	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006254:	4413      	add	r3, r2
 8006256:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800625a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800625e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	011a      	lsls	r2, r3, #4
 8006268:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800626c:	4413      	add	r3, r2
 800626e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006276:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800627a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800628e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006298:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800629c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 8091 	bne.w	80063cc <USB_EPStartXfer+0x1264>
 80062aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ce:	4413      	add	r3, r2
 80062d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	011a      	lsls	r2, r3, #4
 80062e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062e6:	4413      	add	r3, r2
 80062e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d116      	bne.n	800632e <USB_EPStartXfer+0x11c6>
 8006300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006324:	b29a      	uxth	r2, r3
 8006326:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	e07c      	b.n	8006428 <USB_EPStartXfer+0x12c0>
 800632e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006332:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b3e      	cmp	r3, #62	; 0x3e
 800633c:	d820      	bhi.n	8006380 <USB_EPStartXfer+0x1218>
 800633e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006342:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006350:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006354:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <USB_EPStartXfer+0x1206>
 8006364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006368:	3301      	adds	r3, #1
 800636a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006372:	b29b      	uxth	r3, r3
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	b29a      	uxth	r2, r3
 8006378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e053      	b.n	8006428 <USB_EPStartXfer+0x12c0>
 8006380:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006384:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006392:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006396:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d104      	bne.n	80063b0 <USB_EPStartXfer+0x1248>
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	3b01      	subs	r3, #1
 80063ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	029b      	lsls	r3, r3, #10
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e02d      	b.n	8006428 <USB_EPStartXfer+0x12c0>
 80063cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d125      	bne.n	8006428 <USB_EPStartXfer+0x12c0>
 80063dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063f2:	4413      	add	r3, r2
 80063f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	011a      	lsls	r2, r3, #4
 8006406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800640a:	4413      	add	r3, r2
 800640c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006414:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006418:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	b29a      	uxth	r2, r3
 8006422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006426:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800642c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 81fe 	beq.w	8006836 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800643a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800643e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006448:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800645a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800645e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d005      	beq.n	8006472 <USB_EPStartXfer+0x130a>
 8006466:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800646a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006472:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 81db 	bne.w	8006836 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006480:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 81d4 	bne.w	8006836 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800648e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006492:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800649c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80064b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80064d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8013      	strh	r3, [r2, #0]
 80064ea:	e1a4      	b.n	8006836 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	78db      	ldrb	r3, [r3, #3]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	f040 819a 	bne.w	8006832 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006502:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800650e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	429a      	cmp	r2, r3
 8006518:	d917      	bls.n	800654a <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 800651a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800651e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800652a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800652e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006540:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	619a      	str	r2, [r3, #24]
 8006548:	e00e      	b.n	8006568 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 800654a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800654e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800655a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800655e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2200      	movs	r2, #0
 8006566:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006568:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800656c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d178      	bne.n	800666a <USB_EPStartXfer+0x1502>
 8006578:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800657c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006586:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800658a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800659c:	4413      	add	r3, r2
 800659e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	011a      	lsls	r2, r3, #4
 80065b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065b4:	4413      	add	r3, r2
 80065b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d116      	bne.n	80065f4 <USB_EPStartXfer+0x148c>
 80065c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065d8:	801a      	strh	r2, [r3, #0]
 80065da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e06b      	b.n	80066cc <USB_EPStartXfer+0x1564>
 80065f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f8:	2b3e      	cmp	r3, #62	; 0x3e
 80065fa:	d818      	bhi.n	800662e <USB_EPStartXfer+0x14c6>
 80065fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <USB_EPStartXfer+0x14b4>
 8006612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006616:	3301      	adds	r3, #1
 8006618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800661c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006620:	b29b      	uxth	r3, r3
 8006622:	029b      	lsls	r3, r3, #10
 8006624:	b29a      	uxth	r2, r3
 8006626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e04e      	b.n	80066cc <USB_EPStartXfer+0x1564>
 800662e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663c:	f003 031f 	and.w	r3, r3, #31
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <USB_EPStartXfer+0x14e6>
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006648:	3b01      	subs	r3, #1
 800664a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800664e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006652:	b29b      	uxth	r3, r3
 8006654:	029b      	lsls	r3, r3, #10
 8006656:	b29b      	uxth	r3, r3
 8006658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006660:	b29a      	uxth	r2, r3
 8006662:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	e030      	b.n	80066cc <USB_EPStartXfer+0x1564>
 800666a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800666e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d128      	bne.n	80066cc <USB_EPStartXfer+0x1564>
 800667a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800667e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800668c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800669e:	4413      	add	r3, r2
 80066a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	011a      	lsls	r2, r3, #4
 80066b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b6:	4413      	add	r3, r2
 80066b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066de:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d178      	bne.n	80067dc <USB_EPStartXfer+0x1674>
 80066ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006706:	b29b      	uxth	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800670e:	4413      	add	r3, r2
 8006710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	011a      	lsls	r2, r3, #4
 8006722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006726:	4413      	add	r3, r2
 8006728:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800672c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d116      	bne.n	8006766 <USB_EPStartXfer+0x15fe>
 8006738:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006744:	b29a      	uxth	r2, r3
 8006746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800674a:	801a      	strh	r2, [r3, #0]
 800674c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	e067      	b.n	8006836 <USB_EPStartXfer+0x16ce>
 8006766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800676a:	2b3e      	cmp	r3, #62	; 0x3e
 800676c:	d818      	bhi.n	80067a0 <USB_EPStartXfer+0x1638>
 800676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <USB_EPStartXfer+0x1626>
 8006784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006788:	3301      	adds	r3, #1
 800678a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800678e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006792:	b29b      	uxth	r3, r3
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e04a      	b.n	8006836 <USB_EPStartXfer+0x16ce>
 80067a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <USB_EPStartXfer+0x1658>
 80067b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ba:	3b01      	subs	r3, #1
 80067bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	029b      	lsls	r3, r3, #10
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	e02c      	b.n	8006836 <USB_EPStartXfer+0x16ce>
 80067dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d124      	bne.n	8006836 <USB_EPStartXfer+0x16ce>
 80067ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006802:	4413      	add	r3, r2
 8006804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006808:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800680c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	011a      	lsls	r2, r3, #4
 8006816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800681a:	4413      	add	r3, r2
 800681c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006828:	b29a      	uxth	r2, r3
 800682a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	e001      	b.n	8006836 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e03a      	b.n	80068ac <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800683a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006844:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006860:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006864:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006868:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800686c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006870:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006874:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800687c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006886:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	785b      	ldrb	r3, [r3, #1]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d020      	beq.n	800690a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068de:	81bb      	strh	r3, [r7, #12]
 80068e0:	89bb      	ldrh	r3, [r7, #12]
 80068e2:	f083 0310 	eor.w	r3, r3, #16
 80068e6:	81bb      	strh	r3, [r7, #12]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	441a      	add	r2, r3
 80068f2:	89bb      	ldrh	r3, [r7, #12]
 80068f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006904:	b29b      	uxth	r3, r3
 8006906:	8013      	strh	r3, [r2, #0]
 8006908:	e01f      	b.n	800694a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	81fb      	strh	r3, [r7, #14]
 8006922:	89fb      	ldrh	r3, [r7, #14]
 8006924:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006928:	81fb      	strh	r3, [r7, #14]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	441a      	add	r2, r3
 8006934:	89fb      	ldrh	r3, [r7, #14]
 8006936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006946:	b29b      	uxth	r3, r3
 8006948:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr

08006956 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006956:	b480      	push	{r7}
 8006958:	b087      	sub	sp, #28
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	7b1b      	ldrb	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 809d 	bne.w	8006aa4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d04c      	beq.n	8006a0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	823b      	strh	r3, [r7, #16]
 8006980:	8a3b      	ldrh	r3, [r7, #16]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01b      	beq.n	80069c2 <USB_EPClearStall+0x6c>
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a0:	81fb      	strh	r3, [r7, #14]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	78db      	ldrb	r3, [r3, #3]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d06c      	beq.n	8006aa4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	81bb      	strh	r3, [r7, #12]
 80069e2:	89bb      	ldrh	r3, [r7, #12]
 80069e4:	f083 0320 	eor.w	r3, r3, #32
 80069e8:	81bb      	strh	r3, [r7, #12]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	89bb      	ldrh	r3, [r7, #12]
 80069f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	8013      	strh	r3, [r2, #0]
 8006a0a:	e04b      	b.n	8006aa4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	82fb      	strh	r3, [r7, #22]
 8006a1a:	8afb      	ldrh	r3, [r7, #22]
 8006a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <USB_EPClearStall+0x106>
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3a:	82bb      	strh	r3, [r7, #20]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	8abb      	ldrh	r3, [r7, #20]
 8006a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	827b      	strh	r3, [r7, #18]
 8006a74:	8a7b      	ldrh	r3, [r7, #18]
 8006a76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a7a:	827b      	strh	r3, [r7, #18]
 8006a7c:	8a7b      	ldrh	r3, [r7, #18]
 8006a7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a82:	827b      	strh	r3, [r7, #18]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	8a7b      	ldrh	r3, [r7, #18]
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2280      	movs	r2, #128	; 0x80
 8006ac6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b08d      	sub	sp, #52	; 0x34
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	461a      	mov	r2, r3
 8006b40:	460b      	mov	r3, r1
 8006b42:	80fb      	strh	r3, [r7, #6]
 8006b44:	4613      	mov	r3, r2
 8006b46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b48:	88bb      	ldrh	r3, [r7, #4]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b58:	88fb      	ldrh	r3, [r7, #6]
 8006b5a:	005a      	lsls	r2, r3, #1
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b6a:	e01e      	b.n	8006baa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	3301      	adds	r3, #1
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	3302      	adds	r3, #2
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1dd      	bne.n	8006b6c <USB_WritePMA+0x3a>
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	3734      	adds	r7, #52	; 0x34
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr

08006bbc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b08b      	sub	sp, #44	; 0x2c
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	460b      	mov	r3, r1
 8006bcc:	80fb      	strh	r3, [r7, #6]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006bd2:	88bb      	ldrh	r3, [r7, #4]
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	005a      	lsls	r2, r3, #1
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bee:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf4:	e01b      	b.n	8006c2e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	3302      	adds	r3, #2
 8006c02:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	0a1b      	lsrs	r3, r3, #8
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	3302      	adds	r3, #2
 8006c26:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e0      	bne.n	8006bf6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c34:	88bb      	ldrh	r3, [r7, #4]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	701a      	strb	r2, [r3, #0]
  }
}
 8006c50:	bf00      	nop
 8006c52:	372c      	adds	r7, #44	; 0x2c
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr

08006c5a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	7c1b      	ldrb	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d115      	bne.n	8006c9e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	2202      	movs	r2, #2
 8006c78:	2181      	movs	r1, #129	; 0x81
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 ffb9 	bl	8008bf2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 ffaf 	bl	8008bf2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c9c:	e012      	b.n	8006cc4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c9e:	2340      	movs	r3, #64	; 0x40
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	2181      	movs	r1, #129	; 0x81
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 ffa4 	bl	8008bf2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cb0:	2340      	movs	r3, #64	; 0x40
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 ff9b 	bl	8008bf2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	2203      	movs	r2, #3
 8006cc8:	2182      	movs	r1, #130	; 0x82
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 ff91 	bl	8008bf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cd6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cda:	f002 f8b1 	bl	8008e40 <USBD_static_malloc>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d102      	bne.n	8006cf6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
 8006cf4:	e026      	b.n	8006d44 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7c1b      	ldrb	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f002 f851 	bl	8008dd4 <USBD_LL_PrepareReceive>
 8006d32:	e007      	b.n	8006d44 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d3a:	2340      	movs	r3, #64	; 0x40
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f002 f848 	bl	8008dd4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	460b      	mov	r3, r1
 8006d58:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d5e:	2181      	movs	r1, #129	; 0x81
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 ff6c 	bl	8008c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 ff65 	bl	8008c3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d7c:	2182      	movs	r1, #130	; 0x82
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 ff5d 	bl	8008c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da4:	4618      	mov	r0, r3
 8006da6:	f002 f857 	bl	8008e58 <USBD_static_free>
    pdev->pClassData = NULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dcc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d039      	beq.n	8006e5a <USBD_CDC_Setup+0x9e>
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d17f      	bne.n	8006eea <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	88db      	ldrh	r3, [r3, #6]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d029      	beq.n	8006e46 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	b25b      	sxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da11      	bge.n	8006e20 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006e08:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	88d2      	ldrh	r2, [r2, #6]
 8006e0e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e10:	6939      	ldr	r1, [r7, #16]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	88db      	ldrh	r3, [r3, #6]
 8006e16:	461a      	mov	r2, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fa0a 	bl	8008232 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e1e:	e06b      	b.n	8006ef8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	785a      	ldrb	r2, [r3, #1]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	88db      	ldrh	r3, [r3, #6]
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e36:	6939      	ldr	r1, [r7, #16]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	88db      	ldrh	r3, [r3, #6]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fa25 	bl	800828e <USBD_CtlPrepareRx>
      break;
 8006e44:	e058      	b.n	8006ef8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	7850      	ldrb	r0, [r2, #1]
 8006e52:	2200      	movs	r2, #0
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	4798      	blx	r3
      break;
 8006e58:	e04e      	b.n	8006ef8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b0b      	cmp	r3, #11
 8006e60:	d02e      	beq.n	8006ec0 <USBD_CDC_Setup+0x104>
 8006e62:	2b0b      	cmp	r3, #11
 8006e64:	dc38      	bgt.n	8006ed8 <USBD_CDC_Setup+0x11c>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <USBD_CDC_Setup+0xb4>
 8006e6a:	2b0a      	cmp	r3, #10
 8006e6c:	d014      	beq.n	8006e98 <USBD_CDC_Setup+0xdc>
 8006e6e:	e033      	b.n	8006ed8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d107      	bne.n	8006e8a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e7a:	f107 030c 	add.w	r3, r7, #12
 8006e7e:	2202      	movs	r2, #2
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 f9d5 	bl	8008232 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e88:	e02e      	b.n	8006ee8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f966 	bl	800815e <USBD_CtlError>
            ret = USBD_FAIL;
 8006e92:	2302      	movs	r3, #2
 8006e94:	75fb      	strb	r3, [r7, #23]
          break;
 8006e96:	e027      	b.n	8006ee8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d107      	bne.n	8006eb2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ea2:	f107 030f 	add.w	r3, r7, #15
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f9c1 	bl	8008232 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eb0:	e01a      	b.n	8006ee8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f001 f952 	bl	800815e <USBD_CtlError>
            ret = USBD_FAIL;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebe:	e013      	b.n	8006ee8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d00d      	beq.n	8006ee6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 f946 	bl	800815e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ed6:	e006      	b.n	8006ee6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 f93f 	bl	800815e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ee4:	e000      	b.n	8006ee8 <USBD_CDC_Setup+0x12c>
          break;
 8006ee6:	bf00      	nop
      }
      break;
 8006ee8:	e006      	b.n	8006ef8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 f936 	bl	800815e <USBD_CtlError>
      ret = USBD_FAIL;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef6:	bf00      	nop
  }

  return ret;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f14:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f1c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d03a      	beq.n	8006f9e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	331c      	adds	r3, #28
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d029      	beq.n	8006f92 <USBD_CDC_DataIn+0x90>
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	331c      	adds	r3, #28
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	78f9      	ldrb	r1, [r7, #3]
 8006f52:	68b8      	ldr	r0, [r7, #8]
 8006f54:	460b      	mov	r3, r1
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	4403      	add	r3, r0
 8006f5e:	3338      	adds	r3, #56	; 0x38
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f66:	fb01 f303 	mul.w	r3, r1, r3
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d110      	bne.n	8006f92 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	331c      	adds	r3, #28
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f84:	78f9      	ldrb	r1, [r7, #3]
 8006f86:	2300      	movs	r3, #0
 8006f88:	2200      	movs	r2, #0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 feff 	bl	8008d8e <USBD_LL_Transmit>
 8006f90:	e003      	b.n	8006f9a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f9e:	2302      	movs	r3, #2
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 ff2a 	bl	8008e1a <USBD_LL_GetRxDataSize>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00d      	beq.n	8006ff4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fec:	4611      	mov	r1, r2
 8006fee:	4798      	blx	r3

    return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e000      	b.n	8006ff6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ff4:	2302      	movs	r3, #2
  }
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007014:	2b00      	cmp	r3, #0
 8007016:	d015      	beq.n	8007044 <USBD_CDC_EP0_RxReady+0x46>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800701e:	2bff      	cmp	r3, #255	; 0xff
 8007020:	d010      	beq.n	8007044 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007030:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007038:	b292      	uxth	r2, r2
 800703a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	22ff      	movs	r2, #255	; 0xff
 8007040:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2243      	movs	r2, #67	; 0x43
 800705c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800705e:	4b03      	ldr	r3, [pc, #12]	; (800706c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	200000c0 	.word	0x200000c0

08007070 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2243      	movs	r2, #67	; 0x43
 800707c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800707e:	4b03      	ldr	r3, [pc, #12]	; (800708c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007080:	4618      	mov	r0, r3
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	2000007c 	.word	0x2000007c

08007090 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2243      	movs	r2, #67	; 0x43
 800709c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bc80      	pop	{r7}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000104 	.word	0x20000104

080070b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	220a      	movs	r2, #10
 80070bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80070be:	4b03      	ldr	r3, [pc, #12]	; (80070cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20000038 	.word	0x20000038

080070d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80070da:	2302      	movs	r3, #2
 80070dc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr

080070fc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	bc80      	pop	{r7}
 800712c:	4770      	bx	lr

0800712e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007162:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01c      	beq.n	80071a8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007174:	2b00      	cmp	r3, #0
 8007176:	d115      	bne.n	80071a4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007196:	b29b      	uxth	r3, r3
 8007198:	2181      	movs	r1, #129	; 0x81
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fdf7 	bl	8008d8e <USBD_LL_Transmit>

      return USBD_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	e002      	b.n	80071aa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80071a8:	2302      	movs	r3, #2
  }
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d017      	beq.n	80071fc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	7c1b      	ldrb	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071de:	2101      	movs	r1, #1
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fdf7 	bl	8008dd4 <USBD_LL_PrepareReceive>
 80071e6:	e007      	b.n	80071f8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ee:	2340      	movs	r3, #64	; 0x40
 80071f0:	2101      	movs	r1, #1
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fdee 	bl	8008dd4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	e000      	b.n	80071fe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071fc:	2302      	movs	r3, #2
  }
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b084      	sub	sp, #16
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	4613      	mov	r3, r2
 8007212:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800721a:	2302      	movs	r3, #2
 800721c:	e01a      	b.n	8007254 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	79fa      	ldrb	r2, [r7, #7]
 800724a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f001 fc5b 	bl	8008b08 <USBD_LL_Init>

  return USBD_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d006      	beq.n	800727e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e001      	b.n	8007282 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr

0800728e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 fc90 	bl	8008bbc <USBD_LL_Start>

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr

080072ba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072c6:	2302      	movs	r3, #2
 80072c8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00c      	beq.n	80072ee <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	4611      	mov	r1, r2
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	4611      	mov	r1, r2
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fed8 	bl	80080e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007344:	461a      	mov	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007352:	f003 031f 	and.w	r3, r3, #31
 8007356:	2b02      	cmp	r3, #2
 8007358:	d016      	beq.n	8007388 <USBD_LL_SetupStage+0x6a>
 800735a:	2b02      	cmp	r3, #2
 800735c:	d81c      	bhi.n	8007398 <USBD_LL_SetupStage+0x7a>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <USBD_LL_SetupStage+0x4a>
 8007362:	2b01      	cmp	r3, #1
 8007364:	d008      	beq.n	8007378 <USBD_LL_SetupStage+0x5a>
 8007366:	e017      	b.n	8007398 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f9cb 	bl	800770c <USBD_StdDevReq>
      break;
 8007376:	e01a      	b.n	80073ae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa2d 	bl	80077e0 <USBD_StdItfReq>
      break;
 8007386:	e012      	b.n	80073ae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fa6d 	bl	8007870 <USBD_StdEPReq>
      break;
 8007396:	e00a      	b.n	80073ae <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800739e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fc68 	bl	8008c7c <USBD_LL_StallEP>
      break;
 80073ac:	bf00      	nop
  }

  return USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	460b      	mov	r3, r1
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073c6:	7afb      	ldrb	r3, [r7, #11]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d14b      	bne.n	8007464 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073d2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d134      	bne.n	8007448 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d919      	bls.n	800741e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	1ad2      	subs	r2, r2, r3
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007400:	429a      	cmp	r2, r3
 8007402:	d203      	bcs.n	800740c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007408:	b29b      	uxth	r3, r3
 800740a:	e002      	b.n	8007412 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007410:	b29b      	uxth	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 ff57 	bl	80082ca <USBD_CtlContinueRx>
 800741c:	e038      	b.n	8007490 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007430:	2b03      	cmp	r3, #3
 8007432:	d105      	bne.n	8007440 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 ff54 	bl	80082ee <USBD_CtlSendStatus>
 8007446:	e023      	b.n	8007490 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800744e:	2b05      	cmp	r3, #5
 8007450:	d11e      	bne.n	8007490 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800745a:	2100      	movs	r1, #0
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f001 fc0d 	bl	8008c7c <USBD_LL_StallEP>
 8007462:	e015      	b.n	8007490 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00d      	beq.n	800748c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007476:	2b03      	cmp	r3, #3
 8007478:	d108      	bne.n	800748c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	7afa      	ldrb	r2, [r7, #11]
 8007484:	4611      	mov	r1, r2
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	4798      	blx	r3
 800748a:	e001      	b.n	8007490 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800748c:	2302      	movs	r3, #2
 800748e:	e000      	b.n	8007492 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b086      	sub	sp, #24
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	460b      	mov	r3, r1
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d17f      	bne.n	80075ae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3314      	adds	r3, #20
 80074b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d15c      	bne.n	8007578 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d915      	bls.n	80074f6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 fec1 	bl	800826a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074e8:	2300      	movs	r3, #0
 80074ea:	2200      	movs	r2, #0
 80074ec:	2100      	movs	r1, #0
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f001 fc70 	bl	8008dd4 <USBD_LL_PrepareReceive>
 80074f4:	e04e      	b.n	8007594 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	6912      	ldr	r2, [r2, #16]
 80074fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8007502:	fb01 f202 	mul.w	r2, r1, r2
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d11c      	bne.n	8007546 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007514:	429a      	cmp	r2, r3
 8007516:	d316      	bcc.n	8007546 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007522:	429a      	cmp	r2, r3
 8007524:	d20f      	bcs.n	8007546 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 fe9d 	bl	800826a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007538:	2300      	movs	r3, #0
 800753a:	2200      	movs	r2, #0
 800753c:	2100      	movs	r1, #0
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f001 fc48 	bl	8008dd4 <USBD_LL_PrepareReceive>
 8007544:	e026      	b.n	8007594 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007558:	2b03      	cmp	r3, #3
 800755a:	d105      	bne.n	8007568 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007568:	2180      	movs	r1, #128	; 0x80
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f001 fb86 	bl	8008c7c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fecf 	bl	8008314 <USBD_CtlReceiveStatus>
 8007576:	e00d      	b.n	8007594 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800757e:	2b04      	cmp	r3, #4
 8007580:	d004      	beq.n	800758c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800758c:	2180      	movs	r1, #128	; 0x80
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f001 fb74 	bl	8008c7c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800759a:	2b01      	cmp	r3, #1
 800759c:	d11d      	bne.n	80075da <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff fe81 	bl	80072a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075ac:	e015      	b.n	80075da <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d108      	bne.n	80075d6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	7afa      	ldrb	r2, [r7, #11]
 80075ce:	4611      	mov	r1, r2
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	4798      	blx	r3
 80075d4:	e001      	b.n	80075da <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075d6:	2302      	movs	r3, #2
 80075d8:	e000      	b.n	80075dc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075ec:	2340      	movs	r3, #64	; 0x40
 80075ee:	2200      	movs	r2, #0
 80075f0:	2100      	movs	r1, #0
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 fafd 	bl	8008bf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2240      	movs	r2, #64	; 0x40
 8007604:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007608:	2340      	movs	r3, #64	; 0x40
 800760a:	2200      	movs	r2, #0
 800760c:	2180      	movs	r1, #128	; 0x80
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 faef 	bl	8008bf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2240      	movs	r2, #64	; 0x40
 800761e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6852      	ldr	r2, [r2, #4]
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	4611      	mov	r1, r2
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
  }

  return USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	78fa      	ldrb	r2, [r7, #3]
 8007676:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr

08007684 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2204      	movs	r2, #4
 800769c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr

080076ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d105      	bne.n	80076ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d10b      	bne.n	8007700 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d005      	beq.n	8007732 <USBD_StdDevReq+0x26>
 8007726:	2b40      	cmp	r3, #64	; 0x40
 8007728:	d84f      	bhi.n	80077ca <USBD_StdDevReq+0xbe>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <USBD_StdDevReq+0x36>
 800772e:	2b20      	cmp	r3, #32
 8007730:	d14b      	bne.n	80077ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
      break;
 8007740:	e048      	b.n	80077d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b09      	cmp	r3, #9
 8007748:	d839      	bhi.n	80077be <USBD_StdDevReq+0xb2>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <USBD_StdDevReq+0x44>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	080077a1 	.word	0x080077a1
 8007754:	080077b5 	.word	0x080077b5
 8007758:	080077bf 	.word	0x080077bf
 800775c:	080077ab 	.word	0x080077ab
 8007760:	080077bf 	.word	0x080077bf
 8007764:	08007783 	.word	0x08007783
 8007768:	08007779 	.word	0x08007779
 800776c:	080077bf 	.word	0x080077bf
 8007770:	08007797 	.word	0x08007797
 8007774:	0800778d 	.word	0x0800778d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9dc 	bl	8007b38 <USBD_GetDescriptor>
          break;
 8007780:	e022      	b.n	80077c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fb3f 	bl	8007e08 <USBD_SetAddress>
          break;
 800778a:	e01d      	b.n	80077c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fb7e 	bl	8007e90 <USBD_SetConfig>
          break;
 8007794:	e018      	b.n	80077c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc07 	bl	8007fac <USBD_GetConfig>
          break;
 800779e:	e013      	b.n	80077c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc37 	bl	8008016 <USBD_GetStatus>
          break;
 80077a8:	e00e      	b.n	80077c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fc65 	bl	800807c <USBD_SetFeature>
          break;
 80077b2:	e009      	b.n	80077c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fc74 	bl	80080a4 <USBD_ClrFeature>
          break;
 80077bc:	e004      	b.n	80077c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fccc 	bl	800815e <USBD_CtlError>
          break;
 80077c6:	bf00      	nop
      }
      break;
 80077c8:	e004      	b.n	80077d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fcc6 	bl	800815e <USBD_CtlError>
      break;
 80077d2:	bf00      	nop
  }

  return ret;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop

080077e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d005      	beq.n	8007806 <USBD_StdItfReq+0x26>
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d82e      	bhi.n	800785c <USBD_StdItfReq+0x7c>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <USBD_StdItfReq+0x26>
 8007802:	2b20      	cmp	r3, #32
 8007804:	d12a      	bne.n	800785c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800780c:	3b01      	subs	r3, #1
 800780e:	2b02      	cmp	r3, #2
 8007810:	d81d      	bhi.n	800784e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	889b      	ldrh	r3, [r3, #4]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b01      	cmp	r3, #1
 800781a:	d813      	bhi.n	8007844 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	88db      	ldrh	r3, [r3, #6]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d110      	bne.n	8007858 <USBD_StdItfReq+0x78>
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10d      	bne.n	8007858 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fd56 	bl	80082ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007842:	e009      	b.n	8007858 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fc89 	bl	800815e <USBD_CtlError>
          break;
 800784c:	e004      	b.n	8007858 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc84 	bl	800815e <USBD_CtlError>
          break;
 8007856:	e000      	b.n	800785a <USBD_StdItfReq+0x7a>
          break;
 8007858:	bf00      	nop
      }
      break;
 800785a:	e004      	b.n	8007866 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fc7d 	bl	800815e <USBD_CtlError>
      break;
 8007864:	bf00      	nop
  }

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	889b      	ldrh	r3, [r3, #4]
 8007882:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d007      	beq.n	80078a0 <USBD_StdEPReq+0x30>
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	f200 8146 	bhi.w	8007b22 <USBD_StdEPReq+0x2b2>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <USBD_StdEPReq+0x40>
 800789a:	2b20      	cmp	r3, #32
 800789c:	f040 8141 	bne.w	8007b22 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
      break;
 80078ae:	e13d      	b.n	8007b2c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d10a      	bne.n	80078d2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	e12d      	b.n	8007b2e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d007      	beq.n	80078ea <USBD_StdEPReq+0x7a>
 80078da:	2b03      	cmp	r3, #3
 80078dc:	f300 811b 	bgt.w	8007b16 <USBD_StdEPReq+0x2a6>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d072      	beq.n	80079ca <USBD_StdEPReq+0x15a>
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d03a      	beq.n	800795e <USBD_StdEPReq+0xee>
 80078e8:	e115      	b.n	8007b16 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d002      	beq.n	80078fa <USBD_StdEPReq+0x8a>
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d015      	beq.n	8007924 <USBD_StdEPReq+0xb4>
 80078f8:	e02b      	b.n	8007952 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00c      	beq.n	800791a <USBD_StdEPReq+0xaa>
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d009      	beq.n	800791a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 f9b6 	bl	8008c7c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007910:	2180      	movs	r1, #128	; 0x80
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 f9b2 	bl	8008c7c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007918:	e020      	b.n	800795c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fc1e 	bl	800815e <USBD_CtlError>
              break;
 8007922:	e01b      	b.n	800795c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	885b      	ldrh	r3, [r3, #2]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10e      	bne.n	800794a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00b      	beq.n	800794a <USBD_StdEPReq+0xda>
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d008      	beq.n	800794a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	88db      	ldrh	r3, [r3, #6]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 f999 	bl	8008c7c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fccf 	bl	80082ee <USBD_CtlSendStatus>

              break;
 8007950:	e004      	b.n	800795c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fc02 	bl	800815e <USBD_CtlError>
              break;
 800795a:	bf00      	nop
          }
          break;
 800795c:	e0e0      	b.n	8007b20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007964:	2b02      	cmp	r3, #2
 8007966:	d002      	beq.n	800796e <USBD_StdEPReq+0xfe>
 8007968:	2b03      	cmp	r3, #3
 800796a:	d015      	beq.n	8007998 <USBD_StdEPReq+0x128>
 800796c:	e026      	b.n	80079bc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00c      	beq.n	800798e <USBD_StdEPReq+0x11e>
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d009      	beq.n	800798e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 f97c 	bl	8008c7c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f001 f978 	bl	8008c7c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800798c:	e01c      	b.n	80079c8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fbe4 	bl	800815e <USBD_CtlError>
              break;
 8007996:	e017      	b.n	80079c8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	885b      	ldrh	r3, [r3, #2]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d112      	bne.n	80079c6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 f983 	bl	8008cba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fc9a 	bl	80082ee <USBD_CtlSendStatus>
              }
              break;
 80079ba:	e004      	b.n	80079c6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fbcd 	bl	800815e <USBD_CtlError>
              break;
 80079c4:	e000      	b.n	80079c8 <USBD_StdEPReq+0x158>
              break;
 80079c6:	bf00      	nop
          }
          break;
 80079c8:	e0aa      	b.n	8007b20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d002      	beq.n	80079da <USBD_StdEPReq+0x16a>
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d032      	beq.n	8007a3e <USBD_StdEPReq+0x1ce>
 80079d8:	e097      	b.n	8007b0a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d007      	beq.n	80079f0 <USBD_StdEPReq+0x180>
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b80      	cmp	r3, #128	; 0x80
 80079e4:	d004      	beq.n	80079f0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fbb8 	bl	800815e <USBD_CtlError>
                break;
 80079ee:	e091      	b.n	8007b14 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0b      	bge.n	8007a10 <USBD_StdEPReq+0x1a0>
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3310      	adds	r3, #16
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	e00b      	b.n	8007a28 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	3304      	adds	r3, #4
 8007a28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2202      	movs	r2, #2
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fbfb 	bl	8008232 <USBD_CtlSendData>
              break;
 8007a3c:	e06a      	b.n	8007b14 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	da11      	bge.n	8007a6a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	f003 020f 	and.w	r2, r3, #15
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	3318      	adds	r3, #24
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d117      	bne.n	8007a90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fb7b 	bl	800815e <USBD_CtlError>
                  break;
 8007a68:	e054      	b.n	8007b14 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	f003 020f 	and.w	r2, r3, #15
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d104      	bne.n	8007a90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fb68 	bl	800815e <USBD_CtlError>
                  break;
 8007a8e:	e041      	b.n	8007b14 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da0b      	bge.n	8007ab0 <USBD_StdEPReq+0x240>
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	3310      	adds	r3, #16
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	e00b      	b.n	8007ac8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aca:	7bbb      	ldrb	r3, [r7, #14]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <USBD_StdEPReq+0x266>
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	2b80      	cmp	r3, #128	; 0x80
 8007ad4:	d103      	bne.n	8007ade <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e00e      	b.n	8007afc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f908 	bl	8008cf8 <USBD_LL_IsStallEP>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2201      	movs	r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	e002      	b.n	8007afc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2202      	movs	r2, #2
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fb95 	bl	8008232 <USBD_CtlSendData>
              break;
 8007b08:	e004      	b.n	8007b14 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fb26 	bl	800815e <USBD_CtlError>
              break;
 8007b12:	bf00      	nop
          }
          break;
 8007b14:	e004      	b.n	8007b20 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb20 	bl	800815e <USBD_CtlError>
          break;
 8007b1e:	bf00      	nop
      }
      break;
 8007b20:	e004      	b.n	8007b2c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fb1a 	bl	800815e <USBD_CtlError>
      break;
 8007b2a:	bf00      	nop
  }

  return ret;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	885b      	ldrh	r3, [r3, #2]
 8007b52:	0a1b      	lsrs	r3, r3, #8
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	2b06      	cmp	r3, #6
 8007b5a:	f200 8128 	bhi.w	8007dae <USBD_GetDescriptor+0x276>
 8007b5e:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <USBD_GetDescriptor+0x2c>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	08007b99 	.word	0x08007b99
 8007b6c:	08007bd9 	.word	0x08007bd9
 8007b70:	08007daf 	.word	0x08007daf
 8007b74:	08007daf 	.word	0x08007daf
 8007b78:	08007d4f 	.word	0x08007d4f
 8007b7c:	08007d7b 	.word	0x08007d7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7c12      	ldrb	r2, [r2, #16]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	60f8      	str	r0, [r7, #12]
      break;
 8007b96:	e112      	b.n	8007dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7c1b      	ldrb	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10d      	bne.n	8007bbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	f107 0208 	add.w	r2, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007bba:	e100      	b.n	8007dbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	f107 0208 	add.w	r2, r7, #8
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
 8007bcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	701a      	strb	r2, [r3, #0]
      break;
 8007bd6:	e0f2      	b.n	8007dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b05      	cmp	r3, #5
 8007be0:	f200 80ac 	bhi.w	8007d3c <USBD_GetDescriptor+0x204>
 8007be4:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <USBD_GetDescriptor+0xb4>)
 8007be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bea:	bf00      	nop
 8007bec:	08007c05 	.word	0x08007c05
 8007bf0:	08007c39 	.word	0x08007c39
 8007bf4:	08007c6d 	.word	0x08007c6d
 8007bf8:	08007ca1 	.word	0x08007ca1
 8007bfc:	08007cd5 	.word	0x08007cd5
 8007c00:	08007d09 	.word	0x08007d09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 0108 	add.w	r1, r7, #8
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c26:	e091      	b.n	8007d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa97 	bl	800815e <USBD_CtlError>
            err++;
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	3301      	adds	r3, #1
 8007c34:	72fb      	strb	r3, [r7, #11]
          break;
 8007c36:	e089      	b.n	8007d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7c12      	ldrb	r2, [r2, #16]
 8007c50:	f107 0108 	add.w	r1, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c5a:	e077      	b.n	8007d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fa7d 	bl	800815e <USBD_CtlError>
            err++;
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	3301      	adds	r3, #1
 8007c68:	72fb      	strb	r3, [r7, #11]
          break;
 8007c6a:	e06f      	b.n	8007d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7c12      	ldrb	r2, [r2, #16]
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c8e:	e05d      	b.n	8007d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa63 	bl	800815e <USBD_CtlError>
            err++;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c9e:	e055      	b.n	8007d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	f107 0108 	add.w	r1, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cc2:	e043      	b.n	8007d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa49 	bl	800815e <USBD_CtlError>
            err++;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cd2:	e03b      	b.n	8007d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	7c12      	ldrb	r2, [r2, #16]
 8007cec:	f107 0108 	add.w	r1, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cf6:	e029      	b.n	8007d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa2f 	bl	800815e <USBD_CtlError>
            err++;
 8007d00:	7afb      	ldrb	r3, [r7, #11]
 8007d02:	3301      	adds	r3, #1
 8007d04:	72fb      	strb	r3, [r7, #11]
          break;
 8007d06:	e021      	b.n	8007d4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	7c12      	ldrb	r2, [r2, #16]
 8007d20:	f107 0108 	add.w	r1, r7, #8
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d2a:	e00f      	b.n	8007d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa15 	bl	800815e <USBD_CtlError>
            err++;
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	3301      	adds	r3, #1
 8007d38:	72fb      	strb	r3, [r7, #11]
          break;
 8007d3a:	e007      	b.n	8007d4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa0d 	bl	800815e <USBD_CtlError>
          err++;
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	3301      	adds	r3, #1
 8007d48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d4a:	e038      	b.n	8007dbe <USBD_GetDescriptor+0x286>
 8007d4c:	e037      	b.n	8007dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7c1b      	ldrb	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5e:	f107 0208 	add.w	r2, r7, #8
 8007d62:	4610      	mov	r0, r2
 8007d64:	4798      	blx	r3
 8007d66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d68:	e029      	b.n	8007dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f9f6 	bl	800815e <USBD_CtlError>
        err++;
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	3301      	adds	r3, #1
 8007d76:	72fb      	strb	r3, [r7, #11]
      break;
 8007d78:	e021      	b.n	8007dbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	7c1b      	ldrb	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10d      	bne.n	8007d9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8a:	f107 0208 	add.w	r2, r7, #8
 8007d8e:	4610      	mov	r0, r2
 8007d90:	4798      	blx	r3
 8007d92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3301      	adds	r3, #1
 8007d98:	2207      	movs	r2, #7
 8007d9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d9c:	e00f      	b.n	8007dbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f9dc 	bl	800815e <USBD_CtlError>
        err++;
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	3301      	adds	r3, #1
 8007daa:	72fb      	strb	r3, [r7, #11]
      break;
 8007dac:	e007      	b.n	8007dbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f9d4 	bl	800815e <USBD_CtlError>
      err++;
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	3301      	adds	r3, #1
 8007dba:	72fb      	strb	r3, [r7, #11]
      break;
 8007dbc:	bf00      	nop
  }

  if (err != 0U)
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d11c      	bne.n	8007dfe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007dc4:	893b      	ldrh	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d011      	beq.n	8007dee <USBD_GetDescriptor+0x2b6>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00d      	beq.n	8007dee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88da      	ldrh	r2, [r3, #6]
 8007dd6:	893b      	ldrh	r3, [r7, #8]
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	bf28      	it	cs
 8007ddc:	4613      	movcs	r3, r2
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007de2:	893b      	ldrh	r3, [r7, #8]
 8007de4:	461a      	mov	r2, r3
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fa22 	bl	8008232 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	88db      	ldrh	r3, [r3, #6]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa79 	bl	80082ee <USBD_CtlSendStatus>
 8007dfc:	e000      	b.n	8007e00 <USBD_GetDescriptor+0x2c8>
    return;
 8007dfe:	bf00      	nop
    }
  }
}
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop

08007e08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	889b      	ldrh	r3, [r3, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d130      	bne.n	8007e7c <USBD_SetAddress+0x74>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d12c      	bne.n	8007e7c <USBD_SetAddress+0x74>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	885b      	ldrh	r3, [r3, #2]
 8007e26:	2b7f      	cmp	r3, #127	; 0x7f
 8007e28:	d828      	bhi.n	8007e7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	885b      	ldrh	r3, [r3, #2]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d104      	bne.n	8007e4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f98b 	bl	800815e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e48:	e01d      	b.n	8007e86 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	7bfa      	ldrb	r2, [r7, #15]
 8007e4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 ff7a 	bl	8008d50 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fa46 	bl	80082ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e70:	e009      	b.n	8007e86 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7a:	e004      	b.n	8007e86 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f96d 	bl	800815e <USBD_CtlError>
  }
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	885b      	ldrh	r3, [r3, #2]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	4b41      	ldr	r3, [pc, #260]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007ea2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ea4:	4b40      	ldr	r3, [pc, #256]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d904      	bls.n	8007eb6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f955 	bl	800815e <USBD_CtlError>
 8007eb4:	e075      	b.n	8007fa2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d002      	beq.n	8007ec6 <USBD_SetConfig+0x36>
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	d023      	beq.n	8007f0c <USBD_SetConfig+0x7c>
 8007ec4:	e062      	b.n	8007f8c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ec6:	4b38      	ldr	r3, [pc, #224]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01a      	beq.n	8007f04 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ece:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2203      	movs	r2, #3
 8007edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ee0:	4b31      	ldr	r3, [pc, #196]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff f9e7 	bl	80072ba <USBD_SetClassConfig>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d104      	bne.n	8007efc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f932 	bl	800815e <USBD_CtlError>
            return;
 8007efa:	e052      	b.n	8007fa2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f9f6 	bl	80082ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f02:	e04e      	b.n	8007fa2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9f2 	bl	80082ee <USBD_CtlSendStatus>
        break;
 8007f0a:	e04a      	b.n	8007fa2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007f0c:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d112      	bne.n	8007f3a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007f1c:	4b22      	ldr	r3, [pc, #136]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f26:	4b20      	ldr	r3, [pc, #128]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff f9e3 	bl	80072f8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9db 	bl	80082ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f38:	e033      	b.n	8007fa2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f3a:	4b1b      	ldr	r3, [pc, #108]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d01d      	beq.n	8007f84 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff f9d1 	bl	80072f8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f60:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff f9a7 	bl	80072ba <USBD_SetClassConfig>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d104      	bne.n	8007f7c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f8f2 	bl	800815e <USBD_CtlError>
            return;
 8007f7a:	e012      	b.n	8007fa2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f9b6 	bl	80082ee <USBD_CtlSendStatus>
        break;
 8007f82:	e00e      	b.n	8007fa2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f9b2 	bl	80082ee <USBD_CtlSendStatus>
        break;
 8007f8a:	e00a      	b.n	8007fa2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f8e5 	bl	800815e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <USBD_SetConfig+0x118>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff f9ac 	bl	80072f8 <USBD_ClrClassConfig>
        break;
 8007fa0:	bf00      	nop
    }
  }
}
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000338 	.word	0x20000338

08007fac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	88db      	ldrh	r3, [r3, #6]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d004      	beq.n	8007fc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f8cc 	bl	800815e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fc6:	e022      	b.n	800800e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	dc02      	bgt.n	8007fd8 <USBD_GetConfig+0x2c>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dc03      	bgt.n	8007fde <USBD_GetConfig+0x32>
 8007fd6:	e015      	b.n	8008004 <USBD_GetConfig+0x58>
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d00b      	beq.n	8007ff4 <USBD_GetConfig+0x48>
 8007fdc:	e012      	b.n	8008004 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	2201      	movs	r2, #1
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f920 	bl	8008232 <USBD_CtlSendData>
        break;
 8007ff2:	e00c      	b.n	800800e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f918 	bl	8008232 <USBD_CtlSendData>
        break;
 8008002:	e004      	b.n	800800e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008004:	6839      	ldr	r1, [r7, #0]
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f8a9 	bl	800815e <USBD_CtlError>
        break;
 800800c:	bf00      	nop
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008026:	3b01      	subs	r3, #1
 8008028:	2b02      	cmp	r3, #2
 800802a:	d81e      	bhi.n	800806a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	88db      	ldrh	r3, [r3, #6]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d004      	beq.n	800803e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f891 	bl	800815e <USBD_CtlError>
        break;
 800803c:	e01a      	b.n	8008074 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d005      	beq.n	800805a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f043 0202 	orr.w	r2, r3, #2
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	330c      	adds	r3, #12
 800805e:	2202      	movs	r2, #2
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f8e5 	bl	8008232 <USBD_CtlSendData>
      break;
 8008068:	e004      	b.n	8008074 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f876 	bl	800815e <USBD_CtlError>
      break;
 8008072:	bf00      	nop
  }
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	885b      	ldrh	r3, [r3, #2]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d106      	bne.n	800809c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f929 	bl	80082ee <USBD_CtlSendStatus>
  }
}
 800809c:	bf00      	nop
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b4:	3b01      	subs	r3, #1
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d80b      	bhi.n	80080d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	885b      	ldrh	r3, [r3, #2]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d10c      	bne.n	80080dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f90f 	bl	80082ee <USBD_CtlSendStatus>
      }
      break;
 80080d0:	e004      	b.n	80080dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f842 	bl	800815e <USBD_CtlError>
      break;
 80080da:	e000      	b.n	80080de <USBD_ClrFeature+0x3a>
      break;
 80080dc:	bf00      	nop
  }
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781a      	ldrb	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	785a      	ldrb	r2, [r3, #1]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	3302      	adds	r3, #2
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b29a      	uxth	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	3303      	adds	r3, #3
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	b29b      	uxth	r3, r3
 8008114:	4413      	add	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	3304      	adds	r3, #4
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	b29a      	uxth	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	3305      	adds	r3, #5
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	021b      	lsls	r3, r3, #8
 800812e:	b29b      	uxth	r3, r3
 8008130:	4413      	add	r3, r2
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	3306      	adds	r3, #6
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	b29a      	uxth	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	3307      	adds	r3, #7
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	b29b      	uxth	r3, r3
 800814c:	4413      	add	r3, r2
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	80da      	strh	r2, [r3, #6]

}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr

0800815e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008168:	2180      	movs	r1, #128	; 0x80
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fd86 	bl	8008c7c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008170:	2100      	movs	r1, #0
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fd82 	bl	8008c7c <USBD_LL_StallEP>
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d032      	beq.n	80081fc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f834 	bl	8008204 <USBD_GetLen>
 800819c:	4603      	mov	r3, r0
 800819e:	3301      	adds	r3, #1
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	75fa      	strb	r2, [r7, #23]
 80081b0:	461a      	mov	r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4413      	add	r3, r2
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	7812      	ldrb	r2, [r2, #0]
 80081ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	75fa      	strb	r2, [r7, #23]
 80081c2:	461a      	mov	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4413      	add	r3, r2
 80081c8:	2203      	movs	r2, #3
 80081ca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80081cc:	e012      	b.n	80081f4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	60fa      	str	r2, [r7, #12]
 80081d4:	7dfa      	ldrb	r2, [r7, #23]
 80081d6:	1c51      	adds	r1, r2, #1
 80081d8:	75f9      	strb	r1, [r7, #23]
 80081da:	4611      	mov	r1, r2
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	440a      	add	r2, r1
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	75fa      	strb	r2, [r7, #23]
 80081ea:	461a      	mov	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4413      	add	r3, r2
 80081f0:	2200      	movs	r2, #0
 80081f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e8      	bne.n	80081ce <USBD_GetString+0x4e>
    }
  }
}
 80081fc:	bf00      	nop
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008210:	e005      	b.n	800821e <USBD_GetLen+0x1a>
  {
    len++;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	3301      	adds	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3301      	adds	r3, #1
 800821c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1f5      	bne.n	8008212 <USBD_GetLen+0xe>
  }

  return len;
 8008226:	7bfb      	ldrb	r3, [r7, #15]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	bc80      	pop	{r7}
 8008230:	4770      	bx	lr

08008232 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	4613      	mov	r3, r2
 800823e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2202      	movs	r2, #2
 8008244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008248:	88fa      	ldrh	r2, [r7, #6]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	2100      	movs	r1, #0
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fd97 	bl	8008d8e <USBD_LL_Transmit>

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	4613      	mov	r3, r2
 8008276:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	2100      	movs	r1, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fd85 	bl	8008d8e <USBD_LL_Transmit>

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	4613      	mov	r3, r2
 800829a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2203      	movs	r2, #3
 80082a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80082ac:	88fa      	ldrh	r2, [r7, #6]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082b4:	88fb      	ldrh	r3, [r7, #6]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	2100      	movs	r1, #0
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fd8a 	bl	8008dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	4613      	mov	r3, r2
 80082d6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082d8:	88fb      	ldrh	r3, [r7, #6]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	2100      	movs	r1, #0
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 fd78 	bl	8008dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2204      	movs	r2, #4
 80082fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082fe:	2300      	movs	r3, #0
 8008300:	2200      	movs	r2, #0
 8008302:	2100      	movs	r1, #0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fd42 	bl	8008d8e <USBD_LL_Transmit>

  return USBD_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2205      	movs	r2, #5
 8008320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008324:	2300      	movs	r3, #0
 8008326:	2200      	movs	r2, #0
 8008328:	2100      	movs	r1, #0
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fd52 	bl	8008dd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008342:	463b      	mov	r3, r7
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	605a      	str	r2, [r3, #4]
 800834a:	609a      	str	r2, [r3, #8]
 800834c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800834e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008352:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008354:	2301      	movs	r3, #1
 8008356:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008358:	2302      	movs	r3, #2
 800835a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800835c:	2303      	movs	r3, #3
 800835e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008360:	463b      	mov	r3, r7
 8008362:	4619      	mov	r1, r3
 8008364:	4819      	ldr	r0, [pc, #100]	; (80083cc <MX_USB_DEVICE_Init+0x90>)
 8008366:	f7f8 ff55 	bl	8001214 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800836a:	2200      	movs	r2, #0
 800836c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008370:	4816      	ldr	r0, [pc, #88]	; (80083cc <MX_USB_DEVICE_Init+0x90>)
 8008372:	f7f9 f8d3 	bl	800151c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008376:	2064      	movs	r0, #100	; 0x64
 8008378:	f7f8 fe1a 	bl	8000fb0 <HAL_Delay>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800837c:	2200      	movs	r2, #0
 800837e:	4914      	ldr	r1, [pc, #80]	; (80083d0 <MX_USB_DEVICE_Init+0x94>)
 8008380:	4814      	ldr	r0, [pc, #80]	; (80083d4 <MX_USB_DEVICE_Init+0x98>)
 8008382:	f7fe ff40 	bl	8007206 <USBD_Init>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler();
 800838c:	f7f8 fcce 	bl	8000d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008390:	4911      	ldr	r1, [pc, #68]	; (80083d8 <MX_USB_DEVICE_Init+0x9c>)
 8008392:	4810      	ldr	r0, [pc, #64]	; (80083d4 <MX_USB_DEVICE_Init+0x98>)
 8008394:	f7fe ff62 	bl	800725c <USBD_RegisterClass>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <MX_USB_DEVICE_Init+0x66>
  {
    Error_Handler();
 800839e:	f7f8 fcc5 	bl	8000d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083a2:	490e      	ldr	r1, [pc, #56]	; (80083dc <MX_USB_DEVICE_Init+0xa0>)
 80083a4:	480b      	ldr	r0, [pc, #44]	; (80083d4 <MX_USB_DEVICE_Init+0x98>)
 80083a6:	f7fe fe93 	bl	80070d0 <USBD_CDC_RegisterInterface>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <MX_USB_DEVICE_Init+0x78>
  {
    Error_Handler();
 80083b0:	f7f8 fcbc 	bl	8000d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083b4:	4807      	ldr	r0, [pc, #28]	; (80083d4 <MX_USB_DEVICE_Init+0x98>)
 80083b6:	f7fe ff6a 	bl	800728e <USBD_Start>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <MX_USB_DEVICE_Init+0x88>
  {
    Error_Handler();
 80083c0:	f7f8 fcb4 	bl	8000d2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40010800 	.word	0x40010800
 80083d0:	20000158 	.word	0x20000158
 80083d4:	2000033c 	.word	0x2000033c
 80083d8:	20000044 	.word	0x20000044
 80083dc:	20000148 	.word	0x20000148

080083e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083e6:	2200      	movs	r2, #0
 80083e8:	4915      	ldr	r1, [pc, #84]	; (8008440 <CDC_Init_FS+0x60>)
 80083ea:	4816      	ldr	r0, [pc, #88]	; (8008444 <CDC_Init_FS+0x64>)
 80083ec:	f7fe fe86 	bl	80070fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083f0:	4915      	ldr	r1, [pc, #84]	; (8008448 <CDC_Init_FS+0x68>)
 80083f2:	4814      	ldr	r0, [pc, #80]	; (8008444 <CDC_Init_FS+0x64>)
 80083f4:	f7fe fe9b 	bl	800712e <USBD_CDC_SetRxBuffer>

  // https://stackoverflow.com/a/26925578
  uint32_t baudrate = 9600;
 80083f8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80083fc:	607b      	str	r3, [r7, #4]
  lcBuffer[0] = (uint8_t)(baudrate);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	b2da      	uxtb	r2, r3
 8008402:	4b12      	ldr	r3, [pc, #72]	; (800844c <CDC_Init_FS+0x6c>)
 8008404:	701a      	strb	r2, [r3, #0]
  lcBuffer[1] = (uint8_t)(baudrate >> 8);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	0a1b      	lsrs	r3, r3, #8
 800840a:	b2da      	uxtb	r2, r3
 800840c:	4b0f      	ldr	r3, [pc, #60]	; (800844c <CDC_Init_FS+0x6c>)
 800840e:	705a      	strb	r2, [r3, #1]
  lcBuffer[2] = (uint8_t)(baudrate >> 16);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	0c1b      	lsrs	r3, r3, #16
 8008414:	b2da      	uxtb	r2, r3
 8008416:	4b0d      	ldr	r3, [pc, #52]	; (800844c <CDC_Init_FS+0x6c>)
 8008418:	709a      	strb	r2, [r3, #2]
  lcBuffer[3] = (uint8_t)(baudrate >> 24);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	0e1b      	lsrs	r3, r3, #24
 800841e:	b2da      	uxtb	r2, r3
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <CDC_Init_FS+0x6c>)
 8008422:	70da      	strb	r2, [r3, #3]
  lcBuffer[4] = 0; // 1 Stop bit
 8008424:	4b09      	ldr	r3, [pc, #36]	; (800844c <CDC_Init_FS+0x6c>)
 8008426:	2200      	movs	r2, #0
 8008428:	711a      	strb	r2, [r3, #4]
  lcBuffer[5] = 0; // No parity
 800842a:	4b08      	ldr	r3, [pc, #32]	; (800844c <CDC_Init_FS+0x6c>)
 800842c:	2200      	movs	r2, #0
 800842e:	715a      	strb	r2, [r3, #5]
  lcBuffer[6] = 8; // 8 data bits
 8008430:	4b06      	ldr	r3, [pc, #24]	; (800844c <CDC_Init_FS+0x6c>)
 8008432:	2208      	movs	r2, #8
 8008434:	719a      	strb	r2, [r3, #6]

  return (USBD_OK);
 8008436:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	200009e8 	.word	0x200009e8
 8008444:	2000033c 	.word	0x2000033c
 8008448:	20000600 	.word	0x20000600
 800844c:	20000dd0 	.word	0x20000dd0

08008450 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008454:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008456:	4618      	mov	r0, r3
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr
	...

08008460 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
 800846c:	4613      	mov	r3, r2
 800846e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	2b23      	cmp	r3, #35	; 0x23
 8008474:	f200 808e 	bhi.w	8008594 <CDC_Control_FS+0x134>
 8008478:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <CDC_Control_FS+0x20>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	08008595 	.word	0x08008595
 8008484:	08008595 	.word	0x08008595
 8008488:	08008595 	.word	0x08008595
 800848c:	08008595 	.word	0x08008595
 8008490:	08008595 	.word	0x08008595
 8008494:	08008595 	.word	0x08008595
 8008498:	08008595 	.word	0x08008595
 800849c:	08008595 	.word	0x08008595
 80084a0:	08008595 	.word	0x08008595
 80084a4:	08008595 	.word	0x08008595
 80084a8:	08008595 	.word	0x08008595
 80084ac:	08008595 	.word	0x08008595
 80084b0:	08008595 	.word	0x08008595
 80084b4:	08008595 	.word	0x08008595
 80084b8:	08008595 	.word	0x08008595
 80084bc:	08008595 	.word	0x08008595
 80084c0:	08008595 	.word	0x08008595
 80084c4:	08008595 	.word	0x08008595
 80084c8:	08008595 	.word	0x08008595
 80084cc:	08008595 	.word	0x08008595
 80084d0:	08008595 	.word	0x08008595
 80084d4:	08008595 	.word	0x08008595
 80084d8:	08008595 	.word	0x08008595
 80084dc:	08008595 	.word	0x08008595
 80084e0:	08008595 	.word	0x08008595
 80084e4:	08008595 	.word	0x08008595
 80084e8:	08008595 	.word	0x08008595
 80084ec:	08008595 	.word	0x08008595
 80084f0:	08008595 	.word	0x08008595
 80084f4:	08008595 	.word	0x08008595
 80084f8:	08008595 	.word	0x08008595
 80084fc:	08008595 	.word	0x08008595
 8008500:	08008511 	.word	0x08008511
 8008504:	0800854b 	.word	0x0800854b
 8008508:	08008595 	.word	0x08008595
 800850c:	08008595 	.word	0x08008595
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        lcBuffer[0] = pbuf[0];
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <CDC_Control_FS+0x140>)
 8008516:	701a      	strb	r2, [r3, #0]
        lcBuffer[1] = pbuf[1];
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	785a      	ldrb	r2, [r3, #1]
 800851c:	4b20      	ldr	r3, [pc, #128]	; (80085a0 <CDC_Control_FS+0x140>)
 800851e:	705a      	strb	r2, [r3, #1]
        lcBuffer[2] = pbuf[2];
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	789a      	ldrb	r2, [r3, #2]
 8008524:	4b1e      	ldr	r3, [pc, #120]	; (80085a0 <CDC_Control_FS+0x140>)
 8008526:	709a      	strb	r2, [r3, #2]
        lcBuffer[3] = pbuf[3];
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	78da      	ldrb	r2, [r3, #3]
 800852c:	4b1c      	ldr	r3, [pc, #112]	; (80085a0 <CDC_Control_FS+0x140>)
 800852e:	70da      	strb	r2, [r3, #3]
        lcBuffer[4] = pbuf[4];
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	791a      	ldrb	r2, [r3, #4]
 8008534:	4b1a      	ldr	r3, [pc, #104]	; (80085a0 <CDC_Control_FS+0x140>)
 8008536:	711a      	strb	r2, [r3, #4]
        lcBuffer[5] = pbuf[5];
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	795a      	ldrb	r2, [r3, #5]
 800853c:	4b18      	ldr	r3, [pc, #96]	; (80085a0 <CDC_Control_FS+0x140>)
 800853e:	715a      	strb	r2, [r3, #5]
        lcBuffer[6] = pbuf[6];
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	799a      	ldrb	r2, [r3, #6]
 8008544:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <CDC_Control_FS+0x140>)
 8008546:	719a      	strb	r2, [r3, #6]
    break;
 8008548:	e025      	b.n	8008596 <CDC_Control_FS+0x136>

    case CDC_GET_LINE_CODING:
        pbuf[0] = lcBuffer[0];
 800854a:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <CDC_Control_FS+0x140>)
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	701a      	strb	r2, [r3, #0]
        pbuf[1] = lcBuffer[1];
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	4a12      	ldr	r2, [pc, #72]	; (80085a0 <CDC_Control_FS+0x140>)
 8008558:	7852      	ldrb	r2, [r2, #1]
 800855a:	701a      	strb	r2, [r3, #0]
        pbuf[2] = lcBuffer[2];
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	3302      	adds	r3, #2
 8008560:	4a0f      	ldr	r2, [pc, #60]	; (80085a0 <CDC_Control_FS+0x140>)
 8008562:	7892      	ldrb	r2, [r2, #2]
 8008564:	701a      	strb	r2, [r3, #0]
        pbuf[3] = lcBuffer[3];
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	3303      	adds	r3, #3
 800856a:	4a0d      	ldr	r2, [pc, #52]	; (80085a0 <CDC_Control_FS+0x140>)
 800856c:	78d2      	ldrb	r2, [r2, #3]
 800856e:	701a      	strb	r2, [r3, #0]
        pbuf[4] = lcBuffer[4];
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	3304      	adds	r3, #4
 8008574:	4a0a      	ldr	r2, [pc, #40]	; (80085a0 <CDC_Control_FS+0x140>)
 8008576:	7912      	ldrb	r2, [r2, #4]
 8008578:	701a      	strb	r2, [r3, #0]
        pbuf[5] = lcBuffer[5];
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	3305      	adds	r3, #5
 800857e:	4a08      	ldr	r2, [pc, #32]	; (80085a0 <CDC_Control_FS+0x140>)
 8008580:	7952      	ldrb	r2, [r2, #5]
 8008582:	701a      	strb	r2, [r3, #0]
        pbuf[6] = lcBuffer[6];
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	3306      	adds	r3, #6
 8008588:	4a05      	ldr	r2, [pc, #20]	; (80085a0 <CDC_Control_FS+0x140>)
 800858a:	7992      	ldrb	r2, [r2, #6]
 800858c:	701a      	strb	r2, [r3, #0]

        // Get line coding is invoked when the host connects, clear the RxBuffer when this occurs
        CDC_FlushRxBuffer_FS();
 800858e:	f000 f8bf 	bl	8008710 <CDC_FlushRxBuffer_FS>
    break;
 8008592:	e000      	b.n	8008596 <CDC_Control_FS+0x136>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008594:	bf00      	nop
  }

  return (USBD_OK);
 8008596:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20000dd0 	.word	0x20000dd0

080085a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	4819      	ldr	r0, [pc, #100]	; (8008618 <CDC_Receive_FS+0x74>)
 80085b2:	f7fe fdbc 	bl	800712e <USBD_CDC_SetRxBuffer>

  uint8_t len = (uint8_t) *Len; // Get length
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	73fb      	strb	r3, [r7, #15]

  uint16_t tempHeadPos = rxBufferHeadPos; // Increment temp head pos while writing, then update main variable when complete
 80085bc:	4b17      	ldr	r3, [pc, #92]	; (800861c <CDC_Receive_FS+0x78>)
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	82fb      	strh	r3, [r7, #22]

  for (uint32_t i = 0; i < len; i++) {
 80085c2:	2300      	movs	r3, #0
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	e017      	b.n	80085f8 <CDC_Receive_FS+0x54>
    rxBuffer[tempHeadPos] = Buf[i];
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	441a      	add	r2, r3
 80085ce:	8afb      	ldrh	r3, [r7, #22]
 80085d0:	7811      	ldrb	r1, [r2, #0]
 80085d2:	4a13      	ldr	r2, [pc, #76]	; (8008620 <CDC_Receive_FS+0x7c>)
 80085d4:	54d1      	strb	r1, [r2, r3]

    // Compact position increment logic
    tempHeadPos = (uint16_t)((uint16_t)(tempHeadPos + 1) % HL_RX_BUFFER_SIZE);
 80085d6:	8afb      	ldrh	r3, [r7, #22]
 80085d8:	3301      	adds	r3, #1
 80085da:	b29b      	uxth	r3, r3
 80085dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e0:	82fb      	strh	r3, [r7, #22]
    if (tempHeadPos == HL_RX_BUFFER_SIZE) {
      tempHeadPos = 0;
    }
    */

    if (tempHeadPos == rxBufferTailPos) {
 80085e2:	4b10      	ldr	r3, [pc, #64]	; (8008624 <CDC_Receive_FS+0x80>)
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8afa      	ldrh	r2, [r7, #22]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d101      	bne.n	80085f2 <CDC_Receive_FS+0x4e>
      return USBD_FAIL;
 80085ee:	2302      	movs	r3, #2
 80085f0:	e00d      	b.n	800860e <CDC_Receive_FS+0x6a>
  for (uint32_t i = 0; i < len; i++) {
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	3301      	adds	r3, #1
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d3e3      	bcc.n	80085c8 <CDC_Receive_FS+0x24>
    }
  }

  rxBufferHeadPos = tempHeadPos;
 8008600:	4a06      	ldr	r2, [pc, #24]	; (800861c <CDC_Receive_FS+0x78>)
 8008602:	8afb      	ldrh	r3, [r7, #22]
 8008604:	8013      	strh	r3, [r2, #0]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008606:	4804      	ldr	r0, [pc, #16]	; (8008618 <CDC_Receive_FS+0x74>)
 8008608:	f7fe fdd3 	bl	80071b2 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800860c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	2000033c 	.word	0x2000033c
 800861c:	20000fd8 	.word	0x20000fd8
 8008620:	20000dd8 	.word	0x20000dd8
 8008624:	20000fda 	.word	0x20000fda

08008628 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008638:	4b0d      	ldr	r3, [pc, #52]	; (8008670 <CDC_Transmit_FS+0x48>)
 800863a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800864a:	2301      	movs	r3, #1
 800864c:	e00b      	b.n	8008666 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800864e:	887b      	ldrh	r3, [r7, #2]
 8008650:	461a      	mov	r2, r3
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4806      	ldr	r0, [pc, #24]	; (8008670 <CDC_Transmit_FS+0x48>)
 8008656:	f7fe fd51 	bl	80070fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800865a:	4805      	ldr	r0, [pc, #20]	; (8008670 <CDC_Transmit_FS+0x48>)
 800865c:	f7fe fd7a 	bl	8007154 <USBD_CDC_TransmitPacket>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	2000033c 	.word	0x2000033c

08008674 <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

uint8_t CDC_ReadRxBuffer_FS(uint8_t* Buf, uint16_t Len) {
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	807b      	strh	r3, [r7, #2]
	uint16_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 8008680:	f000 f830 	bl	80086e4 <CDC_GetRxBufferBytesAvailable_FS>
 8008684:	4603      	mov	r3, r0
 8008686:	81bb      	strh	r3, [r7, #12]

	if (bytesAvailable < Len)
 8008688:	89ba      	ldrh	r2, [r7, #12]
 800868a:	887b      	ldrh	r3, [r7, #2]
 800868c:	429a      	cmp	r2, r3
 800868e:	d201      	bcs.n	8008694 <CDC_ReadRxBuffer_FS+0x20>
		return USB_CDC_RX_BUFFER_NO_DATA;
 8008690:	2301      	movs	r3, #1
 8008692:	e01f      	b.n	80086d4 <CDC_ReadRxBuffer_FS+0x60>

	for (uint8_t i = 0; i < Len; i++) {
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
 8008698:	e016      	b.n	80086c8 <CDC_ReadRxBuffer_FS+0x54>
		Buf[i] = rxBuffer[rxBufferTailPos];
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <CDC_ReadRxBuffer_FS+0x68>)
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	4619      	mov	r1, r3
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4413      	add	r3, r2
 80086a8:	4a0d      	ldr	r2, [pc, #52]	; (80086e0 <CDC_ReadRxBuffer_FS+0x6c>)
 80086aa:	5c52      	ldrb	r2, [r2, r1]
 80086ac:	701a      	strb	r2, [r3, #0]
		rxBufferTailPos = (uint16_t)((uint16_t)(rxBufferTailPos + 1) % HL_RX_BUFFER_SIZE);
 80086ae:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <CDC_ReadRxBuffer_FS+0x68>)
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3301      	adds	r3, #1
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086bc:	b29a      	uxth	r2, r3
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <CDC_ReadRxBuffer_FS+0x68>)
 80086c0:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < Len; i++) {
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	3301      	adds	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	887a      	ldrh	r2, [r7, #2]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d8e3      	bhi.n	800869a <CDC_ReadRxBuffer_FS+0x26>
			rxBufferTailPos = 0;
		}
		*/
	}

	return USB_CDC_RX_BUFFER_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000fda 	.word	0x20000fda
 80086e0:	20000dd8 	.word	0x20000dd8

080086e4 <CDC_GetRxBufferBytesAvailable_FS>:
  }

  return USB_CDC_RX_BUFFER_OK;
}

uint16_t CDC_GetRxBufferBytesAvailable_FS() {
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0

	// Compact version
    return (uint16_t)(rxBufferHeadPos - rxBufferTailPos) % HL_RX_BUFFER_SIZE;
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <CDC_GetRxBufferBytesAvailable_FS+0x24>)
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	4b07      	ldr	r3, [pc, #28]	; (800870c <CDC_GetRxBufferBytesAvailable_FS+0x28>)
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fc:	b29b      	uxth	r3, r3
	if (headPos >= tailPos)
		return headPos - tailPos;
	else
		return HL_RX_BUFFER_SIZE - tailPos + headPos;
	*/
}
 80086fe:	4618      	mov	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	20000fd8 	.word	0x20000fd8
 800870c:	20000fda 	.word	0x20000fda

08008710 <CDC_FlushRxBuffer_FS>:

void CDC_FlushRxBuffer_FS() {
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
    for (int i = 0; i < HL_RX_BUFFER_SIZE; i++) {
 8008716:	2300      	movs	r3, #0
 8008718:	607b      	str	r3, [r7, #4]
 800871a:	e007      	b.n	800872c <CDC_FlushRxBuffer_FS+0x1c>
    	rxBuffer[i] = 0;
 800871c:	4a0b      	ldr	r2, [pc, #44]	; (800874c <CDC_FlushRxBuffer_FS+0x3c>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < HL_RX_BUFFER_SIZE; i++) {
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3301      	adds	r3, #1
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008732:	dbf3      	blt.n	800871c <CDC_FlushRxBuffer_FS+0xc>
    }

    rxBufferHeadPos = 0;
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <CDC_FlushRxBuffer_FS+0x40>)
 8008736:	2200      	movs	r2, #0
 8008738:	801a      	strh	r2, [r3, #0]
    rxBufferTailPos = 0;
 800873a:	4b06      	ldr	r3, [pc, #24]	; (8008754 <CDC_FlushRxBuffer_FS+0x44>)
 800873c:	2200      	movs	r2, #0
 800873e:	801a      	strh	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20000dd8 	.word	0x20000dd8
 8008750:	20000fd8 	.word	0x20000fd8
 8008754:	20000fda 	.word	0x20000fda

08008758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2212      	movs	r2, #18
 8008768:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800876a:	4b03      	ldr	r3, [pc, #12]	; (8008778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20000174 	.word	0x20000174

0800877c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2204      	movs	r2, #4
 800878c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800878e:	4b03      	ldr	r3, [pc, #12]	; (800879c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	20000188 	.word	0x20000188

080087a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	4907      	ldr	r1, [pc, #28]	; (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087b6:	4808      	ldr	r0, [pc, #32]	; (80087d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087b8:	f7ff fce2 	bl	8008180 <USBD_GetString>
 80087bc:	e004      	b.n	80087c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	4904      	ldr	r1, [pc, #16]	; (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087c2:	4805      	ldr	r0, [pc, #20]	; (80087d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087c4:	f7ff fcdc 	bl	8008180 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000fdc 	.word	0x20000fdc
 80087d8:	08008f58 	.word	0x08008f58

080087dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	4904      	ldr	r1, [pc, #16]	; (80087fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087ec:	4804      	ldr	r0, [pc, #16]	; (8008800 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087ee:	f7ff fcc7 	bl	8008180 <USBD_GetString>
  return USBD_StrDesc;
 80087f2:	4b02      	ldr	r3, [pc, #8]	; (80087fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20000fdc 	.word	0x20000fdc
 8008800:	08008f70 	.word	0x08008f70

08008804 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	221a      	movs	r2, #26
 8008814:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008816:	f000 f843 	bl	80088a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800881a:	4b02      	ldr	r3, [pc, #8]	; (8008824 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	2000018c 	.word	0x2000018c

08008828 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d105      	bne.n	8008846 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4907      	ldr	r1, [pc, #28]	; (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
 800883e:	4808      	ldr	r0, [pc, #32]	; (8008860 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008840:	f7ff fc9e 	bl	8008180 <USBD_GetString>
 8008844:	e004      	b.n	8008850 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4904      	ldr	r1, [pc, #16]	; (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
 800884a:	4805      	ldr	r0, [pc, #20]	; (8008860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800884c:	f7ff fc98 	bl	8008180 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008850:	4b02      	ldr	r3, [pc, #8]	; (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20000fdc 	.word	0x20000fdc
 8008860:	08008f84 	.word	0x08008f84

08008864 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	6039      	str	r1, [r7, #0]
 800886e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	4907      	ldr	r1, [pc, #28]	; (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800887a:	4808      	ldr	r0, [pc, #32]	; (800889c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800887c:	f7ff fc80 	bl	8008180 <USBD_GetString>
 8008880:	e004      	b.n	800888c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4904      	ldr	r1, [pc, #16]	; (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008886:	4805      	ldr	r0, [pc, #20]	; (800889c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008888:	f7ff fc7a 	bl	8008180 <USBD_GetString>
  }
  return USBD_StrDesc;
 800888c:	4b02      	ldr	r3, [pc, #8]	; (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000fdc 	.word	0x20000fdc
 800889c:	08008f90 	.word	0x08008f90

080088a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088a6:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <Get_SerialNum+0x44>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088ac:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <Get_SerialNum+0x48>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088b2:	4b0e      	ldr	r3, [pc, #56]	; (80088ec <Get_SerialNum+0x4c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4413      	add	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088c6:	2208      	movs	r2, #8
 80088c8:	4909      	ldr	r1, [pc, #36]	; (80088f0 <Get_SerialNum+0x50>)
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 f814 	bl	80088f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088d0:	2204      	movs	r2, #4
 80088d2:	4908      	ldr	r1, [pc, #32]	; (80088f4 <Get_SerialNum+0x54>)
 80088d4:	68b8      	ldr	r0, [r7, #8]
 80088d6:	f000 f80f 	bl	80088f8 <IntToUnicode>
  }
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	1ffff7e8 	.word	0x1ffff7e8
 80088e8:	1ffff7ec 	.word	0x1ffff7ec
 80088ec:	1ffff7f0 	.word	0x1ffff7f0
 80088f0:	2000018e 	.word	0x2000018e
 80088f4:	2000019e 	.word	0x2000019e

080088f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800890a:	2300      	movs	r3, #0
 800890c:	75fb      	strb	r3, [r7, #23]
 800890e:	e027      	b.n	8008960 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	0f1b      	lsrs	r3, r3, #28
 8008914:	2b09      	cmp	r3, #9
 8008916:	d80b      	bhi.n	8008930 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	0f1b      	lsrs	r3, r3, #28
 800891c:	b2da      	uxtb	r2, r3
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4619      	mov	r1, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	440b      	add	r3, r1
 8008928:	3230      	adds	r2, #48	; 0x30
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	e00a      	b.n	8008946 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	0f1b      	lsrs	r3, r3, #28
 8008934:	b2da      	uxtb	r2, r3
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	4619      	mov	r1, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	440b      	add	r3, r1
 8008940:	3237      	adds	r2, #55	; 0x37
 8008942:	b2d2      	uxtb	r2, r2
 8008944:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	3301      	adds	r3, #1
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	4413      	add	r3, r2
 8008956:	2200      	movs	r2, #0
 8008958:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	3301      	adds	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
 8008960:	7dfa      	ldrb	r2, [r7, #23]
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	429a      	cmp	r2, r3
 8008966:	d3d3      	bcc.n	8008910 <IntToUnicode+0x18>
  }
}
 8008968:	bf00      	nop
 800896a:	bf00      	nop
 800896c:	371c      	adds	r7, #28
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr

08008974 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <HAL_PCD_MspInit+0x54>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d11b      	bne.n	80089be <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008986:	4b11      	ldr	r3, [pc, #68]	; (80089cc <HAL_PCD_MspInit+0x58>)
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	4a10      	ldr	r2, [pc, #64]	; (80089cc <HAL_PCD_MspInit+0x58>)
 800898c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008990:	61d3      	str	r3, [r2, #28]
 8008992:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <HAL_PCD_MspInit+0x58>)
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800899e:	2200      	movs	r2, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	2013      	movs	r0, #19
 80089a4:	f7f8 fbff 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80089a8:	2013      	movs	r0, #19
 80089aa:	f7f8 fc18 	bl	80011de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80089ae:	2200      	movs	r2, #0
 80089b0:	2100      	movs	r1, #0
 80089b2:	2014      	movs	r0, #20
 80089b4:	f7f8 fbf7 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80089b8:	2014      	movs	r0, #20
 80089ba:	f7f8 fc10 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	40005c00 	.word	0x40005c00
 80089cc:	40021000 	.word	0x40021000

080089d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f7fe fc99 	bl	800731e <USBD_LL_SetupStage>
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	440b      	add	r3, r1
 8008a14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f7fe fccb 	bl	80073b8 <USBD_LL_DataOutStage>
}
 8008a22:	bf00      	nop
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008a3c:	78fa      	ldrb	r2, [r7, #3]
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	440b      	add	r3, r1
 8008a4a:	333c      	adds	r3, #60	; 0x3c
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	78fb      	ldrb	r3, [r7, #3]
 8008a50:	4619      	mov	r1, r3
 8008a52:	f7fe fd22 	bl	800749a <USBD_LL_DataInStage>
}
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe fe32 	bl	80076d6 <USBD_LL_SOF>
}
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a82:	2301      	movs	r3, #1
 8008a84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d001      	beq.n	8008a92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a8e:	f7f8 f94d 	bl	8000d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a98:	7bfa      	ldrb	r2, [r7, #15]
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fde2 	bl	8007666 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fe fd9b 	bl	80075e4 <USBD_LL_Reset>
}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe fddc 	bl	8007684 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ad4:	4b04      	ldr	r3, [pc, #16]	; (8008ae8 <HAL_PCD_SuspendCallback+0x30>)
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	4a03      	ldr	r2, [pc, #12]	; (8008ae8 <HAL_PCD_SuspendCallback+0x30>)
 8008ada:	f043 0306 	orr.w	r3, r3, #6
 8008ade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	e000ed00 	.word	0xe000ed00

08008aec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe fdd6 	bl	80076ac <USBD_LL_Resume>
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b10:	4a28      	ldr	r2, [pc, #160]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a26      	ldr	r2, [pc, #152]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b20:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b22:	4a25      	ldr	r2, [pc, #148]	; (8008bb8 <USBD_LL_Init+0xb0>)
 8008b24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b26:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b28:	2208      	movs	r2, #8
 8008b2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b2c:	4b21      	ldr	r3, [pc, #132]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b2e:	2202      	movs	r2, #2
 8008b30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b32:	4b20      	ldr	r3, [pc, #128]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b3e:	4b1d      	ldr	r3, [pc, #116]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b44:	481b      	ldr	r0, [pc, #108]	; (8008bb4 <USBD_LL_Init+0xac>)
 8008b46:	f7f9 fd01 	bl	800254c <HAL_PCD_Init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008b50:	f7f8 f8ec 	bl	8000d2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b5a:	2318      	movs	r3, #24
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2100      	movs	r1, #0
 8008b60:	f7fb f841 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b6a:	2358      	movs	r3, #88	; 0x58
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2180      	movs	r1, #128	; 0x80
 8008b70:	f7fb f839 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b7a:	23c0      	movs	r3, #192	; 0xc0
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2181      	movs	r1, #129	; 0x81
 8008b80:	f7fb f831 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2101      	movs	r1, #1
 8008b92:	f7fb f828 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2182      	movs	r1, #130	; 0x82
 8008ba4:	f7fb f81f 	bl	8003be6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	200011dc 	.word	0x200011dc
 8008bb8:	40005c00 	.word	0x40005c00

08008bbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7f9 fdc5 	bl	8002762 <HAL_PCD_Start>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 f94e 	bl	8008e80 <USBD_Get_USB_Status>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	461a      	mov	r2, r3
 8008c00:	4603      	mov	r3, r0
 8008c02:	70fb      	strb	r3, [r7, #3]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70bb      	strb	r3, [r7, #2]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c1a:	78bb      	ldrb	r3, [r7, #2]
 8008c1c:	883a      	ldrh	r2, [r7, #0]
 8008c1e:	78f9      	ldrb	r1, [r7, #3]
 8008c20:	f7f9 ff3d 	bl	8002a9e <HAL_PCD_EP_Open>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f928 	bl	8008e80 <USBD_Get_USB_Status>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7f9 ff84 	bl	8002b6a <HAL_PCD_EP_Close>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 f909 	bl	8008e80 <USBD_Get_USB_Status>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fa f844 	bl	8002d28 <HAL_PCD_EP_SetStall>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f8ea 	bl	8008e80 <USBD_Get_USB_Status>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fa f885 	bl	8002de8 <HAL_PCD_EP_ClrStall>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f8cb 	bl	8008e80 <USBD_Get_USB_Status>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	da0c      	bge.n	8008d2e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1a:	68f9      	ldr	r1, [r7, #12]
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	440b      	add	r3, r1
 8008d28:	3302      	adds	r3, #2
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	e00b      	b.n	8008d46 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d34:	68f9      	ldr	r1, [r7, #12]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	440b      	add	r3, r1
 8008d40:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008d44:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr

08008d50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d60:	2300      	movs	r3, #0
 8008d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7f9 fe70 	bl	8002a54 <HAL_PCD_SetAddress>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 f880 	bl	8008e80 <USBD_Get_USB_Status>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b086      	sub	sp, #24
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	60f8      	str	r0, [r7, #12]
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	72fb      	strb	r3, [r7, #11]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008db0:	893b      	ldrh	r3, [r7, #8]
 8008db2:	7af9      	ldrb	r1, [r7, #11]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	f7f9 ff74 	bl	8002ca2 <HAL_PCD_EP_Transmit>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f85d 	bl	8008e80 <USBD_Get_USB_Status>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dca:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	461a      	mov	r2, r3
 8008de0:	460b      	mov	r3, r1
 8008de2:	72fb      	strb	r3, [r7, #11]
 8008de4:	4613      	mov	r3, r2
 8008de6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008df6:	893b      	ldrh	r3, [r7, #8]
 8008df8:	7af9      	ldrb	r1, [r7, #11]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	f7f9 fefd 	bl	8002bfa <HAL_PCD_EP_Receive>
 8008e00:	4603      	mov	r3, r0
 8008e02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 f83a 	bl	8008e80 <USBD_Get_USB_Status>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e10:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	460b      	mov	r3, r1
 8008e24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e2c:	78fa      	ldrb	r2, [r7, #3]
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7f9 ff1f 	bl	8002c74 <HAL_PCD_EP_GetRxCount>
 8008e36:	4603      	mov	r3, r0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e48:	4b02      	ldr	r3, [pc, #8]	; (8008e54 <USBD_static_malloc+0x14>)
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bc80      	pop	{r7}
 8008e52:	4770      	bx	lr
 8008e54:	200014c8 	.word	0x200014c8

08008e58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]

}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc80      	pop	{r7}
 8008e68:	4770      	bx	lr

08008e6a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr

08008e80 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d817      	bhi.n	8008ec4 <USBD_Get_USB_Status+0x44>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USBD_Get_USB_Status+0x1c>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ead 	.word	0x08008ead
 8008ea0:	08008eb3 	.word	0x08008eb3
 8008ea4:	08008eb9 	.word	0x08008eb9
 8008ea8:	08008ebf 	.word	0x08008ebf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb0:	e00b      	b.n	8008eca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb6:	e008      	b.n	8008eca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	73fb      	strb	r3, [r7, #15]
    break;
 8008ebc:	e005      	b.n	8008eca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec2:	e002      	b.n	8008eca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec8:	bf00      	nop
  }
  return usb_status;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop

08008ed8 <__libc_init_array>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	2600      	movs	r6, #0
 8008edc:	4d0c      	ldr	r5, [pc, #48]	; (8008f10 <__libc_init_array+0x38>)
 8008ede:	4c0d      	ldr	r4, [pc, #52]	; (8008f14 <__libc_init_array+0x3c>)
 8008ee0:	1b64      	subs	r4, r4, r5
 8008ee2:	10a4      	asrs	r4, r4, #2
 8008ee4:	42a6      	cmp	r6, r4
 8008ee6:	d109      	bne.n	8008efc <__libc_init_array+0x24>
 8008ee8:	f000 f822 	bl	8008f30 <_init>
 8008eec:	2600      	movs	r6, #0
 8008eee:	4d0a      	ldr	r5, [pc, #40]	; (8008f18 <__libc_init_array+0x40>)
 8008ef0:	4c0a      	ldr	r4, [pc, #40]	; (8008f1c <__libc_init_array+0x44>)
 8008ef2:	1b64      	subs	r4, r4, r5
 8008ef4:	10a4      	asrs	r4, r4, #2
 8008ef6:	42a6      	cmp	r6, r4
 8008ef8:	d105      	bne.n	8008f06 <__libc_init_array+0x2e>
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f00:	4798      	blx	r3
 8008f02:	3601      	adds	r6, #1
 8008f04:	e7ee      	b.n	8008ee4 <__libc_init_array+0xc>
 8008f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0a:	4798      	blx	r3
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	e7f2      	b.n	8008ef6 <__libc_init_array+0x1e>
 8008f10:	08008fb8 	.word	0x08008fb8
 8008f14:	08008fb8 	.word	0x08008fb8
 8008f18:	08008fb8 	.word	0x08008fb8
 8008f1c:	08008fbc 	.word	0x08008fbc

08008f20 <memset>:
 8008f20:	4603      	mov	r3, r0
 8008f22:	4402      	add	r2, r0
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d100      	bne.n	8008f2a <memset+0xa>
 8008f28:	4770      	bx	lr
 8008f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2e:	e7f9      	b.n	8008f24 <memset+0x4>

08008f30 <_init>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	bf00      	nop
 8008f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f36:	bc08      	pop	{r3}
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4770      	bx	lr

08008f3c <_fini>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	bf00      	nop
 8008f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f42:	bc08      	pop	{r3}
 8008f44:	469e      	mov	lr, r3
 8008f46:	4770      	bx	lr
