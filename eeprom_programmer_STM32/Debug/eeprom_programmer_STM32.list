
eeprom_programmer_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e7c  08008e7c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008e7c  08008e7c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e7c  08008e7c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033bc  20000180  08009004  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000353c  08009004  0002353c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9de  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c62  00000000  00000000  0003db87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000417f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00042698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aedc  00000000  00000000  000433d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001456b  00000000  00000000  0005e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000876e3  00000000  00000000  00072817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9efa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f4  00000000  00000000  000f9f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08008de0 	.word	0x08008de0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08008de0 	.word	0x08008de0

0800014c <sendCommandStart>:





int sendCommandStart() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	return serial_write(cmd_startxfer, 3);
 8000150:	2103      	movs	r1, #3
 8000152:	4803      	ldr	r0, [pc, #12]	; (8000160 <sendCommandStart+0x14>)
 8000154:	f000 fd1c 	bl	8000b90 <serial_write>
 8000158:	4603      	mov	r3, r0
}
 800015a:	4618      	mov	r0, r3
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	08008e5c 	.word	0x08008e5c

08000164 <sendCommandEnd>:
int sendCommandEnd() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	return serial_write(cmd_endxfer, 3);
 8000168:	2103      	movs	r1, #3
 800016a:	4803      	ldr	r0, [pc, #12]	; (8000178 <sendCommandEnd+0x14>)
 800016c:	f000 fd10 	bl	8000b90 <serial_write>
 8000170:	4603      	mov	r3, r0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	08008e60 	.word	0x08008e60

0800017c <sendCommand>:

int sendCommand(uint8_t cmd) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	return sendPackage(cmd, NULL, 0);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2200      	movs	r2, #0
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f805 	bl	800019c <sendPackage>
 8000192:	4603      	mov	r3, r0
}
 8000194:	4618      	mov	r0, r3
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}

0800019c <sendPackage>:

int sendPackage(uint8_t cmd, uint8_t *data, uint16_t len) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	6039      	str	r1, [r7, #0]
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	4613      	mov	r3, r2
 80001aa:	80bb      	strh	r3, [r7, #4]

	SEND(sendCommandStart());
 80001ac:	f7ff ffce 	bl	800014c <sendCommandStart>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <sendPackage+0x1e>
 80001b6:	2301      	movs	r3, #1
 80001b8:	e021      	b.n	80001fe <sendPackage+0x62>
	SEND(serial_write(&cmd, 1));
 80001ba:	1dfb      	adds	r3, r7, #7
 80001bc:	2101      	movs	r1, #1
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fce6 	bl	8000b90 <serial_write>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <sendPackage+0x32>
 80001ca:	2301      	movs	r3, #1
 80001cc:	e017      	b.n	80001fe <sendPackage+0x62>

	if(data != NULL && len != 0) {
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00c      	beq.n	80001ee <sendPackage+0x52>
 80001d4:	88bb      	ldrh	r3, [r7, #4]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d009      	beq.n	80001ee <sendPackage+0x52>
		SEND(serial_write(data, len));
 80001da:	88bb      	ldrh	r3, [r7, #4]
 80001dc:	4619      	mov	r1, r3
 80001de:	6838      	ldr	r0, [r7, #0]
 80001e0:	f000 fcd6 	bl	8000b90 <serial_write>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <sendPackage+0x52>
 80001ea:	2301      	movs	r3, #1
 80001ec:	e007      	b.n	80001fe <sendPackage+0x62>
	}

	SEND(sendCommandEnd());
 80001ee:	f7ff ffb9 	bl	8000164 <sendCommandEnd>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <sendPackage+0x60>
 80001f8:	2301      	movs	r3, #1
 80001fa:	e000      	b.n	80001fe <sendPackage+0x62>

	return 0;
 80001fc:	2300      	movs	r3, #0
}
 80001fe:	4618      	mov	r0, r3
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}

08000206 <sendErr>:

int sendErr(uint8_t status) {
 8000206:	b580      	push	{r7, lr}
 8000208:	b082      	sub	sp, #8
 800020a:	af00      	add	r7, sp, #0
 800020c:	4603      	mov	r3, r0
 800020e:	71fb      	strb	r3, [r7, #7]
	return sendPackage(cmd_err, &status, 1);
 8000210:	1dfb      	adds	r3, r7, #7
 8000212:	2201      	movs	r2, #1
 8000214:	4619      	mov	r1, r3
 8000216:	20ff      	movs	r0, #255	; 0xff
 8000218:	f7ff ffc0 	bl	800019c <sendPackage>
 800021c:	4603      	mov	r3, r0
}
 800021e:	4618      	mov	r0, r3
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <sendOK>:

int sendOK(void) {
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
	return sendCommand(cmd_ok);
 800022a:	2010      	movs	r0, #16
 800022c:	f7ff ffa6 	bl	800017c <sendCommand>
 8000230:	4603      	mov	r3, r0
}
 8000232:	4618      	mov	r0, r3
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <receivePackage>:

HAL_StatusTypeDef receivePackage(package_t *pkg) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	uint8_t *buf = recvbuffer;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <receivePackage+0xc0>)
 8000242:	60fb      	str	r3, [r7, #12]

	if(pkg == NULL)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d101      	bne.n	800024e <receivePackage+0x16>
		return HAL_ERROR;
 800024a:	2301      	movs	r3, #1
 800024c:	e050      	b.n	80002f0 <receivePackage+0xb8>

	RECV(serial_read(buf, 4));
 800024e:	2104      	movs	r1, #4
 8000250:	68f8      	ldr	r0, [r7, #12]
 8000252:	f000 fce3 	bl	8000c1c <serial_read>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <receivePackage+0x28>
 800025c:	2301      	movs	r3, #1
 800025e:	e047      	b.n	80002f0 <receivePackage+0xb8>

	if(check_start(buf) != 0)
 8000260:	68f8      	ldr	r0, [r7, #12]
 8000262:	f000 f8a7 	bl	80003b4 <check_start>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <receivePackage+0x38>
		return HAL_ERROR;
 800026c:	2301      	movs	r3, #1
 800026e:	e03f      	b.n	80002f0 <receivePackage+0xb8>

	pkg->cmd = buf[3];
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	78da      	ldrb	r2, [r3, #3]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	701a      	strb	r2, [r3, #0]
	pkg->datalen = cmdHasData(pkg->cmd);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f83f 	bl	8000300 <cmdHasData>
 8000282:	4603      	mov	r3, r0
 8000284:	b29a      	uxth	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	805a      	strh	r2, [r3, #2]
	pkg->data = NULL;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]

	if(pkg->datalen != 0) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	885b      	ldrh	r3, [r3, #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d015      	beq.n	80002c4 <receivePackage+0x8c>

		if((pkg->cmd & 0xF0) == 0x50) // if receiving whole memory
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002a0:	2b50      	cmp	r3, #80	; 0x50
 80002a2:	d101      	bne.n	80002a8 <receivePackage+0x70>
			buf = membuffer;
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <receivePackage+0xc4>)
 80002a6:	60fb      	str	r3, [r7, #12]

		RECV(serial_read(buf, pkg->datalen));
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	885b      	ldrh	r3, [r3, #2]
 80002ac:	4619      	mov	r1, r3
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f000 fcb4 	bl	8000c1c <serial_read>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <receivePackage+0x86>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e018      	b.n	80002f0 <receivePackage+0xb8>
		pkg->data = buf;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	605a      	str	r2, [r3, #4]
	}

	uint8_t buf2[3];
	RECV(serial_read(buf2, 3));
 80002c4:	f107 0308 	add.w	r3, r7, #8
 80002c8:	2103      	movs	r1, #3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fca6 	bl	8000c1c <serial_read>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <receivePackage+0xa2>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00a      	b.n	80002f0 <receivePackage+0xb8>
	if(check_end(buf2) != 0)
 80002da:	f107 0308 	add.w	r3, r7, #8
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f878 	bl	80003d4 <check_end>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <receivePackage+0xb6>
		return HAL_ERROR;
 80002ea:	2301      	movs	r3, #1
 80002ec:	e000      	b.n	80002f0 <receivePackage+0xb8>

	return HAL_OK;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200003d8 	.word	0x200003d8
 80002fc:	2000045c 	.word	0x2000045c

08000300 <cmdHasData>:

int cmdHasData(uint8_t command) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
	switch(command) {
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2bff      	cmp	r3, #255	; 0xff
 800030e:	d04a      	beq.n	80003a6 <cmdHasData+0xa6>
 8000310:	2bff      	cmp	r3, #255	; 0xff
 8000312:	dc4a      	bgt.n	80003aa <cmdHasData+0xaa>
 8000314:	2b52      	cmp	r3, #82	; 0x52
 8000316:	dc48      	bgt.n	80003aa <cmdHasData+0xaa>
 8000318:	2b40      	cmp	r3, #64	; 0x40
 800031a:	da04      	bge.n	8000326 <cmdHasData+0x26>
 800031c:	2b01      	cmp	r3, #1
 800031e:	d02f      	beq.n	8000380 <cmdHasData+0x80>
 8000320:	2b10      	cmp	r3, #16
 8000322:	d03e      	beq.n	80003a2 <cmdHasData+0xa2>
 8000324:	e041      	b.n	80003aa <cmdHasData+0xaa>
 8000326:	3b40      	subs	r3, #64	; 0x40
 8000328:	2b12      	cmp	r3, #18
 800032a:	d83e      	bhi.n	80003aa <cmdHasData+0xaa>
 800032c:	a201      	add	r2, pc, #4	; (adr r2, 8000334 <cmdHasData+0x34>)
 800032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000332:	bf00      	nop
 8000334:	08000381 	.word	0x08000381
 8000338:	08000381 	.word	0x08000381
 800033c:	08000381 	.word	0x08000381
 8000340:	080003ab 	.word	0x080003ab
 8000344:	080003ab 	.word	0x080003ab
 8000348:	080003ab 	.word	0x080003ab
 800034c:	080003ab 	.word	0x080003ab
 8000350:	080003ab 	.word	0x080003ab
 8000354:	080003ab 	.word	0x080003ab
 8000358:	080003ab 	.word	0x080003ab
 800035c:	080003ab 	.word	0x080003ab
 8000360:	080003ab 	.word	0x080003ab
 8000364:	080003ab 	.word	0x080003ab
 8000368:	080003ab 	.word	0x080003ab
 800036c:	080003ab 	.word	0x080003ab
 8000370:	080003ab 	.word	0x080003ab
 8000374:	08000385 	.word	0x08000385
 8000378:	0800038f 	.word	0x0800038f
 800037c:	08000399 	.word	0x08000399

	case cmd_init:

	case cmd_readmem16:
	case cmd_readmemx64:
	case cmd_readmem256: return 0;
 8000380:	2300      	movs	r3, #0
 8000382:	e013      	b.n	80003ac <cmdHasData+0xac>

	case cmd_writemem16: return getMemSize(MEMTYPE_24LC16);
 8000384:	2000      	movs	r0, #0
 8000386:	f000 fb29 	bl	80009dc <getMemSize>
 800038a:	4603      	mov	r3, r0
 800038c:	e00e      	b.n	80003ac <cmdHasData+0xac>
	case cmd_writememx64: return getMemSize(MEMTYPE_X24645);
 800038e:	2001      	movs	r0, #1
 8000390:	f000 fb24 	bl	80009dc <getMemSize>
 8000394:	4603      	mov	r3, r0
 8000396:	e009      	b.n	80003ac <cmdHasData+0xac>
	case cmd_writemem256: return getMemSize(MEMTYPE_24LC256); // will have to split this
 8000398:	2002      	movs	r0, #2
 800039a:	f000 fb1f 	bl	80009dc <getMemSize>
 800039e:	4603      	mov	r3, r0
 80003a0:	e004      	b.n	80003ac <cmdHasData+0xac>

	case cmd_ok:  return 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e002      	b.n	80003ac <cmdHasData+0xac>
	case cmd_err: return 1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	e000      	b.n	80003ac <cmdHasData+0xac>

	default: return 0;
 80003aa:	2300      	movs	r3, #0
	}
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <check_start>:

int check_start(uint8_t *p) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	return memcmp(p, cmd_startxfer, 3);
 80003bc:	2203      	movs	r2, #3
 80003be:	4904      	ldr	r1, [pc, #16]	; (80003d0 <check_start+0x1c>)
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f008 fcf7 	bl	8008db4 <memcmp>
 80003c6:	4603      	mov	r3, r0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	08008e5c 	.word	0x08008e5c

080003d4 <check_end>:

int check_end(uint8_t *p) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	return memcmp(p, cmd_endxfer, 3);
 80003dc:	2203      	movs	r2, #3
 80003de:	4904      	ldr	r1, [pc, #16]	; (80003f0 <check_end+0x1c>)
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f008 fce7 	bl	8008db4 <memcmp>
 80003e6:	4603      	mov	r3, r0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	08008e60 	.word	0x08008e60

080003f4 <uart_fsm>:


/*********************************************************/

void uart_fsm(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
	static int st = 0, requested_mem;
	static uint32_t retries = 0;
	static package_t package;
	HAL_StatusTypeDef ret;

	switch (st)
 80003fa:	4b7a      	ldr	r3, [pc, #488]	; (80005e4 <uart_fsm+0x1f0>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2bf1      	cmp	r3, #241	; 0xf1
 8000400:	f000 80df 	beq.w	80005c2 <uart_fsm+0x1ce>
 8000404:	2bf1      	cmp	r3, #241	; 0xf1
 8000406:	f300 80e0 	bgt.w	80005ca <uart_fsm+0x1d6>
 800040a:	2b52      	cmp	r3, #82	; 0x52
 800040c:	f300 80dd 	bgt.w	80005ca <uart_fsm+0x1d6>
 8000410:	2b40      	cmp	r3, #64	; 0x40
 8000412:	da0a      	bge.n	800042a <uart_fsm+0x36>
 8000414:	2b02      	cmp	r3, #2
 8000416:	f000 80cb 	beq.w	80005b0 <uart_fsm+0x1bc>
 800041a:	2b02      	cmp	r3, #2
 800041c:	f300 80d5 	bgt.w	80005ca <uart_fsm+0x1d6>
 8000420:	2b00      	cmp	r3, #0
 8000422:	d02f      	beq.n	8000484 <uart_fsm+0x90>
 8000424:	2b01      	cmp	r3, #1
 8000426:	d050      	beq.n	80004ca <uart_fsm+0xd6>
 8000428:	e0cf      	b.n	80005ca <uart_fsm+0x1d6>
 800042a:	3b40      	subs	r3, #64	; 0x40
 800042c:	2b12      	cmp	r3, #18
 800042e:	f200 80cc 	bhi.w	80005ca <uart_fsm+0x1d6>
 8000432:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <uart_fsm+0x44>)
 8000434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000438:	08000549 	.word	0x08000549
 800043c:	08000549 	.word	0x08000549
 8000440:	08000577 	.word	0x08000577
 8000444:	080005cb 	.word	0x080005cb
 8000448:	080005cb 	.word	0x080005cb
 800044c:	080005cb 	.word	0x080005cb
 8000450:	080005cb 	.word	0x080005cb
 8000454:	080005cb 	.word	0x080005cb
 8000458:	080005cb 	.word	0x080005cb
 800045c:	080005cb 	.word	0x080005cb
 8000460:	080005cb 	.word	0x080005cb
 8000464:	080005cb 	.word	0x080005cb
 8000468:	080005cb 	.word	0x080005cb
 800046c:	080005cb 	.word	0x080005cb
 8000470:	080005cb 	.word	0x080005cb
 8000474:	080005cb 	.word	0x080005cb
 8000478:	0800057f 	.word	0x0800057f
 800047c:	0800057f 	.word	0x0800057f
 8000480:	080005a9 	.word	0x080005a9
	{
	case 0:
		led_off();
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800048a:	4857      	ldr	r0, [pc, #348]	; (80005e8 <uart_fsm+0x1f4>)
 800048c:	f001 f8ee 	bl	800166c <HAL_GPIO_WritePin>
		// try to establish connection with serial port server
		ret = receivePackage(&package);
 8000490:	4856      	ldr	r0, [pc, #344]	; (80005ec <uart_fsm+0x1f8>)
 8000492:	f7ff fed1 	bl	8000238 <receivePackage>
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]

		if (ret == HAL_OK) {
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	2b00      	cmp	r3, #0
 800049e:	f040 8098 	bne.w	80005d2 <uart_fsm+0x1de>
			if(package.cmd == cmd_init) {
 80004a2:	4b52      	ldr	r3, [pc, #328]	; (80005ec <uart_fsm+0x1f8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	f040 8093 	bne.w	80005d2 <uart_fsm+0x1de>
				sendCommand(cmd_init);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff fe65 	bl	800017c <sendCommand>
				led_on();
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b8:	484b      	ldr	r0, [pc, #300]	; (80005e8 <uart_fsm+0x1f4>)
 80004ba:	f001 f8d7 	bl	800166c <HAL_GPIO_WritePin>
				st++;
 80004be:	4b49      	ldr	r3, [pc, #292]	; (80005e4 <uart_fsm+0x1f0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	4a47      	ldr	r2, [pc, #284]	; (80005e4 <uart_fsm+0x1f0>)
 80004c6:	6013      	str	r3, [r2, #0]
			}
		}
		break;
 80004c8:	e083      	b.n	80005d2 <uart_fsm+0x1de>
	case 1:

		ret = receivePackage(&package);
 80004ca:	4848      	ldr	r0, [pc, #288]	; (80005ec <uart_fsm+0x1f8>)
 80004cc:	f7ff feb4 	bl	8000238 <receivePackage>
 80004d0:	4603      	mov	r3, r0
 80004d2:	71fb      	strb	r3, [r7, #7]
		if(ret != HAL_OK) {
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00f      	beq.n	80004fa <uart_fsm+0x106>
			if(++retries >= 5) {
 80004da:	4b45      	ldr	r3, [pc, #276]	; (80005f0 <uart_fsm+0x1fc>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	4a43      	ldr	r2, [pc, #268]	; (80005f0 <uart_fsm+0x1fc>)
 80004e2:	6013      	str	r3, [r2, #0]
 80004e4:	4b42      	ldr	r3, [pc, #264]	; (80005f0 <uart_fsm+0x1fc>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d974      	bls.n	80005d6 <uart_fsm+0x1e2>
				retries = 0;
 80004ec:	4b40      	ldr	r3, [pc, #256]	; (80005f0 <uart_fsm+0x1fc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
				st = 0;
 80004f2:	4b3c      	ldr	r3, [pc, #240]	; (80005e4 <uart_fsm+0x1f0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
			}
			break;
 80004f8:	e06d      	b.n	80005d6 <uart_fsm+0x1e2>
		}
		retries = 0;
 80004fa:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <uart_fsm+0x1fc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
		st = package.cmd;
 8000500:	4b3a      	ldr	r3, [pc, #232]	; (80005ec <uart_fsm+0x1f8>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <uart_fsm+0x1f0>)
 8000508:	601a      	str	r2, [r3, #0]

		int tmp = st & 0xF0;
 800050a:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <uart_fsm+0x1f0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000512:	603b      	str	r3, [r7, #0]
		if(tmp == 0x40 || tmp == 0x50) { // if requesting memory w/r
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	2b40      	cmp	r3, #64	; 0x40
 8000518:	d002      	beq.n	8000520 <uart_fsm+0x12c>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2b50      	cmp	r3, #80	; 0x50
 800051e:	d15c      	bne.n	80005da <uart_fsm+0x1e6>

			requested_mem = st & 0x0F;
 8000520:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <uart_fsm+0x1f0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f003 030f 	and.w	r3, r3, #15
 8000528:	4a32      	ldr	r2, [pc, #200]	; (80005f4 <uart_fsm+0x200>)
 800052a:	6013      	str	r3, [r2, #0]
			if(requested_mem != g_memtype) {
 800052c:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <uart_fsm+0x204>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <uart_fsm+0x200>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d04f      	beq.n	80005da <uart_fsm+0x1e6>
				sendErr(2);
 800053a:	2002      	movs	r0, #2
 800053c:	f7ff fe63 	bl	8000206 <sendErr>
				st = 1;
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <uart_fsm+0x1f0>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
			}
		}

		break;
 8000546:	e048      	b.n	80005da <uart_fsm+0x1e6>

	case cmd_readmem16:  // this isn't a state, unless I had used interruptions
	case cmd_readmemx64:
		// read memory and send back the content
		if(readMemory(membuffer) == HAL_OK) {
 8000548:	482c      	ldr	r0, [pc, #176]	; (80005fc <uart_fsm+0x208>)
 800054a:	f000 fab5 	bl	8000ab8 <readMemory>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d109      	bne.n	8000568 <uart_fsm+0x174>
			sendPackage(package.cmd, membuffer, g_memsize);
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <uart_fsm+0x1f8>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4a29      	ldr	r2, [pc, #164]	; (8000600 <uart_fsm+0x20c>)
 800055a:	6812      	ldr	r2, [r2, #0]
 800055c:	b292      	uxth	r2, r2
 800055e:	4927      	ldr	r1, [pc, #156]	; (80005fc <uart_fsm+0x208>)
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe1b 	bl	800019c <sendPackage>
 8000566:	e002      	b.n	800056e <uart_fsm+0x17a>
		}
		else {
			sendErr(10);
 8000568:	200a      	movs	r0, #10
 800056a:	f7ff fe4c 	bl	8000206 <sendErr>
		}
		st = 1;
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <uart_fsm+0x1f0>)
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
		break;
 8000574:	e032      	b.n	80005dc <uart_fsm+0x1e8>

	case cmd_readmem256:
		st = 1;
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <uart_fsm+0x1f0>)
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
		break;
 800057c:	e02e      	b.n	80005dc <uart_fsm+0x1e8>

	case cmd_writemem16:
	case cmd_writememx64:
		// write to eeprom the content received
		if(saveMemory(package.data) != HAL_OK) {
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <uart_fsm+0x1f8>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fac2 	bl	8000b0c <saveMemory>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <uart_fsm+0x1a8>
			sendErr(st);
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <uart_fsm+0x1f0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fe36 	bl	8000206 <sendErr>
 800059a:	e001      	b.n	80005a0 <uart_fsm+0x1ac>
		}
		else {
			sendOK();
 800059c:	f7ff fe43 	bl	8000226 <sendOK>
		}
		st = 1;
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <uart_fsm+0x1f0>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
		break;
 80005a6:	e019      	b.n	80005dc <uart_fsm+0x1e8>

	case cmd_writemem256:
		st = 1;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <uart_fsm+0x1f0>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
		break;
 80005ae:	e015      	b.n	80005dc <uart_fsm+0x1e8>


	case cmd_ping:
		sendPackage(cmd_ping, NULL,0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2100      	movs	r1, #0
 80005b4:	2002      	movs	r0, #2
 80005b6:	f7ff fdf1 	bl	800019c <sendPackage>
		st = 1;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <uart_fsm+0x1f0>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
		break;
 80005c0:	e00c      	b.n	80005dc <uart_fsm+0x1e8>

	case cmd_disconnect:
		st = 0;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <uart_fsm+0x1f0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
		break;
 80005c8:	e008      	b.n	80005dc <uart_fsm+0x1e8>

	default:
		st=0;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <uart_fsm+0x1f0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		break;
 80005d0:	e004      	b.n	80005dc <uart_fsm+0x1e8>
		break;
 80005d2:	bf00      	nop
 80005d4:	e002      	b.n	80005dc <uart_fsm+0x1e8>
			break;
 80005d6:	bf00      	nop
 80005d8:	e000      	b.n	80005dc <uart_fsm+0x1e8>
		break;
 80005da:	bf00      	nop
	}
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000019c 	.word	0x2000019c
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	200001a0 	.word	0x200001a0
 80005f0:	200001a8 	.word	0x200001a8
 80005f4:	200001ac 	.word	0x200001ac
 80005f8:	20000000 	.word	0x20000000
 80005fc:	2000045c 	.word	0x2000045c
 8000600:	20000458 	.word	0x20000458

08000604 <MEMX24645_write_page>:
// 24LC16B answers to address 0x50 to 0x57
// X24645 answers to address 0x00 to 0x1F


int MEMX24645_write_page(const uint8_t *page, uint16_t register_address)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af04      	add	r7, sp, #16
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	807b      	strh	r3, [r7, #2]
	int ret = HAL_OK, attempts = 100; // just to be sure... it fails with 10
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	613b      	str	r3, [r7, #16]
	uint8_t slave_address = (memx24645_addr7 | ((register_address >> 8) & 0x1FU)) << 1U;
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b29b      	uxth	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	f003 031f 	and.w	r3, r3, #31
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MEMX24645_write_page+0x70>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4313      	orrs	r3, r2
 800062c:	b2db      	uxtb	r3, r3
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_address = register_address & 0xFFU;
 8000632:	887b      	ldrh	r3, [r7, #2]
 8000634:	73bb      	strb	r3, [r7, #14]

	while(--attempts &&
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	3b01      	subs	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d013      	beq.n	800066a <MEMX24645_write_page+0x66>
		  (ret=HAL_I2C_Mem_Write(&hi2c2, slave_address, byte_address, 1, (uint8_t *)page, 32, 5000)) != HAL_OK);
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	b299      	uxth	r1, r3
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	b29a      	uxth	r2, r3
 800064a:	f241 3388 	movw	r3, #5000	; 0x1388
 800064e:	9302      	str	r3, [sp, #8]
 8000650:	2320      	movs	r3, #32
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	4807      	ldr	r0, [pc, #28]	; (8000678 <MEMX24645_write_page+0x74>)
 800065c:	f001 f962 	bl	8001924 <HAL_I2C_Mem_Write>
 8000660:	4603      	mov	r3, r0
 8000662:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1e5      	bne.n	8000636 <MEMX24645_write_page+0x32>

	return ret;
 800066a:	697b      	ldr	r3, [r7, #20]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001b0 	.word	0x200001b0
 8000678:	2000245c 	.word	0x2000245c

0800067c <MEMX24645_write>:

int MEMX24645_write(const uint8_t *buffer, uint16_t register_base, uint16_t size)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
 8000688:	4613      	mov	r3, r2
 800068a:	803b      	strh	r3, [r7, #0]
	int ret = HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
	uint16_t register_top = register_base + size;
 8000690:	887a      	ldrh	r2, [r7, #2]
 8000692:	883b      	ldrh	r3, [r7, #0]
 8000694:	4413      	add	r3, r2
 8000696:	81fb      	strh	r3, [r7, #14]
	uint32_t register_address;

	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	e00f      	b.n	80006be <MEMX24645_write+0x42>
	{
		if( (ret=MEMX24645_write_page(&buffer[register_address], register_address)) != HAL_OK)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	4413      	add	r3, r2
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	b292      	uxth	r2, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffaa 	bl	8000604 <MEMX24645_write_page>
 80006b0:	6178      	str	r0, [r7, #20]
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d107      	bne.n	80006c8 <MEMX24645_write+0x4c>
	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3320      	adds	r3, #32
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d3eb      	bcc.n	800069e <MEMX24645_write+0x22>
 80006c6:	e000      	b.n	80006ca <MEMX24645_write+0x4e>
			break;
 80006c8:	bf00      	nop
	}

	return ret;
 80006ca:	697b      	ldr	r3, [r7, #20]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MEMX24645_write_reg>:

int MEMX24645_write_reg(uint8_t reg, uint16_t register_address)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af04      	add	r7, sp, #16
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	80bb      	strh	r3, [r7, #4]
	int ret = HAL_OK, attempts = 10;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	230a      	movs	r3, #10
 80006ea:	613b      	str	r3, [r7, #16]
	uint8_t slave_address = (memx24645_addr7 | ((register_address >> 8) & 0x1FU)) << 1U;
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f003 031f 	and.w	r3, r3, #31
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MEMX24645_write_reg+0x74>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4313      	orrs	r3, r2
 8000700:	b2db      	uxtb	r3, r3
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_address = register_address & 0xFFU;
 8000706:	88bb      	ldrh	r3, [r7, #4]
 8000708:	73bb      	strb	r3, [r7, #14]

	while(--attempts &&
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	3b01      	subs	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d012      	beq.n	800073c <MEMX24645_write_reg+0x68>
		  (ret=HAL_I2C_Mem_Write(&hi2c2, slave_address, byte_address, 1, &reg, 1, 100)) != HAL_OK);
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	b299      	uxth	r1, r3
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	b29a      	uxth	r2, r3
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	9302      	str	r3, [sp, #8]
 8000722:	2301      	movs	r3, #1
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <MEMX24645_write_reg+0x78>)
 800072e:	f001 f8f9 	bl	8001924 <HAL_I2C_Mem_Write>
 8000732:	4603      	mov	r3, r0
 8000734:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1e6      	bne.n	800070a <MEMX24645_write_reg+0x36>

	return ret;
 800073c:	697b      	ldr	r3, [r7, #20]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200001b0 	.word	0x200001b0
 800074c:	2000245c 	.word	0x2000245c

08000750 <MEMX24645_read_page>:

	return ret;
}

int MEMX24645_read_page(uint8_t *page, uint16_t register_address)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af04      	add	r7, sp, #16
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	807b      	strh	r3, [r7, #2]
	int ret = HAL_OK, attempts = 10;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	230a      	movs	r3, #10
 8000762:	613b      	str	r3, [r7, #16]
	uint8_t slave_address = (memx24645_addr7 | ((register_address >> 8) & 0x1FU)) << 1U;
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 031f 	and.w	r3, r3, #31
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MEMX24645_read_page+0x70>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4313      	orrs	r3, r2
 8000778:	b2db      	uxtb	r3, r3
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_address = register_address & 0xFFU;
 800077e:	887b      	ldrh	r3, [r7, #2]
 8000780:	73bb      	strb	r3, [r7, #14]

	while(--attempts &&
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	3b01      	subs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d013      	beq.n	80007b6 <MEMX24645_read_page+0x66>
		  ((ret=HAL_I2C_Mem_Read(&hi2c2, slave_address, byte_address, 1, page, 32, 1000)) != HAL_OK) );
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	b299      	uxth	r1, r3
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	b29a      	uxth	r2, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	9302      	str	r3, [sp, #8]
 800079c:	2320      	movs	r3, #32
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MEMX24645_read_page+0x74>)
 80007a8:	f001 f9b6 	bl	8001b18 <HAL_I2C_Mem_Read>
 80007ac:	4603      	mov	r3, r0
 80007ae:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1e5      	bne.n	8000782 <MEMX24645_read_page+0x32>

	return ret;
 80007b6:	697b      	ldr	r3, [r7, #20]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001b0 	.word	0x200001b0
 80007c4:	2000245c 	.word	0x2000245c

080007c8 <MEMX24645_read>:

int MEMX24645_read(uint8_t *buf, uint16_t register_base, uint16_t size)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	807b      	strh	r3, [r7, #2]
 80007d4:	4613      	mov	r3, r2
 80007d6:	803b      	strh	r3, [r7, #0]
	int ret = HAL_OK;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
	uint16_t register_top = register_base + size;
 80007dc:	887a      	ldrh	r2, [r7, #2]
 80007de:	883b      	ldrh	r3, [r7, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	81fb      	strh	r3, [r7, #14]
	uint32_t register_address;

	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	e00f      	b.n	800080a <MEMX24645_read+0x42>
	{
		if ((ret=MEMX24645_read_page(&buf[register_address], register_address)) != HAL_OK)
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	4413      	add	r3, r2
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	b292      	uxth	r2, r2
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ffaa 	bl	8000750 <MEMX24645_read_page>
 80007fc:	6178      	str	r0, [r7, #20]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d107      	bne.n	8000814 <MEMX24645_read+0x4c>
	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3320      	adds	r3, #32
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	429a      	cmp	r2, r3
 8000810:	d3eb      	bcc.n	80007ea <MEMX24645_read+0x22>
 8000812:	e000      	b.n	8000816 <MEMX24645_read+0x4e>
			break;
 8000814:	bf00      	nop
	}

	return ret;
 8000816:	697b      	ldr	r3, [r7, #20]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <MEM24LC16_write_page>:
}
#endif

// 24LC16 MEMORY PAGES ARE ONLY 16 BYTES LONG !!!
int MEM24LC16_write_page(const uint8_t *page, uint16_t register_address)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af04      	add	r7, sp, #16
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	807b      	strh	r3, [r7, #2]
	int ret = HAL_OK, attempts = 120; // TODO: tune attempts value
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	2378      	movs	r3, #120	; 0x78
 8000832:	613b      	str	r3, [r7, #16]
	uint8_t control_byte = (mem24lc16_addr7 | ((register_address >> 8) & 0x07U)) << 1U;
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	0a1b      	lsrs	r3, r3, #8
 8000838:	b29b      	uxth	r3, r3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MEM24LC16_write_page+0x70>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4313      	orrs	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
	uint8_t word_address = register_address & 0xFFU;
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	73bb      	strb	r3, [r7, #14]


	while(--attempts &&
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3b01      	subs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d013      	beq.n	8000886 <MEM24LC16_write_page+0x66>
		  ((ret=HAL_I2C_Mem_Write(&hi2c2, control_byte, word_address, 1, (uint8_t *)page, 16, 1000)) != HAL_OK) );
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	b299      	uxth	r1, r3
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	b29a      	uxth	r2, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	2310      	movs	r3, #16
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <MEM24LC16_write_page+0x74>)
 8000878:	f001 f854 	bl	8001924 <HAL_I2C_Mem_Write>
 800087c:	4603      	mov	r3, r0
 800087e:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1e5      	bne.n	8000852 <MEM24LC16_write_page+0x32>

	return ret;
 8000886:	697b      	ldr	r3, [r7, #20]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000001 	.word	0x20000001
 8000894:	2000245c 	.word	0x2000245c

08000898 <MEM24LC16_write>:

int MEM24LC16_write(const uint8_t *buffer, uint16_t register_base, uint16_t size)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	807b      	strh	r3, [r7, #2]
 80008a4:	4613      	mov	r3, r2
 80008a6:	803b      	strh	r3, [r7, #0]
	int ret = HAL_OK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
	uint16_t register_top = register_base + size;
 80008ac:	887a      	ldrh	r2, [r7, #2]
 80008ae:	883b      	ldrh	r3, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	81fb      	strh	r3, [r7, #14]
	uint32_t register_address;

	for(register_address = register_base; register_address < register_top; register_address += 16)
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	e00f      	b.n	80008da <MEM24LC16_write+0x42>
	{
		if( (ret=MEM24LC16_write_page(&buffer[register_address], register_address)) != HAL_OK)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	4413      	add	r3, r2
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	b292      	uxth	r2, r2
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffaa 	bl	8000820 <MEM24LC16_write_page>
 80008cc:	6178      	str	r0, [r7, #20]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d107      	bne.n	80008e4 <MEM24LC16_write+0x4c>
	for(register_address = register_base; register_address < register_top; register_address += 16)
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	3310      	adds	r3, #16
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d3eb      	bcc.n	80008ba <MEM24LC16_write+0x22>
 80008e2:	e000      	b.n	80008e6 <MEM24LC16_write+0x4e>
			break;
 80008e4:	bf00      	nop
	}

	return ret;
 80008e6:	697b      	ldr	r3, [r7, #20]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <MEM24LC16_read_page>:

int MEM24LC16_read_page(uint8_t *page, uint16_t register_address)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af04      	add	r7, sp, #16
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	807b      	strh	r3, [r7, #2]
	int ret = HAL_OK, attempts = 10;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	230a      	movs	r3, #10
 8000902:	613b      	str	r3, [r7, #16]
	uint8_t control_byte = (mem24lc16_addr7 | ((register_address >> 8) & 0x07U)) << 1U;
 8000904:	887b      	ldrh	r3, [r7, #2]
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	b29b      	uxth	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MEM24LC16_read_page+0x70>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4313      	orrs	r3, r2
 8000918:	b2db      	uxtb	r3, r3
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
	uint8_t word_address = register_address & 0xFF;
 800091e:	887b      	ldrh	r3, [r7, #2]
 8000920:	73bb      	strb	r3, [r7, #14]

	while(--attempts &&
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3b01      	subs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d013      	beq.n	8000956 <MEM24LC16_read_page+0x66>
			((ret=HAL_I2C_Mem_Read(&hi2c2, control_byte, word_address, 1, page, 32, 1000)) != HAL_OK) );
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	b299      	uxth	r1, r3
 8000932:	7bbb      	ldrb	r3, [r7, #14]
 8000934:	b29a      	uxth	r2, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	2320      	movs	r3, #32
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2301      	movs	r3, #1
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <MEM24LC16_read_page+0x74>)
 8000948:	f001 f8e6 	bl	8001b18 <HAL_I2C_Mem_Read>
 800094c:	4603      	mov	r3, r0
 800094e:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1e5      	bne.n	8000922 <MEM24LC16_read_page+0x32>

	return ret;
 8000956:	697b      	ldr	r3, [r7, #20]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000001 	.word	0x20000001
 8000964:	2000245c 	.word	0x2000245c

08000968 <MEM24LC16_read>:

int MEM24LC16_read(uint8_t *buf, uint16_t register_base, uint16_t size)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
 8000974:	4613      	mov	r3, r2
 8000976:	803b      	strh	r3, [r7, #0]
	int ret = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
	uint16_t register_top = register_base + size; // ¿-1?
 800097c:	887a      	ldrh	r2, [r7, #2]
 800097e:	883b      	ldrh	r3, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	81fb      	strh	r3, [r7, #14]
	uint32_t register_address;

	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	e00f      	b.n	80009aa <MEM24LC16_read+0x42>
	{
		if ((ret=MEM24LC16_read_page(&buf[register_address], register_address)) != HAL_OK)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4413      	add	r3, r2
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	b292      	uxth	r2, r2
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ffaa 	bl	80008f0 <MEM24LC16_read_page>
 800099c:	6178      	str	r0, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d107      	bne.n	80009b4 <MEM24LC16_read+0x4c>
	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	3320      	adds	r3, #32
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d3eb      	bcc.n	800098a <MEM24LC16_read+0x22>
 80009b2:	e000      	b.n	80009b6 <MEM24LC16_read+0x4e>
			break;
 80009b4:	bf00      	nop
	}

	return ret;
 80009b6:	697b      	ldr	r3, [r7, #20]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <MEMX24645_enableWriteAccess>:

void MEMX24645_enableWriteAccess()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	if(HAL_OK != MEMX24645_write_reg(0x02, 0x1FFF)) {
 80009c4:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fe83 	bl	80006d4 <MEMX24645_write_reg>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d000      	beq.n	80009d6 <MEMX24645_enableWriteAccess+0x16>
		while(1); // Do not continue
 80009d4:	e7fe      	b.n	80009d4 <MEMX24645_enableWriteAccess+0x14>
	}
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <getMemSize>:


uint32_t getMemSize(int memtype) {
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	//                           MEMTYPE_24LC16, MEMTYPE_X24645, MEMTYPE_24LC256
	const uint32_t memsizes[] = { 0x800,          0x2000,         0x8000 };
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <getMemSize+0x3c>)
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if(memtype >= MEMTYPE_24LC16 && memtype <= MEMTYPE_mAX)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0a      	blt.n	8000a0c <getMemSize+0x30>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	dc07      	bgt.n	8000a0c <getMemSize+0x30>
		return memsizes[memtype];
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	f107 0218 	add.w	r2, r7, #24
 8000a04:	4413      	add	r3, r2
 8000a06:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000a0a:	e000      	b.n	8000a0e <getMemSize+0x32>

	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	371c      	adds	r7, #28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	08008df8 	.word	0x08008df8

08000a1c <EEPROM_Init>:


void EEPROM_Init()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	int ret = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]


	while(ret != HAL_OK)
 8000a26:	e028      	b.n	8000a7a <EEPROM_Init+0x5e>
	{
		HAL_Delay(10);
 8000a28:	200a      	movs	r0, #10
 8000a2a:	f000 fb69 	bl	8001100 <HAL_Delay>
		ret = HAL_I2C_IsDeviceReady(&hi2c2, memx24645_addr7 << 1U, 3u, 5u);
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <EEPROM_Init+0x88>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	b299      	uxth	r1, r3
 8000a38:	2305      	movs	r3, #5
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	481a      	ldr	r0, [pc, #104]	; (8000aa8 <EEPROM_Init+0x8c>)
 8000a3e:	f001 fad3 	bl	8001fe8 <HAL_I2C_IsDeviceReady>
 8000a42:	4603      	mov	r3, r0
 8000a44:	607b      	str	r3, [r7, #4]
		if(ret == HAL_OK) {
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d103      	bne.n	8000a54 <EEPROM_Init+0x38>
			g_memtype = MEMTYPE_X24645;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <EEPROM_Init+0x90>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
			break;
 8000a52:	e015      	b.n	8000a80 <EEPROM_Init+0x64>
		}
		ret = HAL_I2C_IsDeviceReady(&hi2c2, mem24lc16_addr7 << 1U, 3u, 5u);
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <EEPROM_Init+0x94>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	b299      	uxth	r1, r3
 8000a5e:	2305      	movs	r3, #5
 8000a60:	2203      	movs	r2, #3
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <EEPROM_Init+0x8c>)
 8000a64:	f001 fac0 	bl	8001fe8 <HAL_I2C_IsDeviceReady>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	607b      	str	r3, [r7, #4]
		if(ret == HAL_OK) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d103      	bne.n	8000a7a <EEPROM_Init+0x5e>
			g_memtype = MEMTYPE_24LC16;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <EEPROM_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
			break;
 8000a78:	e002      	b.n	8000a80 <EEPROM_Init+0x64>
	while(ret != HAL_OK)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1d3      	bne.n	8000a28 <EEPROM_Init+0xc>
		}
	}
	g_memsize = getMemSize(g_memtype);
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <EEPROM_Init+0x90>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ffa9 	bl	80009dc <getMemSize>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <EEPROM_Init+0x98>)
 8000a8e:	6013      	str	r3, [r2, #0]

	if(g_memtype == MEMTYPE_X24645) {
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <EEPROM_Init+0x90>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d101      	bne.n	8000a9c <EEPROM_Init+0x80>
		MEMX24645_enableWriteAccess();
 8000a98:	f7ff ff92 	bl	80009c0 <MEMX24645_enableWriteAccess>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200001b0 	.word	0x200001b0
 8000aa8:	2000245c 	.word	0x2000245c
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000001 	.word	0x20000001
 8000ab4:	20000458 	.word	0x20000458

08000ab8 <readMemory>:
#include "main.h"



int readMemory(uint8_t *buffer)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	if(g_memtype== MEMTYPE_24LC16) {
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <readMemory+0x4c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d109      	bne.n	8000adc <readMemory+0x24>
		return MEM24LC16_read(buffer, 0, g_memsize);
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <readMemory+0x50>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ff48 	bl	8000968 <MEM24LC16_read>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	e00f      	b.n	8000afc <readMemory+0x44>
	}
	else if(g_memtype == MEMTYPE_X24645) {
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <readMemory+0x4c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d109      	bne.n	8000af8 <readMemory+0x40>
		return MEMX24645_read(buffer, 0, g_memsize);
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <readMemory+0x50>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	2100      	movs	r1, #0
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fe6a 	bl	80007c8 <MEMX24645_read>
 8000af4:	4603      	mov	r3, r0
 8000af6:	e001      	b.n	8000afc <readMemory+0x44>
	}
	return -1;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000458 	.word	0x20000458

08000b0c <saveMemory>:

int saveMemory(const uint8_t *data)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if(g_memtype == MEMTYPE_24LC16)
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <saveMemory+0x4c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <saveMemory+0x24>
		return MEM24LC16_write(data, 0, g_memsize);
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <saveMemory+0x50>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	2100      	movs	r1, #0
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff feb6 	bl	8000898 <MEM24LC16_write>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	e00f      	b.n	8000b50 <saveMemory+0x44>
	else if(g_memtype == MEMTYPE_X24645)
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <saveMemory+0x4c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d109      	bne.n	8000b4c <saveMemory+0x40>
		return MEMX24645_write(data, 0, g_memsize);
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <saveMemory+0x50>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fd9a 	bl	800067c <MEMX24645_write>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	e001      	b.n	8000b50 <saveMemory+0x44>
	return -1;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000458 	.word	0x20000458

08000b60 <write>:
}

#else // USB CDC

static int write(const uint8_t *data, uint16_t sz)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
	int ret = USBD_FAIL;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]

	while ( (ret = CDC_Transmit_FS((uint8_t *) data, sz)) == USBD_BUSY );
 8000b70:	bf00      	nop
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	4619      	mov	r1, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f007 fca4 	bl	80084c4 <CDC_Transmit_FS>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d0f5      	beq.n	8000b72 <write+0x12>

	return ret;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <serial_write>:

int serial_write(const uint8_t *data, uint16_t len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
	uint32_t tstart = HAL_GetTick();
 8000b9c:	f000 faa6 	bl	80010ec <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
	int ret = USBD_FAIL;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	60fb      	str	r3, [r7, #12]

	while(ret != USBD_OK && (HAL_GetTick()-tstart) < 1000)
 8000ba6:	e005      	b.n	8000bb4 <serial_write+0x24>
		ret = write(data, len);
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	4619      	mov	r1, r3
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffd7 	bl	8000b60 <write>
 8000bb2:	60f8      	str	r0, [r7, #12]
	while(ret != USBD_OK && (HAL_GetTick()-tstart) < 1000)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <serial_write+0x3a>
 8000bba:	f000 fa97 	bl	80010ec <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bc8:	d3ee      	bcc.n	8000ba8 <serial_write+0x18>

	return ret;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <read>:

static int read(uint8_t *buf, uint16_t sz)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
	uint16_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 8000be0:	f007 fcce 	bl	8008580 <CDC_GetRxBufferBytesAvailable_FS>
 8000be4:	4603      	mov	r3, r0
 8000be6:	81bb      	strh	r3, [r7, #12]
	uint16_t bytesReaded = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	81fb      	strh	r3, [r7, #14]

	if (bytesAvailable > 0) {
 8000bec:	89bb      	ldrh	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00f      	beq.n	8000c12 <read+0x3e>

		uint16_t bytesToRead = bytesAvailable >= sz ? sz : bytesAvailable;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	89bb      	ldrh	r3, [r7, #12]
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	bf28      	it	cs
 8000bfa:	4613      	movcs	r3, r2
 8000bfc:	817b      	strh	r3, [r7, #10]

		if (CDC_ReadRxBuffer_FS(buf, bytesToRead) == USB_CDC_RX_BUFFER_OK) {
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	4619      	mov	r1, r3
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f007 fc84 	bl	8008510 <CDC_ReadRxBuffer_FS>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <read+0x3e>
			bytesReaded = bytesToRead;
 8000c0e:	897b      	ldrh	r3, [r7, #10]
 8000c10:	81fb      	strh	r3, [r7, #14]
		}
	}

	return bytesReaded;
 8000c12:	89fb      	ldrh	r3, [r7, #14]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <serial_read>:

int serial_read(uint8_t *buffer, uint16_t len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
	uint32_t tstart = HAL_GetTick();
 8000c28:	f000 fa60 	bl	80010ec <HAL_GetTick>
 8000c2c:	6138      	str	r0, [r7, #16]
	uint16_t bytesRemaining = len;
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	82fb      	strh	r3, [r7, #22]

	while(bytesRemaining > 0 && (HAL_GetTick()-tstart) < 1000)
 8000c32:	e015      	b.n	8000c60 <serial_read+0x44>
	{
		uint16_t bytesToRead = bytesRemaining > HL_RX_BUFFER_SIZE ? HL_RX_BUFFER_SIZE : bytesRemaining;
 8000c34:	8afb      	ldrh	r3, [r7, #22]
 8000c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3a:	bf28      	it	cs
 8000c3c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8000c40:	81fb      	strh	r3, [r7, #14]

		uint16_t bytesReaded = read(buffer, bytesToRead);
 8000c42:	89fb      	ldrh	r3, [r7, #14]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffc4 	bl	8000bd4 <read>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	81bb      	strh	r3, [r7, #12]

		bytesRemaining -= bytesReaded;
 8000c50:	8afa      	ldrh	r2, [r7, #22]
 8000c52:	89bb      	ldrh	r3, [r7, #12]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	82fb      	strh	r3, [r7, #22]
		buffer += bytesReaded;
 8000c58:	89bb      	ldrh	r3, [r7, #12]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	607b      	str	r3, [r7, #4]
	while(bytesRemaining > 0 && (HAL_GetTick()-tstart) < 1000)
 8000c60:	8afb      	ldrh	r3, [r7, #22]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <serial_read+0x5a>
 8000c66:	f000 fa41 	bl	80010ec <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c74:	d3de      	bcc.n	8000c34 <serial_read+0x18>
	}

	if(bytesRemaining != 0)
 8000c76:	8afb      	ldrh	r3, [r7, #22]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <serial_read+0x64>
		return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <serial_read+0x66>

	return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 f9d4 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f81e 	bl	8000cd4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f000 f8a4 	bl	8000de4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000c9c:	f000 f874 	bl	8000d88 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000ca0:	f007 fa9c 	bl	80081dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  EEPROM_Init();
 8000ca4:	f7ff feba 	bl	8000a1c <EEPROM_Init>

  led_on();
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <main+0x44>)
 8000cb0:	f000 fcdc 	bl	800166c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cb8:	f000 fa22 	bl	8001100 <HAL_Delay>
  led_off();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <main+0x44>)
 8000cc4:	f000 fcd2 	bl	800166c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uart_fsm();
 8000cc8:	f7ff fb94 	bl	80003f4 <uart_fsm>
 8000ccc:	e7fc      	b.n	8000cc8 <main+0x3c>
 8000cce:	bf00      	nop
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b094      	sub	sp, #80	; 0x50
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cde:	2228      	movs	r2, #40	; 0x28
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 f874 	bl	8008dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d12:	2301      	movs	r3, #1
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	2302      	movs	r3, #2
 8000d18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 f976 	bl	800401c <HAL_RCC_OscConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d36:	f000 f8a1 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2102      	movs	r1, #2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 fbe0 	bl	800451c <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d62:	f000 f88b 	bl	8000e7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d66:	2310      	movs	r3, #16
 8000d68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fd59 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d7c:	f000 f87e 	bl	8000e7c <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3750      	adds	r7, #80	; 0x50
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <MX_I2C2_Init+0x54>)
 8000d90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_I2C2_Init+0x58>)
 8000d96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000daa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dc6:	f000 fc69 	bl	800169c <HAL_I2C_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000dd0:	f000 f854 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000245c 	.word	0x2000245c
 8000ddc:	40005800 	.word	0x40005800
 8000de0:	000186a0 	.word	0x000186a0

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000dfe:	f043 0320 	orr.w	r3, r3, #32
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0320 	and.w	r3, r3, #32
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_GPIO_Init+0x90>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <MX_GPIO_Init+0x94>)
 8000e48:	f000 fc10 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4619      	mov	r1, r3
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_GPIO_Init+0x94>)
 8000e66:	f000 fa7d 	bl	8001364 <HAL_GPIO_Init>

}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010c00 	.word	0x40010c00

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6193      	str	r3, [r2, #24]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MspInit+0x60>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_MspInit+0x60>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <HAL_I2C_MspInit+0x74>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d124      	bne.n	8000f56 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_I2C_MspInit+0x78>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <HAL_I2C_MspInit+0x78>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_I2C_MspInit+0x78>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4619      	mov	r1, r3
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <HAL_I2C_MspInit+0x7c>)
 8000f3a:	f000 fa13 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_I2C_MspInit+0x78>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_I2C_MspInit+0x78>)
 8000f44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_I2C_MspInit+0x78>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40005800 	.word	0x40005800
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010c00 	.word	0x40010c00

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f889 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000fc2:	f001 fdca 	bl	8002b5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20003250 	.word	0x20003250

08000fd0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fd6:	f001 fdc0 	bl	8002b5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20003250 	.word	0x20003250

08000fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ff0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ff2:	e003      	b.n	8000ffc <LoopCopyDataInit>

08000ff4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ff6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ff8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ffa:	3104      	adds	r1, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001000:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001002:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001004:	d3f6      	bcc.n	8000ff4 <CopyDataInit>
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001008:	e002      	b.n	8001010 <LoopFillZerobss>

0800100a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800100c:	f842 3b04 	str.w	r3, [r2], #4

08001010 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001012:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001014:	d3f9      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001016:	f7ff ffe5 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f007 fea7 	bl	8008d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101e:	f7ff fe35 	bl	8000c8c <main>
  bx lr
 8001022:	4770      	bx	lr
  ldr r3, =_sidata
 8001024:	08008e84 	.word	0x08008e84
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800102c:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8001030:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8001034:	2000353c 	.word	0x2000353c

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x28>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x28>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f947 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff ff16 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f95f 	bl	800134a <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a4:	f000 f927 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_IncTick+0x1c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x20>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a03      	ldr	r2, [pc, #12]	; (80010e8 <HAL_IncTick+0x20>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	2000000c 	.word	0x2000000c
 80010e8:	200024b0 	.word	0x200024b0

080010ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <HAL_GetTick+0x10>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	200024b0 	.word	0x200024b0

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff fff0 	bl	80010ec <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffe0 	bl	80010ec <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000000c 	.word	0x2000000c

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <__NVIC_EnableIRQ+0x34>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c0:	f7ff ff90 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff2d 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff42 	bl	8001190 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff35 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b08b      	sub	sp, #44	; 0x2c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e169      	b.n	800164c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001378:	2201      	movs	r2, #1
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8158 	bne.w	8001646 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a9a      	ldr	r2, [pc, #616]	; (8001604 <HAL_GPIO_Init+0x2a0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d05e      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013a0:	4a98      	ldr	r2, [pc, #608]	; (8001604 <HAL_GPIO_Init+0x2a0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d875      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013a6:	4a98      	ldr	r2, [pc, #608]	; (8001608 <HAL_GPIO_Init+0x2a4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d058      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013ac:	4a96      	ldr	r2, [pc, #600]	; (8001608 <HAL_GPIO_Init+0x2a4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d86f      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013b2:	4a96      	ldr	r2, [pc, #600]	; (800160c <HAL_GPIO_Init+0x2a8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d052      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013b8:	4a94      	ldr	r2, [pc, #592]	; (800160c <HAL_GPIO_Init+0x2a8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d869      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013be:	4a94      	ldr	r2, [pc, #592]	; (8001610 <HAL_GPIO_Init+0x2ac>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d04c      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013c4:	4a92      	ldr	r2, [pc, #584]	; (8001610 <HAL_GPIO_Init+0x2ac>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d863      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013ca:	4a92      	ldr	r2, [pc, #584]	; (8001614 <HAL_GPIO_Init+0x2b0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d046      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013d0:	4a90      	ldr	r2, [pc, #576]	; (8001614 <HAL_GPIO_Init+0x2b0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d85d      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d82a      	bhi.n	8001430 <HAL_GPIO_Init+0xcc>
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d859      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <HAL_GPIO_Init+0x80>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	08001439 	.word	0x08001439
 80013ec:	0800144b 	.word	0x0800144b
 80013f0:	0800148d 	.word	0x0800148d
 80013f4:	08001493 	.word	0x08001493
 80013f8:	08001493 	.word	0x08001493
 80013fc:	08001493 	.word	0x08001493
 8001400:	08001493 	.word	0x08001493
 8001404:	08001493 	.word	0x08001493
 8001408:	08001493 	.word	0x08001493
 800140c:	08001493 	.word	0x08001493
 8001410:	08001493 	.word	0x08001493
 8001414:	08001493 	.word	0x08001493
 8001418:	08001493 	.word	0x08001493
 800141c:	08001493 	.word	0x08001493
 8001420:	08001493 	.word	0x08001493
 8001424:	08001493 	.word	0x08001493
 8001428:	08001441 	.word	0x08001441
 800142c:	08001455 	.word	0x08001455
 8001430:	4a79      	ldr	r2, [pc, #484]	; (8001618 <HAL_GPIO_Init+0x2b4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001436:	e02c      	b.n	8001492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e029      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	3304      	adds	r3, #4
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e024      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	3308      	adds	r3, #8
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e01f      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	330c      	adds	r3, #12
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e01a      	b.n	8001494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001466:	2304      	movs	r3, #4
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e013      	b.n	8001494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	611a      	str	r2, [r3, #16]
          break;
 800147e:	e009      	b.n	8001494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	615a      	str	r2, [r3, #20]
          break;
 800148a:	e003      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x130>
          break;
 8001492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d801      	bhi.n	800149e <HAL_GPIO_Init+0x13a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	e001      	b.n	80014a2 <HAL_GPIO_Init+0x13e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	d802      	bhi.n	80014b0 <HAL_GPIO_Init+0x14c>
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x152>
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	3b08      	subs	r3, #8
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	210f      	movs	r1, #15
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	6a39      	ldr	r1, [r7, #32]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80b1 	beq.w	8001646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e4:	4b4d      	ldr	r3, [pc, #308]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a4c      	ldr	r2, [pc, #304]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b4a      	ldr	r3, [pc, #296]	; (800161c <HAL_GPIO_Init+0x2b8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014fc:	4a48      	ldr	r2, [pc, #288]	; (8001620 <HAL_GPIO_Init+0x2bc>)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a40      	ldr	r2, [pc, #256]	; (8001624 <HAL_GPIO_Init+0x2c0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1ec>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3f      	ldr	r2, [pc, #252]	; (8001628 <HAL_GPIO_Init+0x2c4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1e8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3e      	ldr	r2, [pc, #248]	; (800162c <HAL_GPIO_Init+0x2c8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1e4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3d      	ldr	r2, [pc, #244]	; (8001630 <HAL_GPIO_Init+0x2cc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1e0>
 8001540:	2303      	movs	r3, #3
 8001542:	e006      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001544:	2304      	movs	r3, #4
 8001546:	e004      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001548:	2302      	movs	r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001550:	2300      	movs	r3, #0
 8001552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001554:	f002 0203 	and.w	r2, r2, #3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4093      	lsls	r3, r2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001562:	492f      	ldr	r1, [pc, #188]	; (8001620 <HAL_GPIO_Init+0x2bc>)
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	492c      	ldr	r1, [pc, #176]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	43db      	mvns	r3, r3
 8001592:	4928      	ldr	r1, [pc, #160]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 8001594:	4013      	ands	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4922      	ldr	r1, [pc, #136]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	491e      	ldr	r1, [pc, #120]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	4918      	ldr	r1, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4914      	ldr	r1, [pc, #80]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d021      	beq.n	8001638 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
 8001600:	e021      	b.n	8001646 <HAL_GPIO_Init+0x2e2>
 8001602:	bf00      	nop
 8001604:	10320000 	.word	0x10320000
 8001608:	10310000 	.word	0x10310000
 800160c:	10220000 	.word	0x10220000
 8001610:	10210000 	.word	0x10210000
 8001614:	10120000 	.word	0x10120000
 8001618:	10110000 	.word	0x10110000
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	40010800 	.word	0x40010800
 8001628:	40010c00 	.word	0x40010c00
 800162c:	40011000 	.word	0x40011000
 8001630:	40011400 	.word	0x40011400
 8001634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_GPIO_Init+0x304>)
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4909      	ldr	r1, [pc, #36]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001642:	4013      	ands	r3, r2
 8001644:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	3301      	adds	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	f47f ae8e 	bne.w	8001378 <HAL_GPIO_Init+0x14>
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	372c      	adds	r7, #44	; 0x2c
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e12b      	b.n	8001906 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fc12 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2224      	movs	r2, #36	; 0x24
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001700:	f003 f860 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8001704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a81      	ldr	r2, [pc, #516]	; (8001910 <HAL_I2C_Init+0x274>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d807      	bhi.n	8001720 <HAL_I2C_Init+0x84>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a80      	ldr	r2, [pc, #512]	; (8001914 <HAL_I2C_Init+0x278>)
 8001714:	4293      	cmp	r3, r2
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	e006      	b.n	800172e <HAL_I2C_Init+0x92>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a7d      	ldr	r2, [pc, #500]	; (8001918 <HAL_I2C_Init+0x27c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	bf94      	ite	ls
 8001728:	2301      	movls	r3, #1
 800172a:	2300      	movhi	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0e7      	b.n	8001906 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4a78      	ldr	r2, [pc, #480]	; (800191c <HAL_I2C_Init+0x280>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9b      	lsrs	r3, r3, #18
 8001740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a6a      	ldr	r2, [pc, #424]	; (8001910 <HAL_I2C_Init+0x274>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d802      	bhi.n	8001770 <HAL_I2C_Init+0xd4>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3301      	adds	r3, #1
 800176e:	e009      	b.n	8001784 <HAL_I2C_Init+0xe8>
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	4a69      	ldr	r2, [pc, #420]	; (8001920 <HAL_I2C_Init+0x284>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	3301      	adds	r3, #1
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	430b      	orrs	r3, r1
 800178a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001796:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	495c      	ldr	r1, [pc, #368]	; (8001910 <HAL_I2C_Init+0x274>)
 80017a0:	428b      	cmp	r3, r1
 80017a2:	d819      	bhi.n	80017d8 <HAL_I2C_Init+0x13c>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1e59      	subs	r1, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017b8:	400b      	ands	r3, r1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00a      	beq.n	80017d4 <HAL_I2C_Init+0x138>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1e59      	subs	r1, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d2:	e051      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 80017d4:	2304      	movs	r3, #4
 80017d6:	e04f      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d111      	bne.n	8001804 <HAL_I2C_Init+0x168>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	440b      	add	r3, r1
 80017ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e012      	b.n	800182a <HAL_I2C_Init+0x18e>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e58      	subs	r0, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	0099      	lsls	r1, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	fbb0 f3f3 	udiv	r3, r0, r3
 800181a:	3301      	adds	r3, #1
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Init+0x196>
 800182e:	2301      	movs	r3, #1
 8001830:	e022      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10e      	bne.n	8001858 <HAL_I2C_Init+0x1bc>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1e58      	subs	r0, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6859      	ldr	r1, [r3, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	440b      	add	r3, r1
 8001848:	fbb0 f3f3 	udiv	r3, r0, r3
 800184c:	3301      	adds	r3, #1
 800184e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001856:	e00f      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	0099      	lsls	r1, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	6809      	ldr	r1, [r1, #0]
 800187c:	4313      	orrs	r3, r2
 800187e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6911      	ldr	r1, [r2, #16]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68d2      	ldr	r2, [r2, #12]
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	000186a0 	.word	0x000186a0
 8001914:	001e847f 	.word	0x001e847f
 8001918:	003d08ff 	.word	0x003d08ff
 800191c:	431bde83 	.word	0x431bde83
 8001920:	10624dd3 	.word	0x10624dd3

08001924 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4603      	mov	r3, r0
 8001934:	817b      	strh	r3, [r7, #10]
 8001936:	460b      	mov	r3, r1
 8001938:	813b      	strh	r3, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800193e:	f7ff fbd5 	bl	80010ec <HAL_GetTick>
 8001942:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b20      	cmp	r3, #32
 800194e:	f040 80d9 	bne.w	8001b04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2319      	movs	r3, #25
 8001958:	2201      	movs	r2, #1
 800195a:	496d      	ldr	r1, [pc, #436]	; (8001b10 <HAL_I2C_Mem_Write+0x1ec>)
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fdef 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001968:	2302      	movs	r3, #2
 800196a:	e0cc      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_I2C_Mem_Write+0x56>
 8001976:	2302      	movs	r3, #2
 8001978:	e0c5      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d007      	beq.n	80019a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2221      	movs	r2, #33	; 0x21
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2240      	movs	r2, #64	; 0x40
 80019bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a3a      	ldr	r2, [r7, #32]
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a4d      	ldr	r2, [pc, #308]	; (8001b14 <HAL_I2C_Mem_Write+0x1f0>)
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019e2:	88f8      	ldrh	r0, [r7, #6]
 80019e4:	893a      	ldrh	r2, [r7, #8]
 80019e6:	8979      	ldrh	r1, [r7, #10]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4603      	mov	r3, r0
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fc26 	bl	8002244 <I2C_RequestMemoryWrite>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d052      	beq.n	8001aa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e081      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fe70 	bl	80026ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d107      	bne.n	8001a2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06b      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	781a      	ldrb	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_I2C_Mem_Write+0x180>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d017      	beq.n	8001aa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1aa      	bne.n	8001a02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fe5c 	bl	800276e <I2C_WaitOnBTFFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00d      	beq.n	8001ad8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d107      	bne.n	8001ad4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e016      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e000      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b04:	2302      	movs	r3, #2
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	00100002 	.word	0x00100002
 8001b14:	ffff0000 	.word	0xffff0000

08001b18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	; 0x30
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	817b      	strh	r3, [r7, #10]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	813b      	strh	r3, [r7, #8]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b36:	f7ff fad9 	bl	80010ec <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	f040 8244 	bne.w	8001fd2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2319      	movs	r3, #25
 8001b50:	2201      	movs	r2, #1
 8001b52:	4982      	ldr	r1, [pc, #520]	; (8001d5c <HAL_I2C_Mem_Read+0x244>)
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fcf3 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
 8001b62:	e237      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2C_Mem_Read+0x5a>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e230      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d007      	beq.n	8001b98 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2222      	movs	r2, #34	; 0x22
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4a62      	ldr	r2, [pc, #392]	; (8001d60 <HAL_I2C_Mem_Read+0x248>)
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bda:	88f8      	ldrh	r0, [r7, #6]
 8001bdc:	893a      	ldrh	r2, [r7, #8]
 8001bde:	8979      	ldrh	r1, [r7, #10]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4603      	mov	r3, r0
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fbc0 	bl	8002370 <I2C_RequestMemoryRead>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1ec      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d113      	bne.n	8001c2a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e1c0      	b.n	8001fac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d11e      	bne.n	8001c70 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c42:	b672      	cpsid	i
}
 8001c44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c6c:	b662      	cpsie	i
}
 8001c6e:	e035      	b.n	8001cdc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d11e      	bne.n	8001cb6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cb2:	b662      	cpsie	i
}
 8001cb4:	e012      	b.n	8001cdc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cc4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001cdc:	e166      	b.n	8001fac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	f200 811f 	bhi.w	8001f26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d123      	bne.n	8001d38 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fd7b 	bl	80027f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e167      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d36:	e139      	b.n	8001fac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d152      	bne.n	8001de6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d46:	2200      	movs	r2, #0
 8001d48:	4906      	ldr	r1, [pc, #24]	; (8001d64 <HAL_I2C_Mem_Read+0x24c>)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fbf8 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e13c      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
 8001d5a:	bf00      	nop
 8001d5c:	00100002 	.word	0x00100002
 8001d60:	ffff0000 	.word	0xffff0000
 8001d64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dae:	b662      	cpsie	i
}
 8001db0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001de4:	e0e2      	b.n	8001fac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dec:	2200      	movs	r2, #0
 8001dee:	497b      	ldr	r1, [pc, #492]	; (8001fdc <HAL_I2C_Mem_Read+0x4c4>)
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fba5 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e9      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e46:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_I2C_Mem_Read+0x4c8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	4a65      	ldr	r2, [pc, #404]	; (8001fe4 <HAL_I2C_Mem_Read+0x4cc>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0a1a      	lsrs	r2, r3, #8
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00da      	lsls	r2, r3, #3
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d118      	bne.n	8001e9e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f043 0220 	orr.w	r2, r3, #32
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e8e:	b662      	cpsie	i
}
 8001e90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e09a      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d1d9      	bne.n	8001e60 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001eee:	b662      	cpsie	i
}
 8001ef0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f24:	e042      	b.n	8001fac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 fc60 	bl	80027f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e04c      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d118      	bne.n	8001fac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f ae94 	bne.w	8001cde <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001fd2:	2302      	movs	r3, #2
  }
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	00010004 	.word	0x00010004
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	14f8b589 	.word	0x14f8b589

08001fe8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff f878 	bl	80010ec <HAL_GetTick>
 8001ffc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b20      	cmp	r3, #32
 800200c:	f040 8111 	bne.w	8002232 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2319      	movs	r3, #25
 8002016:	2201      	movs	r2, #1
 8002018:	4988      	ldr	r1, [pc, #544]	; (800223c <HAL_I2C_IsDeviceReady+0x254>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fa90 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002026:	2302      	movs	r3, #2
 8002028:	e104      	b.n	8002234 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_I2C_IsDeviceReady+0x50>
 8002034:	2302      	movs	r3, #2
 8002036:	e0fd      	b.n	8002234 <HAL_I2C_IsDeviceReady+0x24c>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d007      	beq.n	800205e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2224      	movs	r2, #36	; 0x24
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a70      	ldr	r2, [pc, #448]	; (8002240 <HAL_I2C_IsDeviceReady+0x258>)
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002090:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fa4e 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b8:	d103      	bne.n	80020c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e0b6      	b.n	8002234 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020c6:	897b      	ldrh	r3, [r7, #10]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f809 	bl	80010ec <HAL_GetTick>
 80020da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800210a:	e025      	b.n	8002158 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800210c:	f7fe ffee 	bl	80010ec <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d302      	bcc.n	8002122 <HAL_I2C_IsDeviceReady+0x13a>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	22a0      	movs	r2, #160	; 0xa0
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b02      	cmp	r3, #2
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2ba0      	cmp	r3, #160	; 0xa0
 8002162:	d005      	beq.n	8002170 <HAL_I2C_IsDeviceReady+0x188>
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_I2C_IsDeviceReady+0x188>
 800216a:	7dbb      	ldrb	r3, [r7, #22]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0cd      	beq.n	800210c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d129      	bne.n	80021da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002194:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	4921      	ldr	r1, [pc, #132]	; (800223c <HAL_I2C_IsDeviceReady+0x254>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f9c2 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e036      	b.n	8002234 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e02c      	b.n	8002234 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2319      	movs	r3, #25
 80021fa:	2201      	movs	r2, #1
 80021fc:	490f      	ldr	r1, [pc, #60]	; (800223c <HAL_I2C_IsDeviceReady+0x254>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f99e 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e012      	b.n	8002234 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	3301      	adds	r3, #1
 8002212:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	f4ff af32 	bcc.w	8002082 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	00100002 	.word	0x00100002
 8002240:	ffff0000 	.word	0xffff0000

08002244 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	460b      	mov	r3, r1
 8002258:	813b      	strh	r3, [r7, #8]
 800225a:	4613      	mov	r3, r2
 800225c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2200      	movs	r2, #0
 8002276:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f960 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002294:	d103      	bne.n	800229e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e05f      	b.n	8002362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	6a3a      	ldr	r2, [r7, #32]
 80022b6:	492d      	ldr	r1, [pc, #180]	; (800236c <I2C_RequestMemoryWrite+0x128>)
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f998 	bl	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e04c      	b.n	8002362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fa02 	bl	80026ec <I2C_WaitOnTXEFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00d      	beq.n	800230a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d107      	bne.n	8002306 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e02b      	b.n	8002362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002310:	893b      	ldrh	r3, [r7, #8]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	611a      	str	r2, [r3, #16]
 800231a:	e021      	b.n	8002360 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800231c:	893b      	ldrh	r3, [r7, #8]
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	b29b      	uxth	r3, r3
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f9dc 	bl	80026ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b04      	cmp	r3, #4
 8002340:	d107      	bne.n	8002352 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e005      	b.n	8002362 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002356:	893b      	ldrh	r3, [r7, #8]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	00010002 	.word	0x00010002

08002370 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	817b      	strh	r3, [r7, #10]
 8002382:	460b      	mov	r3, r1
 8002384:	813b      	strh	r3, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002398:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f8c2 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d0:	d103      	bne.n	80023da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e0aa      	b.n	8002534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023de:	897b      	ldrh	r3, [r7, #10]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	4952      	ldr	r1, [pc, #328]	; (800253c <I2C_RequestMemoryRead+0x1cc>)
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f8fa 	bl	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e097      	b.n	8002534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800241a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241c:	6a39      	ldr	r1, [r7, #32]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f964 	bl	80026ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00d      	beq.n	8002446 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	2b04      	cmp	r3, #4
 8002430:	d107      	bne.n	8002442 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e076      	b.n	8002534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800244c:	893b      	ldrh	r3, [r7, #8]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	611a      	str	r2, [r3, #16]
 8002456:	e021      	b.n	800249c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002458:	893b      	ldrh	r3, [r7, #8]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	b29b      	uxth	r3, r3
 800245e:	b2da      	uxtb	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	6a39      	ldr	r1, [r7, #32]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f93e 	bl	80026ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00d      	beq.n	8002492 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b04      	cmp	r3, #4
 800247c:	d107      	bne.n	800248e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e050      	b.n	8002534 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002492:	893b      	ldrh	r3, [r7, #8]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f923 	bl	80026ec <I2C_WaitOnTXEFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d107      	bne.n	80024c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e035      	b.n	8002534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	2200      	movs	r2, #0
 80024e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f82b 	bl	8002540 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fe:	d103      	bne.n	8002508 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e013      	b.n	8002534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800250c:	897b      	ldrh	r3, [r7, #10]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	6a3a      	ldr	r2, [r7, #32]
 8002520:	4906      	ldr	r1, [pc, #24]	; (800253c <I2C_RequestMemoryRead+0x1cc>)
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f863 	bl	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	00010002 	.word	0x00010002

08002540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002550:	e025      	b.n	800259e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002558:	d021      	beq.n	800259e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7fe fdc7 	bl	80010ec <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e023      	b.n	80025e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d10d      	bne.n	80025c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4013      	ands	r3, r2
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	e00c      	b.n	80025de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d0b6      	beq.n	8002552 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025fc:	e051      	b.n	80026a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260c:	d123      	bne.n	8002656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002626:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0204 	orr.w	r2, r3, #4
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e046      	b.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800265c:	d021      	beq.n	80026a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265e:	f7fe fd45 	bl	80010ec <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e020      	b.n	80026e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10c      	bne.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4013      	ands	r3, r2
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e00b      	b.n	80026de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	43da      	mvns	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4013      	ands	r3, r2
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d18d      	bne.n	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f8:	e02d      	b.n	8002756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f8ce 	bl	800289c <I2C_IsAcknowledgeFailed>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e02d      	b.n	8002766 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002710:	d021      	beq.n	8002756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002712:	f7fe fceb 	bl	80010ec <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d116      	bne.n	8002756 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f043 0220 	orr.w	r2, r3, #32
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e007      	b.n	8002766 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d1ca      	bne.n	80026fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800277a:	e02d      	b.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f88d 	bl	800289c <I2C_IsAcknowledgeFailed>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e02d      	b.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002792:	d021      	beq.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7fe fcaa 	bl	80010ec <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e007      	b.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d1ca      	bne.n	800277c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027fc:	e042      	b.n	8002884 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d119      	bne.n	8002840 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0210 	mvn.w	r2, #16
 8002814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e029      	b.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7fe fc54 	bl	80010ec <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d116      	bne.n	8002884 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e007      	b.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d1b5      	bne.n	80027fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b2:	d11b      	bne.n	80028ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f043 0204 	orr.w	r2, r3, #4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	b08b      	sub	sp, #44	; 0x2c
 80028fc:	af06      	add	r7, sp, #24
 80028fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0fd      	b.n	8002b06 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f005 ff72 	bl	8008808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2203      	movs	r2, #3
 8002928:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f002 f855 	bl	80049e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	687e      	ldr	r6, [r7, #4]
 800293e:	466d      	mov	r5, sp
 8002940:	f106 0410 	add.w	r4, r6, #16
 8002944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	602b      	str	r3, [r5, #0]
 800294c:	1d33      	adds	r3, r6, #4
 800294e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002950:	6838      	ldr	r0, [r7, #0]
 8002952:	f002 f81f 	bl	8004994 <USB_CoreInit>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0ce      	b.n	8002b06 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f002 f850 	bl	8004a14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e04c      	b.n	8002a14 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3301      	adds	r3, #1
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	b298      	uxth	r0, r3
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	3336      	adds	r3, #54	; 0x36
 80029b8:	4602      	mov	r2, r0
 80029ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	3303      	adds	r3, #3
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	3338      	adds	r3, #56	; 0x38
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	333c      	adds	r3, #60	; 0x3c
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	3340      	adds	r3, #64	; 0x40
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	3301      	adds	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d3ad      	bcc.n	800297a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	e044      	b.n	8002aae <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d3b5      	bcc.n	8002a24 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	687e      	ldr	r6, [r7, #4]
 8002ac0:	466d      	mov	r5, sp
 8002ac2:	f106 0410 	add.w	r4, r6, #16
 8002ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	602b      	str	r3, [r5, #0]
 8002ace:	1d33      	adds	r3, r6, #4
 8002ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f001 ffaa 	bl	8004a2c <USB_DevInit>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00d      	b.n	8002b06 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 ff44 	bl	800698c <USB_DevDisconnect>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_PCD_Start+0x16>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e016      	b.n	8002b52 <HAL_PCD_Start+0x44>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 ff3f 	bl	80049b4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b36:	2101      	movs	r1, #1
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f006 f8e0 	bl	8008cfe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 ff18 	bl	8006978 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b088      	sub	sp, #32
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 ff1a 	bl	80069a0 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fb61 	bl	8003240 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 ff0c 	bl	80069a0 <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d112      	bne.n	8002bba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f005 feae 	bl	800890e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f925 	bl	8002e04 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 feee 	bl	80069a0 <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bce:	d10b      	bne.n	8002be8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002be2:	b292      	uxth	r2, r2
 8002be4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fed7 	bl	80069a0 <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfc:	d10b      	bne.n	8002c16 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c10:	b292      	uxth	r2, r2
 8002c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fec0 	bl	80069a0 <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	d126      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0208 	bic.w	r2, r2, #8
 8002c56:	b292      	uxth	r2, r2
 8002c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f005 fe8f 	bl	8008980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c74:	b292      	uxth	r2, r2
 8002c76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fe8e 	bl	80069a0 <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8e:	f040 8084 	bne.w	8002d9a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	77fb      	strb	r3, [r7, #31]
 8002c96:	e011      	b.n	8002cbc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	441a      	add	r2, r3
 8002ca4:	7ffb      	ldrb	r3, [r7, #31]
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	f107 0120 	add.w	r1, r7, #32
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002cb6:	7ffb      	ldrb	r3, [r7, #31]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	7ffb      	ldrb	r3, [r7, #31]
 8002cbe:	2b07      	cmp	r3, #7
 8002cc0:	d9ea      	bls.n	8002c98 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	b292      	uxth	r2, r2
 8002cee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002cf2:	bf00      	nop
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f6      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e010      	b.n	8002d46 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d24:	7ffb      	ldrb	r3, [r7, #31]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	7ffa      	ldrb	r2, [r7, #31]
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	440a      	add	r2, r1
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	f107 0120 	add.w	r1, r7, #32
 8002d38:	440b      	add	r3, r1
 8002d3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002d3e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	3301      	adds	r3, #1
 8002d44:	77fb      	strb	r3, [r7, #31]
 8002d46:	7ffb      	ldrb	r3, [r7, #31]
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d9eb      	bls.n	8002d24 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0208 	orr.w	r2, r2, #8
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d76:	b292      	uxth	r2, r2
 8002d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0204 	orr.w	r2, r2, #4
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f005 fdd9 	bl	800894c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fdfe 	bl	80069a0 <USB_ReadInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dae:	d10e      	bne.n	8002dce <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f005 fd92 	bl	80088f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fde4 	bl	80069a0 <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de2:	d10b      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df6:	b292      	uxth	r2, r2
 8002df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_PCD_SetAddress+0x1a>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e013      	b.n	8002e46 <HAL_PCD_SetAddress+0x42>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fd8b 	bl	8006952 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	4608      	mov	r0, r1
 8002e58:	4611      	mov	r1, r2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	70fb      	strb	r3, [r7, #3]
 8002e60:	460b      	mov	r3, r1
 8002e62:	803b      	strh	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da0e      	bge.n	8002e92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	705a      	strb	r2, [r3, #1]
 8002e90:	e00e      	b.n	8002eb0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 0207 	and.w	r2, r3, #7
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ebc:	883a      	ldrh	r2, [r7, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	78ba      	ldrb	r2, [r7, #2]
 8002ec6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eda:	78bb      	ldrb	r3, [r7, #2]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d102      	bne.n	8002ee6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_PCD_EP_Open+0xa6>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e00e      	b.n	8002f12 <HAL_PCD_EP_Open+0xc4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68f9      	ldr	r1, [r7, #12]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fdb2 	bl	8004a6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002f10:	7afb      	ldrb	r3, [r7, #11]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	da0e      	bge.n	8002f4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	705a      	strb	r2, [r3, #1]
 8002f4a:	e00e      	b.n	8002f6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_PCD_EP_Close+0x6a>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e00e      	b.n	8002fa2 <HAL_PCD_EP_Close+0x88>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 f8d4 	bl	8005140 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	f003 0207 	and.w	r2, r3, #7
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fa86 	bl	8005518 <USB_EPStartXfer>
 800300c:	e005      	b.n	800301a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	4618      	mov	r0, r3
 8003016:	f002 fa7f 	bl	8005518 <USB_EPStartXfer>
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 0207 	and.w	r2, r3, #7
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	460b      	mov	r3, r1
 8003060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003062:	7afb      	ldrb	r3, [r7, #11]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2200      	movs	r2, #0
 8003096:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d106      	bne.n	80030c2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6979      	ldr	r1, [r7, #20]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f002 fa2c 	bl	8005518 <USB_EPStartXfer>
 80030c0:	e005      	b.n	80030ce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6979      	ldr	r1, [r7, #20]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f002 fa25 	bl	8005518 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	f003 0207 	and.w	r2, r3, #7
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d901      	bls.n	80030f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e04c      	b.n	8003190 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da0e      	bge.n	800311c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	705a      	strb	r2, [r3, #1]
 800311a:	e00c      	b.n	8003136 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_PCD_EP_SetStall+0x7e>
 8003152:	2302      	movs	r3, #2
 8003154:	e01c      	b.n	8003190 <HAL_PCD_EP_SetStall+0xb8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	4618      	mov	r0, r3
 8003166:	f003 faf7 	bl	8006758 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	2b00      	cmp	r3, #0
 8003172:	d108      	bne.n	8003186 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f003 fc1c 	bl	80069be <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 020f 	and.w	r2, r3, #15
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d901      	bls.n	80031b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e040      	b.n	8003238 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da0e      	bge.n	80031dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	705a      	strb	r2, [r3, #1]
 80031da:	e00e      	b.n	80031fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 0207 	and.w	r2, r3, #7
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_PCD_EP_ClrStall+0x82>
 8003216:	2302      	movs	r3, #2
 8003218:	e00e      	b.n	8003238 <HAL_PCD_EP_ClrStall+0xa0>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fae5 	bl	80067f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08e      	sub	sp, #56	; 0x38
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003248:	e2df      	b.n	800380a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003252:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003264:	2b00      	cmp	r3, #0
 8003266:	f040 8158 	bne.w	800351a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800326a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d152      	bne.n	800331a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003284:	81fb      	strh	r3, [r7, #14]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003294:	b29b      	uxth	r3, r3
 8003296:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3328      	adds	r3, #40	; 0x28
 800329c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	3302      	adds	r3, #2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	441a      	add	r2, r3
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032d8:	2100      	movs	r1, #0
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f005 faef 	bl	80088be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 828e 	beq.w	800380a <PCD_EP_ISR_Handler+0x5ca>
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 8289 	bne.w	800380a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003304:	b2da      	uxtb	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	b292      	uxth	r2, r2
 800330c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003318:	e277      	b.n	800380a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800332a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800332c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003330:	2b00      	cmp	r3, #0
 8003332:	d034      	beq.n	800339e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800333c:	b29b      	uxth	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	3306      	adds	r3, #6
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003372:	b29b      	uxth	r3, r3
 8003374:	f003 fb73 	bl	8006a5e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29a      	uxth	r2, r3
 8003380:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003384:	4013      	ands	r3, r2
 8003386:	823b      	strh	r3, [r7, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	8a3a      	ldrh	r2, [r7, #16]
 800338e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003392:	b292      	uxth	r2, r2
 8003394:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f005 fa64 	bl	8008864 <HAL_PCD_SetupStageCallback>
 800339c:	e235      	b.n	800380a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800339e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f280 8231 	bge.w	800380a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033b4:	4013      	ands	r3, r2
 80033b6:	83bb      	strh	r3, [r7, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	8bba      	ldrh	r2, [r7, #28]
 80033be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c2:	b292      	uxth	r2, r2
 80033c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	3306      	adds	r3, #6
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d019      	beq.n	800342e <PCD_EP_ISR_Handler+0x1ee>
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	6959      	ldr	r1, [r3, #20]
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003412:	b29b      	uxth	r3, r3
 8003414:	f003 fb23 	bl	8006a5e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	441a      	add	r2, r3
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003426:	2100      	movs	r1, #0
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f005 fa2d 	bl	8008888 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343c:	b29b      	uxth	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4413      	add	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d112      	bne.n	800347c <PCD_EP_ISR_Handler+0x23c>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003460:	b29a      	uxth	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003474:	b29a      	uxth	r2, r3
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	801a      	strh	r2, [r3, #0]
 800347a:	e02f      	b.n	80034dc <PCD_EP_ISR_Handler+0x29c>
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b3e      	cmp	r3, #62	; 0x3e
 8003482:	d813      	bhi.n	80034ac <PCD_EP_ISR_Handler+0x26c>
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <PCD_EP_ISR_Handler+0x25e>
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	3301      	adds	r3, #1
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	029b      	lsls	r3, r3, #10
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	801a      	strh	r2, [r3, #0]
 80034aa:	e017      	b.n	80034dc <PCD_EP_ISR_Handler+0x29c>
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <PCD_EP_ISR_Handler+0x286>
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	3b01      	subs	r3, #1
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	029b      	lsls	r3, r3, #10
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	827b      	strh	r3, [r7, #18]
 80034ee:	8a7b      	ldrh	r3, [r7, #18]
 80034f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034f4:	827b      	strh	r3, [r7, #18]
 80034f6:	8a7b      	ldrh	r3, [r7, #18]
 80034f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034fc:	827b      	strh	r3, [r7, #18]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	8a7b      	ldrh	r3, [r7, #18]
 8003504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003514:	b29b      	uxth	r3, r3
 8003516:	8013      	strh	r3, [r2, #0]
 8003518:	e177      	b.n	800380a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800352c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003530:	2b00      	cmp	r3, #0
 8003532:	f280 80ea 	bge.w	800370a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	b29a      	uxth	r2, r3
 8003548:	f640 738f 	movw	r3, #3983	; 0xf8f
 800354c:	4013      	ands	r3, r2
 800354e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003564:	b292      	uxth	r2, r2
 8003566:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003568:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	7b1b      	ldrb	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d122      	bne.n	80035cc <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358e:	b29b      	uxth	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	3306      	adds	r3, #6
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ae:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80035b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8087 	beq.w	80036c6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	6959      	ldr	r1, [r3, #20]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	88da      	ldrh	r2, [r3, #6]
 80035c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035c6:	f003 fa4a 	bl	8006a5e <USB_ReadPMA>
 80035ca:	e07c      	b.n	80036c6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	78db      	ldrb	r3, [r3, #3]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d108      	bne.n	80035e6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80035d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035d6:	461a      	mov	r2, r3
 80035d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f923 	bl	8003826 <HAL_PCD_EP_DB_Receive>
 80035e0:	4603      	mov	r3, r0
 80035e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80035e4:	e06f      	b.n	80036c6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	847b      	strh	r3, [r7, #34]	; 0x22
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	441a      	add	r2, r3
 8003610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003622:	b29b      	uxth	r3, r3
 8003624:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d021      	beq.n	8003684 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003648:	b29b      	uxth	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	3302      	adds	r3, #2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003668:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800366a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02a      	beq.n	80036c6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	6959      	ldr	r1, [r3, #20]
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	891a      	ldrh	r2, [r3, #8]
 800367c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800367e:	f003 f9ee 	bl	8006a5e <USB_ReadPMA>
 8003682:	e020      	b.n	80036c6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368c:	b29b      	uxth	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	3306      	adds	r3, #6
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	6959      	ldr	r1, [r3, #20]
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	895a      	ldrh	r2, [r3, #10]
 80036c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036c2:	f003 f9cc 	bl	8006a5e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036cc:	441a      	add	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036d8:	441a      	add	r2, r3
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <PCD_EP_ISR_Handler+0x4b0>
 80036e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d206      	bcs.n	80036fe <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f005 f8c6 	bl	8008888 <HAL_PCD_DataOutStageCallback>
 80036fc:	e005      	b.n	800370a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003704:	4618      	mov	r0, r3
 8003706:	f001 ff07 	bl	8005518 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800370a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d07a      	beq.n	800380a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003714:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	843b      	strh	r3, [r7, #32]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	8c3b      	ldrh	r3, [r7, #32]
 8003754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375c:	b29b      	uxth	r3, r3
 800375e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	78db      	ldrb	r3, [r3, #3]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d108      	bne.n	800377a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800376c:	2b02      	cmp	r3, #2
 800376e:	d146      	bne.n	80037fe <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003770:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d141      	bne.n	80037fe <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003782:	b29b      	uxth	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	3302      	adds	r3, #2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	8bfb      	ldrh	r3, [r7, #30]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d906      	bls.n	80037bc <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	8bfb      	ldrh	r3, [r7, #30]
 80037b4:	1ad2      	subs	r2, r2, r3
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	619a      	str	r2, [r3, #24]
 80037ba:	e002      	b.n	80037c2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	2200      	movs	r2, #0
 80037c0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f005 f874 	bl	80088be <HAL_PCD_DataInStageCallback>
 80037d6:	e018      	b.n	800380a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	8bfb      	ldrh	r3, [r7, #30]
 80037de:	441a      	add	r2, r3
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	8bfb      	ldrh	r3, [r7, #30]
 80037ea:	441a      	add	r2, r3
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fe8e 	bl	8005518 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80037fc:	e005      	b.n	800380a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003800:	461a      	mov	r2, r3
 8003802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f91b 	bl	8003a40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003812:	b29b      	uxth	r3, r3
 8003814:	b21b      	sxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	f6ff ad17 	blt.w	800324a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3738      	adds	r7, #56	; 0x38
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b088      	sub	sp, #32
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	4613      	mov	r3, r2
 8003832:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d07e      	beq.n	800393c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003846:	b29b      	uxth	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	3302      	adds	r3, #2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003866:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	8b7b      	ldrh	r3, [r7, #26]
 800386e:	429a      	cmp	r2, r3
 8003870:	d306      	bcc.n	8003880 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	8b7b      	ldrh	r3, [r7, #26]
 8003878:	1ad2      	subs	r2, r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	619a      	str	r2, [r3, #24]
 800387e:	e002      	b.n	8003886 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2200      	movs	r2, #0
 8003884:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d123      	bne.n	80038d6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a8:	833b      	strh	r3, [r7, #24]
 80038aa:	8b3b      	ldrh	r3, [r7, #24]
 80038ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038b0:	833b      	strh	r3, [r7, #24]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	441a      	add	r2, r3
 80038c0:	8b3b      	ldrh	r3, [r7, #24]
 80038c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01f      	beq.n	8003920 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	82fb      	strh	r3, [r7, #22]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	8afb      	ldrh	r3, [r7, #22]
 800390c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800391c:	b29b      	uxth	r3, r3
 800391e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003920:	8b7b      	ldrh	r3, [r7, #26]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8087 	beq.w	8003a36 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6959      	ldr	r1, [r3, #20]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	891a      	ldrh	r2, [r3, #8]
 8003934:	8b7b      	ldrh	r3, [r7, #26]
 8003936:	f003 f892 	bl	8006a5e <USB_ReadPMA>
 800393a:	e07c      	b.n	8003a36 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003944:	b29b      	uxth	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	3306      	adds	r3, #6
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003964:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	8b7b      	ldrh	r3, [r7, #26]
 800396c:	429a      	cmp	r2, r3
 800396e:	d306      	bcc.n	800397e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	8b7b      	ldrh	r3, [r7, #26]
 8003976:	1ad2      	subs	r2, r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	619a      	str	r2, [r3, #24]
 800397c:	e002      	b.n	8003984 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d123      	bne.n	80039d4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	83fb      	strh	r3, [r7, #30]
 80039a8:	8bfb      	ldrh	r3, [r7, #30]
 80039aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039ae:	83fb      	strh	r3, [r7, #30]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	8bfb      	ldrh	r3, [r7, #30]
 80039c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11f      	bne.n	8003a1e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f8:	83bb      	strh	r3, [r7, #28]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	8bbb      	ldrh	r3, [r7, #28]
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a1e:	8b7b      	ldrh	r3, [r7, #26]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6959      	ldr	r1, [r3, #20]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	895a      	ldrh	r2, [r3, #10]
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	f003 f814 	bl	8006a5e <USB_ReadPMA>
    }
  }

  return count;
 8003a36:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b094      	sub	sp, #80	; 0x50
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8138 	beq.w	8003cca <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3302      	adds	r3, #2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d907      	bls.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	619a      	str	r2, [r3, #24]
 8003aa0:	e002      	b.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d12c      	bne.n	8003b0a <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f004 ff01 	bl	80088be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 823a 	beq.w	8003f3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae2:	82fb      	strh	r3, [r7, #22]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	8afb      	ldrh	r3, [r7, #22]
 8003af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	8013      	strh	r3, [r2, #0]
 8003b08:	e218      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01f      	beq.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	441a      	add	r2, r3
 8003b3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	f040 81ee 	bne.w	8003f3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b68:	441a      	add	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b76:	441a      	add	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d309      	bcc.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6a1a      	ldr	r2, [r3, #32]
 8003b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b94:	1ad2      	subs	r2, r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	621a      	str	r2, [r3, #32]
 8003b9a:	e015      	b.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d107      	bne.n	8003bb4 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8003ba4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bb2:	e009      	b.n	8003bc8 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d155      	bne.n	8003c7c <HAL_PCD_EP_DB_Transmit+0x23c>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	011a      	lsls	r2, r3, #4
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d112      	bne.n	8003c24 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e047      	b.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x274>
 8003c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c26:	2b3e      	cmp	r3, #62	; 0x3e
 8003c28:	d811      	bhi.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x20e>
 8003c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x200>
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	029b      	lsls	r3, r3, #10
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	e032      	b.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x274>
 8003c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <HAL_PCD_EP_DB_Transmit+0x224>
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	3b01      	subs	r3, #1
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	029b      	lsls	r3, r3, #10
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	801a      	strh	r2, [r3, #0]
 8003c7a:	e01b      	b.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x274>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d117      	bne.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x274>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	4413      	add	r3, r2
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	011a      	lsls	r2, r3, #4
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6959      	ldr	r1, [r3, #20]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	891a      	ldrh	r2, [r3, #8]
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f002 fe86 	bl	80069d4 <USB_WritePMA>
 8003cc8:	e138      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	3306      	adds	r3, #6
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d307      	bcc.n	8003d12 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d0a:	1ad2      	subs	r2, r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	619a      	str	r2, [r3, #24]
 8003d10:	e002      	b.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d12e      	bne.n	8003d7e <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	4619      	mov	r1, r3
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f004 fdc9 	bl	80088be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 8102 	bne.w	8003f3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
 8003d7c:	e0de      	b.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11f      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	867b      	strh	r3, [r7, #50]	; 0x32
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	f040 80b4 	bne.w	8003f3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ddc:	441a      	add	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003dea:	441a      	add	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d309      	bcc.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e08:	1ad2      	subs	r2, r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	621a      	str	r2, [r3, #32]
 8003e0e:	e015      	b.n	8003e3c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d107      	bne.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8003e18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e1c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e26:	e009      	b.n	8003e3c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2200      	movs	r2, #0
 8003e32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d155      	bne.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	4413      	add	r3, r2
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	011a      	lsls	r2, r3, #4
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
 8003e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d112      	bne.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x45e>
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e044      	b.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8003ea2:	d811      	bhi.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x488>
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_PCD_EP_DB_Transmit+0x47a>
 8003eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	029b      	lsls	r3, r3, #10
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	801a      	strh	r2, [r3, #0]
 8003ec6:	e02f      	b.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <HAL_PCD_EP_DB_Transmit+0x49e>
 8003ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eda:	3b01      	subs	r3, #1
 8003edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	029b      	lsls	r3, r3, #10
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	e018      	b.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d114      	bne.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0c:	4413      	add	r3, r2
 8003f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	011a      	lsls	r2, r3, #4
 8003f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f18:	4413      	add	r3, r2
 8003f1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f26:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6959      	ldr	r1, [r3, #20]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	895a      	ldrh	r2, [r3, #10]
 8003f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f002 fd4c 	bl	80069d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f56:	82bb      	strh	r3, [r7, #20]
 8003f58:	8abb      	ldrh	r3, [r7, #20]
 8003f5a:	f083 0310 	eor.w	r3, r3, #16
 8003f5e:	82bb      	strh	r3, [r7, #20]
 8003f60:	8abb      	ldrh	r3, [r7, #20]
 8003f62:	f083 0320 	eor.w	r3, r3, #32
 8003f66:	82bb      	strh	r3, [r7, #20]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	8abb      	ldrh	r3, [r7, #20]
 8003f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3750      	adds	r7, #80	; 0x50
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	817b      	strh	r3, [r7, #10]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fa8:	897b      	ldrh	r3, [r7, #10]
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb4:	897b      	ldrh	r3, [r7, #10]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e009      	b.n	8003fe0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fcc:	897a      	ldrh	r2, [r7, #10]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4413      	add	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	80da      	strh	r2, [r3, #6]
 8003ff4:	e00b      	b.n	800400e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0c1b      	lsrs	r3, r3, #16
 8004008:	b29a      	uxth	r2, r3
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
	...

0800401c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e26c      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8087 	beq.w	800414a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800403c:	4b92      	ldr	r3, [pc, #584]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b04      	cmp	r3, #4
 8004046:	d00c      	beq.n	8004062 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004048:	4b8f      	ldr	r3, [pc, #572]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d112      	bne.n	800407a <HAL_RCC_OscConfig+0x5e>
 8004054:	4b8c      	ldr	r3, [pc, #560]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d10b      	bne.n	800407a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004062:	4b89      	ldr	r3, [pc, #548]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06c      	beq.n	8004148 <HAL_RCC_OscConfig+0x12c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d168      	bne.n	8004148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e246      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x76>
 8004084:	4b80      	ldr	r3, [pc, #512]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a7f      	ldr	r2, [pc, #508]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 800408a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	e02e      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x98>
 800409a:	4b7b      	ldr	r3, [pc, #492]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a7a      	ldr	r2, [pc, #488]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b78      	ldr	r3, [pc, #480]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a77      	ldr	r2, [pc, #476]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e01d      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0xbc>
 80040be:	4b72      	ldr	r3, [pc, #456]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a71      	ldr	r2, [pc, #452]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b6f      	ldr	r3, [pc, #444]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6e      	ldr	r2, [pc, #440]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0xd4>
 80040d8:	4b6b      	ldr	r3, [pc, #428]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6a      	ldr	r2, [pc, #424]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a67      	ldr	r2, [pc, #412]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fc fff8 	bl	80010ec <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fc fff4 	bl	80010ec <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	; 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e1fa      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b5d      	ldr	r3, [pc, #372]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0xe4>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fc ffe4 	bl	80010ec <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fc ffe0 	bl	80010ec <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1e6      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413a:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x10c>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d063      	beq.n	800421e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004156:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004162:	4b49      	ldr	r3, [pc, #292]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b08      	cmp	r3, #8
 800416c:	d11c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x18c>
 800416e:	4b46      	ldr	r3, [pc, #280]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	4b43      	ldr	r3, [pc, #268]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_RCC_OscConfig+0x176>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d001      	beq.n	8004192 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e1ba      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4939      	ldr	r1, [pc, #228]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a6:	e03a      	b.n	800421e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d020      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b0:	4b36      	ldr	r3, [pc, #216]	; (800428c <HAL_RCC_OscConfig+0x270>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b6:	f7fc ff99 	bl	80010ec <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041be:	f7fc ff95 	bl	80010ec <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e19b      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d0:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041dc:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4927      	ldr	r1, [pc, #156]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]
 80041f0:	e015      	b.n	800421e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f2:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_RCC_OscConfig+0x270>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fc ff78 	bl	80010ec <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004200:	f7fc ff74 	bl	80010ec <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e17a      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d03a      	beq.n	80042a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d019      	beq.n	8004266 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004232:	4b17      	ldr	r3, [pc, #92]	; (8004290 <HAL_RCC_OscConfig+0x274>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004238:	f7fc ff58 	bl	80010ec <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004240:	f7fc ff54 	bl	80010ec <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e15a      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_RCC_OscConfig+0x26c>)
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800425e:	2001      	movs	r0, #1
 8004260:	f000 fac4 	bl	80047ec <RCC_Delay>
 8004264:	e01c      	b.n	80042a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_RCC_OscConfig+0x274>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426c:	f7fc ff3e 	bl	80010ec <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004272:	e00f      	b.n	8004294 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004274:	f7fc ff3a 	bl	80010ec <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d908      	bls.n	8004294 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e140      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	42420000 	.word	0x42420000
 8004290:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	4b9e      	ldr	r3, [pc, #632]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e9      	bne.n	8004274 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80a6 	beq.w	80043fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b2:	4b97      	ldr	r3, [pc, #604]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	4b94      	ldr	r3, [pc, #592]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	4a93      	ldr	r2, [pc, #588]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	61d3      	str	r3, [r2, #28]
 80042ca:	4b91      	ldr	r3, [pc, #580]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b8e      	ldr	r3, [pc, #568]	; (8004514 <HAL_RCC_OscConfig+0x4f8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d118      	bne.n	8004318 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e6:	4b8b      	ldr	r3, [pc, #556]	; (8004514 <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a8a      	ldr	r2, [pc, #552]	; (8004514 <HAL_RCC_OscConfig+0x4f8>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f2:	f7fc fefb 	bl	80010ec <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fa:	f7fc fef7 	bl	80010ec <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b64      	cmp	r3, #100	; 0x64
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0fd      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	4b81      	ldr	r3, [pc, #516]	; (8004514 <HAL_RCC_OscConfig+0x4f8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x312>
 8004320:	4b7b      	ldr	r3, [pc, #492]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	4a7a      	ldr	r2, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6213      	str	r3, [r2, #32]
 800432c:	e02d      	b.n	800438a <HAL_RCC_OscConfig+0x36e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x334>
 8004336:	4b76      	ldr	r3, [pc, #472]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	4a75      	ldr	r2, [pc, #468]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6213      	str	r3, [r2, #32]
 8004342:	4b73      	ldr	r3, [pc, #460]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a72      	ldr	r2, [pc, #456]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004348:	f023 0304 	bic.w	r3, r3, #4
 800434c:	6213      	str	r3, [r2, #32]
 800434e:	e01c      	b.n	800438a <HAL_RCC_OscConfig+0x36e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b05      	cmp	r3, #5
 8004356:	d10c      	bne.n	8004372 <HAL_RCC_OscConfig+0x356>
 8004358:	4b6d      	ldr	r3, [pc, #436]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4a6c      	ldr	r2, [pc, #432]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 800435e:	f043 0304 	orr.w	r3, r3, #4
 8004362:	6213      	str	r3, [r2, #32]
 8004364:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a69      	ldr	r2, [pc, #420]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	e00b      	b.n	800438a <HAL_RCC_OscConfig+0x36e>
 8004372:	4b67      	ldr	r3, [pc, #412]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4a66      	ldr	r2, [pc, #408]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	6213      	str	r3, [r2, #32]
 800437e:	4b64      	ldr	r3, [pc, #400]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a63      	ldr	r2, [pc, #396]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d015      	beq.n	80043be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fc feab 	bl	80010ec <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fc fea7 	bl	80010ec <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0ab      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	4b57      	ldr	r3, [pc, #348]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ee      	beq.n	800439a <HAL_RCC_OscConfig+0x37e>
 80043bc:	e014      	b.n	80043e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043be:	f7fc fe95 	bl	80010ec <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fc fe91 	bl	80010ec <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e095      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043dc:	4b4c      	ldr	r3, [pc, #304]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ee      	bne.n	80043c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d105      	bne.n	80043fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ee:	4b48      	ldr	r3, [pc, #288]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4a47      	ldr	r2, [pc, #284]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80043f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8081 	beq.w	8004506 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004404:	4b42      	ldr	r3, [pc, #264]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b08      	cmp	r3, #8
 800440e:	d061      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d146      	bne.n	80044a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004418:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <HAL_RCC_OscConfig+0x4fc>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7fc fe65 	bl	80010ec <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004426:	f7fc fe61 	bl	80010ec <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e067      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004438:	4b35      	ldr	r3, [pc, #212]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d108      	bne.n	8004460 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800444e:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	492d      	ldr	r1, [pc, #180]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004460:	4b2b      	ldr	r3, [pc, #172]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a19      	ldr	r1, [r3, #32]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	430b      	orrs	r3, r1
 8004472:	4927      	ldr	r1, [pc, #156]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004478:	4b27      	ldr	r3, [pc, #156]	; (8004518 <HAL_RCC_OscConfig+0x4fc>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fc fe35 	bl	80010ec <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004486:	f7fc fe31 	bl	80010ec <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e037      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x46a>
 80044a4:	e02f      	b.n	8004506 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <HAL_RCC_OscConfig+0x4fc>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fc fe1e 	bl	80010ec <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fc fe1a 	bl	80010ec <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e020      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x498>
 80044d2:	e018      	b.n	8004506 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e013      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40021000 	.word	0x40021000
 8004514:	40007000 	.word	0x40007000
 8004518:	42420060 	.word	0x42420060

0800451c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0d0      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d910      	bls.n	8004560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b67      	ldr	r3, [pc, #412]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 0207 	bic.w	r2, r3, #7
 8004546:	4965      	ldr	r1, [pc, #404]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004582:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004596:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800459a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d040      	beq.n	800463c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d115      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e073      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06b      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fa:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f023 0203 	bic.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4936      	ldr	r1, [pc, #216]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800460c:	f7fc fd6e 	bl	80010ec <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	e00a      	b.n	800462a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fc fd6a 	bl	80010ec <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e053      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d1eb      	bne.n	8004614 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d210      	bcs.n	800466c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 0207 	bic.w	r2, r3, #7
 8004652:	4922      	ldr	r1, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	; (80046e4 <HAL_RCC_ClockConfig+0x1c8>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1cc>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1d0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fc fccc 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40022000 	.word	0x40022000
 80046e0:	40021000 	.word	0x40021000
 80046e4:	08008e64 	.word	0x08008e64
 80046e8:	20000004 	.word	0x20000004
 80046ec:	20000008 	.word	0x20000008

080046f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	b490      	push	{r4, r7}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80046f6:	4b2a      	ldr	r3, [pc, #168]	; (80047a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80046f8:	1d3c      	adds	r4, r7, #4
 80046fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004700:	f240 2301 	movw	r3, #513	; 0x201
 8004704:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d002      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 800472a:	2b08      	cmp	r3, #8
 800472c:	d003      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0x46>
 800472e:	e02d      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004732:	623b      	str	r3, [r7, #32]
      break;
 8004734:	e02d      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	0c9b      	lsrs	r3, r3, #18
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004742:	4413      	add	r3, r2
 8004744:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004748:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d013      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004754:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	0c5b      	lsrs	r3, r3, #17
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004762:	4413      	add	r3, r2
 8004764:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004768:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800476e:	fb02 f203 	mul.w	r2, r2, r3
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
 800477a:	e004      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004780:	fb02 f303 	mul.w	r3, r2, r3
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	623b      	str	r3, [r7, #32]
      break;
 800478a:	e002      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800478e:	623b      	str	r3, [r7, #32]
      break;
 8004790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004792:	6a3b      	ldr	r3, [r7, #32]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bc90      	pop	{r4, r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	08008e04 	.word	0x08008e04
 80047a4:	40021000 	.word	0x40021000
 80047a8:	007a1200 	.word	0x007a1200
 80047ac:	003d0900 	.word	0x003d0900

080047b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b4:	4b02      	ldr	r3, [pc, #8]	; (80047c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr
 80047c0:	20000004 	.word	0x20000004

080047c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c8:	f7ff fff2 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	; (80047e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000
 80047e8:	08008e74 	.word	0x08008e74

080047ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <RCC_Delay+0x34>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <RCC_Delay+0x38>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0a5b      	lsrs	r3, r3, #9
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004808:	bf00      	nop
  }
  while (Delay --);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1e5a      	subs	r2, r3, #1
 800480e:	60fa      	str	r2, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f9      	bne.n	8004808 <RCC_Delay+0x1c>
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr
 8004820:	20000004 	.word	0x20000004
 8004824:	10624dd3 	.word	0x10624dd3

08004828 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d07d      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004844:	2300      	movs	r3, #0
 8004846:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004848:	4b4f      	ldr	r3, [pc, #316]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10d      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004854:	4b4c      	ldr	r3, [pc, #304]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4a4b      	ldr	r2, [pc, #300]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485e:	61d3      	str	r3, [r2, #28]
 8004860:	4b49      	ldr	r3, [pc, #292]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004870:	4b46      	ldr	r3, [pc, #280]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d118      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800487c:	4b43      	ldr	r3, [pc, #268]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a42      	ldr	r2, [pc, #264]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004886:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004888:	f7fc fc30 	bl	80010ec <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	e008      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004890:	f7fc fc2c 	bl	80010ec <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e06d      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a2:	4b3a      	ldr	r3, [pc, #232]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02e      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d027      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048cc:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048d6:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048e2:	4a29      	ldr	r2, [pc, #164]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d014      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f2:	f7fc fbfb 	bl	80010ec <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fc fbf7 	bl	80010ec <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e036      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004910:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ee      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4917      	ldr	r1, [pc, #92]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492a:	4313      	orrs	r3, r2
 800492c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800492e:	7dfb      	ldrb	r3, [r7, #23]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d105      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004934:	4b14      	ldr	r3, [pc, #80]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	4a13      	ldr	r2, [pc, #76]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	490b      	ldr	r1, [pc, #44]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495a:	4313      	orrs	r3, r2
 800495c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4904      	ldr	r1, [pc, #16]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000
 800498c:	40007000 	.word	0x40007000
 8004990:	42420440 	.word	0x42420440

08004994 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004994:	b084      	sub	sp, #16
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	f107 0014 	add.w	r0, r7, #20
 80049a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	b004      	add	sp, #16
 80049b2:	4770      	bx	lr

080049b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80049c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80049ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4013      	ands	r3, r2
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	f107 0014 	add.w	r0, r7, #20
 8004a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	b004      	add	sp, #16
 8004a6a:	4770      	bx	lr

08004a6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b09b      	sub	sp, #108	; 0x6c
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	78db      	ldrb	r3, [r3, #3]
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d81f      	bhi.n	8004ade <USB_ActivateEndpoint+0x72>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <USB_ActivateEndpoint+0x38>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ae7 	.word	0x08004ae7
 8004ab0:	08004ac3 	.word	0x08004ac3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ab4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004abc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ac0:	e012      	b.n	8004ae8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ac2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ac6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004aca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ace:	e00b      	b.n	8004ae8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ad0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ad8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004adc:	e004      	b.n	8004ae8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004ae4:	e000      	b.n	8004ae8 <USB_ActivateEndpoint+0x7c>
      break;
 8004ae6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	7b1b      	ldrb	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f040 8149 	bne.w	8004dec <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8084 	beq.w	8004c6c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	4413      	add	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	011a      	lsls	r2, r3, #4
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	88db      	ldrh	r3, [r3, #6]
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	81fb      	strh	r3, [r7, #14]
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <USB_ActivateEndpoint+0x17c>
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	81bb      	strh	r3, [r7, #12]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	89bb      	ldrh	r3, [r7, #12]
 8004bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	78db      	ldrb	r3, [r3, #3]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d020      	beq.n	8004c32 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c06:	813b      	strh	r3, [r7, #8]
 8004c08:	893b      	ldrh	r3, [r7, #8]
 8004c0a:	f083 0320 	eor.w	r3, r3, #32
 8004c0e:	813b      	strh	r3, [r7, #8]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
 8004c30:	e27f      	b.n	8005132 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c48:	817b      	strh	r3, [r7, #10]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	897b      	ldrh	r3, [r7, #10]
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
 8004c6a:	e262      	b.n	8005132 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	4413      	add	r3, r2
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	011a      	lsls	r2, r3, #4
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	88db      	ldrh	r3, [r3, #6]
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	4413      	add	r3, r2
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	011a      	lsls	r2, r3, #4
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d112      	bne.n	8004cf2 <USB_ActivateEndpoint+0x286>
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	801a      	strh	r2, [r3, #0]
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	e02f      	b.n	8004d52 <USB_ActivateEndpoint+0x2e6>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf8:	d813      	bhi.n	8004d22 <USB_ActivateEndpoint+0x2b6>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	663b      	str	r3, [r7, #96]	; 0x60
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <USB_ActivateEndpoint+0x2a8>
 8004d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d10:	3301      	adds	r3, #1
 8004d12:	663b      	str	r3, [r7, #96]	; 0x60
 8004d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	029b      	lsls	r3, r3, #10
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	e017      	b.n	8004d52 <USB_ActivateEndpoint+0x2e6>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	663b      	str	r3, [r7, #96]	; 0x60
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <USB_ActivateEndpoint+0x2d0>
 8004d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	029b      	lsls	r3, r3, #10
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	83fb      	strh	r3, [r7, #30]
 8004d60:	8bfb      	ldrh	r3, [r7, #30]
 8004d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01b      	beq.n	8004da2 <USB_ActivateEndpoint+0x336>
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d80:	83bb      	strh	r3, [r7, #28]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	8bbb      	ldrh	r3, [r7, #28]
 8004d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	837b      	strh	r3, [r7, #26]
 8004dba:	8b7b      	ldrh	r3, [r7, #26]
 8004dbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004dc0:	837b      	strh	r3, [r7, #26]
 8004dc2:	8b7b      	ldrh	r3, [r7, #26]
 8004dc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dc8:	837b      	strh	r3, [r7, #26]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8b7b      	ldrh	r3, [r7, #26]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]
 8004dea:	e1a2      	b.n	8005132 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e38:	4413      	add	r3, r2
 8004e3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	011a      	lsls	r2, r3, #4
 8004e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	891b      	ldrh	r3, [r3, #8]
 8004e50:	085b      	lsrs	r3, r3, #1
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6c:	4413      	add	r3, r2
 8004e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	011a      	lsls	r2, r3, #4
 8004e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	895b      	ldrh	r3, [r3, #10]
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f040 8091 	bne.w	8004fbc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ea8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01b      	beq.n	8004eea <USB_ActivateEndpoint+0x47e>
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ef8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01b      	beq.n	8004f3a <USB_ActivateEndpoint+0x4ce>
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f98:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]
 8004fba:	e0ba      	b.n	8005132 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004fcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01d      	beq.n	8005014 <USB_ActivateEndpoint+0x5a8>
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005010:	b29b      	uxth	r3, r3
 8005012:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01d      	beq.n	800506c <USB_ActivateEndpoint+0x600>
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005068:	b29b      	uxth	r3, r3
 800506a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	78db      	ldrb	r3, [r3, #3]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d024      	beq.n	80050be <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800508e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005092:	f083 0320 	eor.w	r3, r3, #32
 8005096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
 80050bc:	e01d      	b.n	80050fa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	441a      	add	r2, r3
 80050e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005136:	4618      	mov	r0, r3
 8005138:	376c      	adds	r7, #108	; 0x6c
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005140:	b480      	push	{r7}
 8005142:	b08d      	sub	sp, #52	; 0x34
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	7b1b      	ldrb	r3, [r3, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 808e 	bne.w	8005270 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d044      	beq.n	80051e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	81bb      	strh	r3, [r7, #12]
 800516a:	89bb      	ldrh	r3, [r7, #12]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <USB_DeactivateEndpoint+0x6c>
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	817b      	strh	r3, [r7, #10]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	897b      	ldrh	r3, [r7, #10]
 8005198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c2:	813b      	strh	r3, [r7, #8]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	893b      	ldrh	r3, [r7, #8]
 80051d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	8013      	strh	r3, [r2, #0]
 80051e4:	e192      	b.n	800550c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	827b      	strh	r3, [r7, #18]
 80051f4:	8a7b      	ldrh	r3, [r7, #18]
 80051f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01b      	beq.n	8005236 <USB_DeactivateEndpoint+0xf6>
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	823b      	strh	r3, [r7, #16]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	8a3b      	ldrh	r3, [r7, #16]
 8005222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800522e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005232:	b29b      	uxth	r3, r3
 8005234:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524c:	81fb      	strh	r3, [r7, #14]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	89fb      	ldrh	r3, [r7, #14]
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]
 800526e:	e14d      	b.n	800550c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f040 80a5 	bne.w	80053c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	843b      	strh	r3, [r7, #32]
 8005288:	8c3b      	ldrh	r3, [r7, #32]
 800528a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01b      	beq.n	80052ca <USB_DeactivateEndpoint+0x18a>
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a8:	83fb      	strh	r3, [r7, #30]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	8bfb      	ldrh	r3, [r7, #30]
 80052b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	83bb      	strh	r3, [r7, #28]
 80052d8:	8bbb      	ldrh	r3, [r7, #28]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01b      	beq.n	800531a <USB_DeactivateEndpoint+0x1da>
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f8:	837b      	strh	r3, [r7, #26]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	8b7b      	ldrh	r3, [r7, #26]
 8005306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005316:	b29b      	uxth	r3, r3
 8005318:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	833b      	strh	r3, [r7, #24]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8b3b      	ldrh	r3, [r7, #24]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005368:	82fb      	strh	r3, [r7, #22]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	441a      	add	r2, r3
 8005374:	8afb      	ldrh	r3, [r7, #22]
 8005376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005386:	b29b      	uxth	r3, r3
 8005388:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a0:	82bb      	strh	r3, [r7, #20]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	8abb      	ldrh	r3, [r7, #20]
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]
 80053c2:	e0a3      	b.n	800550c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80053d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80053d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01b      	beq.n	8005414 <USB_DeactivateEndpoint+0x2d4>
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	b29b      	uxth	r3, r3
 8005412:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005422:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <USB_DeactivateEndpoint+0x324>
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	853b      	strh	r3, [r7, #40]	; 0x28
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005460:	b29b      	uxth	r3, r3
 8005462:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3734      	adds	r7, #52	; 0x34
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b0c4      	sub	sp, #272	; 0x110
 800551c:	af00      	add	r7, sp, #0
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	6018      	str	r0, [r3, #0]
 8005522:	463b      	mov	r3, r7
 8005524:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	f040 8557 	bne.w	8005fe0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	463b      	mov	r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	429a      	cmp	r2, r3
 8005540:	d905      	bls.n	800554e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005542:	463b      	mov	r3, r7
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800554c:	e004      	b.n	8005558 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800554e:	463b      	mov	r3, r7
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005558:	463b      	mov	r3, r7
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	7b1b      	ldrb	r3, [r3, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d12c      	bne.n	80055bc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005562:	463b      	mov	r3, r7
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6959      	ldr	r1, [r3, #20]
 8005568:	463b      	mov	r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	88da      	ldrh	r2, [r3, #6]
 800556e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005572:	b29b      	uxth	r3, r3
 8005574:	1d38      	adds	r0, r7, #4
 8005576:	6800      	ldr	r0, [r0, #0]
 8005578:	f001 fa2c 	bl	80069d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4413      	add	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	011a      	lsls	r2, r3, #4
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4413      	add	r3, r2
 80055a0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80055a4:	f107 0310 	add.w	r3, r7, #16
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	f107 0310 	add.w	r3, r7, #16
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	f000 bcdd 	b.w	8005f76 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80055bc:	463b      	mov	r3, r7
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	78db      	ldrb	r3, [r3, #3]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	f040 8347 	bne.w	8005c56 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	f240 82eb 	bls.w	8005bb0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80055f8:	1d3b      	adds	r3, r7, #4
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800560a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800560e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005612:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	b29b      	uxth	r3, r3
 800561c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800561e:	463b      	mov	r3, r7
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005628:	1ad2      	subs	r2, r2, r3
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 8159 	beq.w	80058fe <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d164      	bne.n	8005726 <USB_EPStartXfer+0x20e>
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005662:	1d3b      	adds	r3, r7, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566a:	b29b      	uxth	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005670:	4413      	add	r3, r2
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	011a      	lsls	r2, r3, #4
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	4413      	add	r3, r2
 8005680:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005684:	62bb      	str	r3, [r7, #40]	; 0x28
 8005686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d112      	bne.n	80056b4 <USB_EPStartXfer+0x19c>
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005698:	b29a      	uxth	r2, r3
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	e054      	b.n	800575e <USB_EPStartXfer+0x246>
 80056b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ba:	d817      	bhi.n	80056ec <USB_EPStartXfer+0x1d4>
 80056bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d004      	beq.n	80056dc <USB_EPStartXfer+0x1c4>
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d6:	3301      	adds	r3, #1
 80056d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	029b      	lsls	r3, r3, #10
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	e038      	b.n	800575e <USB_EPStartXfer+0x246>
 80056ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <USB_EPStartXfer+0x1f4>
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005706:	3b01      	subs	r3, #1
 8005708:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005710:	b29b      	uxth	r3, r3
 8005712:	029b      	lsls	r3, r3, #10
 8005714:	b29b      	uxth	r3, r3
 8005716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571e:	b29a      	uxth	r2, r3
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	e01b      	b.n	800575e <USB_EPStartXfer+0x246>
 8005726:	463b      	mov	r3, r7
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d116      	bne.n	800575e <USB_EPStartXfer+0x246>
 8005730:	1d3b      	adds	r3, r7, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005738:	b29b      	uxth	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	4413      	add	r3, r2
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	011a      	lsls	r2, r3, #4
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	4413      	add	r3, r2
 800574e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005752:	633b      	str	r3, [r7, #48]	; 0x30
 8005754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005758:	b29a      	uxth	r2, r3
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	895b      	ldrh	r3, [r3, #10]
 8005764:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6959      	ldr	r1, [r3, #20]
 800576e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005772:	b29b      	uxth	r3, r3
 8005774:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005778:	1d38      	adds	r0, r7, #4
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	f001 f92a 	bl	80069d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005780:	463b      	mov	r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578a:	441a      	add	r2, r3
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a1a      	ldr	r2, [r3, #32]
 8005798:	463b      	mov	r3, r7
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d909      	bls.n	80057b6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ac:	1ad2      	subs	r2, r2, r3
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	621a      	str	r2, [r3, #32]
 80057b4:	e008      	b.n	80057c8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2200      	movs	r2, #0
 80057c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d164      	bne.n	800589c <USB_EPStartXfer+0x384>
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	463b      	mov	r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	011a      	lsls	r2, r3, #4
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057fa:	61bb      	str	r3, [r7, #24]
 80057fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d112      	bne.n	800582a <USB_EPStartXfer+0x312>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800580e:	b29a      	uxth	r2, r3
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005822:	b29a      	uxth	r2, r3
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e057      	b.n	80058da <USB_EPStartXfer+0x3c2>
 800582a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582e:	2b3e      	cmp	r3, #62	; 0x3e
 8005830:	d817      	bhi.n	8005862 <USB_EPStartXfer+0x34a>
 8005832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800583c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <USB_EPStartXfer+0x33a>
 8005848:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800584c:	3301      	adds	r3, #1
 800584e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005852:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005856:	b29b      	uxth	r3, r3
 8005858:	029b      	lsls	r3, r3, #10
 800585a:	b29a      	uxth	r2, r3
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e03b      	b.n	80058da <USB_EPStartXfer+0x3c2>
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800586c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <USB_EPStartXfer+0x36a>
 8005878:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800587c:	3b01      	subs	r3, #1
 800587e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005882:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005886:	b29b      	uxth	r3, r3
 8005888:	029b      	lsls	r3, r3, #10
 800588a:	b29b      	uxth	r3, r3
 800588c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005894:	b29a      	uxth	r2, r3
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	e01e      	b.n	80058da <USB_EPStartXfer+0x3c2>
 800589c:	463b      	mov	r3, r7
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d119      	bne.n	80058da <USB_EPStartXfer+0x3c2>
 80058a6:	1d3b      	adds	r3, r7, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	4413      	add	r3, r2
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
 80058be:	463b      	mov	r3, r7
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	011a      	lsls	r2, r3, #4
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	4413      	add	r3, r2
 80058ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058da:	463b      	mov	r3, r7
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	891b      	ldrh	r3, [r3, #8]
 80058e0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e4:	463b      	mov	r3, r7
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6959      	ldr	r1, [r3, #20]
 80058ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80058f4:	1d38      	adds	r0, r7, #4
 80058f6:	6800      	ldr	r0, [r0, #0]
 80058f8:	f001 f86c 	bl	80069d4 <USB_WritePMA>
 80058fc:	e33b      	b.n	8005f76 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d164      	bne.n	80059d2 <USB_EPStartXfer+0x4ba>
 8005908:	1d3b      	adds	r3, r7, #4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591c:	4413      	add	r3, r2
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	011a      	lsls	r2, r3, #4
 8005928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592a:	4413      	add	r3, r2
 800592c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005930:	64bb      	str	r3, [r7, #72]	; 0x48
 8005932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d112      	bne.n	8005960 <USB_EPStartXfer+0x448>
 800593a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005944:	b29a      	uxth	r2, r3
 8005946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005958:	b29a      	uxth	r2, r3
 800595a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e057      	b.n	8005a10 <USB_EPStartXfer+0x4f8>
 8005960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005964:	2b3e      	cmp	r3, #62	; 0x3e
 8005966:	d817      	bhi.n	8005998 <USB_EPStartXfer+0x480>
 8005968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <USB_EPStartXfer+0x470>
 800597e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005982:	3301      	adds	r3, #1
 8005984:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598c:	b29b      	uxth	r3, r3
 800598e:	029b      	lsls	r3, r3, #10
 8005990:	b29a      	uxth	r2, r3
 8005992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	e03b      	b.n	8005a10 <USB_EPStartXfer+0x4f8>
 8005998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <USB_EPStartXfer+0x4a0>
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b2:	3b01      	subs	r3, #1
 80059b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059bc:	b29b      	uxth	r3, r3
 80059be:	029b      	lsls	r3, r3, #10
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e01e      	b.n	8005a10 <USB_EPStartXfer+0x4f8>
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d119      	bne.n	8005a10 <USB_EPStartXfer+0x4f8>
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	657b      	str	r3, [r7, #84]	; 0x54
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f0:	4413      	add	r3, r2
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
 80059f4:	463b      	mov	r3, r7
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	011a      	lsls	r2, r3, #4
 80059fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059fe:	4413      	add	r3, r2
 8005a00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a04:	653b      	str	r3, [r7, #80]	; 0x50
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a10:	463b      	mov	r3, r7
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	891b      	ldrh	r3, [r3, #8]
 8005a16:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6959      	ldr	r1, [r3, #20]
 8005a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005a2a:	1d38      	adds	r0, r7, #4
 8005a2c:	6800      	ldr	r0, [r0, #0]
 8005a2e:	f000 ffd1 	bl	80069d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a32:	463b      	mov	r3, r7
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3c:	441a      	add	r2, r3
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a44:	463b      	mov	r3, r7
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a1a      	ldr	r2, [r3, #32]
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d909      	bls.n	8005a68 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a1a      	ldr	r2, [r3, #32]
 8005a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	463b      	mov	r3, r7
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	621a      	str	r2, [r3, #32]
 8005a66:	e008      	b.n	8005a7a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a80:	463b      	mov	r3, r7
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d164      	bne.n	8005b54 <USB_EPStartXfer+0x63c>
 8005a8a:	1d3b      	adds	r3, r7, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a90:	1d3b      	adds	r3, r7, #4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	4413      	add	r3, r2
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	011a      	lsls	r2, r3, #4
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aac:	4413      	add	r3, r2
 8005aae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d112      	bne.n	8005ae2 <USB_EPStartXfer+0x5ca>
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	801a      	strh	r2, [r3, #0]
 8005ae0:	e054      	b.n	8005b8c <USB_EPStartXfer+0x674>
 8005ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae8:	d817      	bhi.n	8005b1a <USB_EPStartXfer+0x602>
 8005aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <USB_EPStartXfer+0x5f2>
 8005b00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b04:	3301      	adds	r3, #1
 8005b06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	e038      	b.n	8005b8c <USB_EPStartXfer+0x674>
 8005b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <USB_EPStartXfer+0x622>
 8005b30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b34:	3b01      	subs	r3, #1
 8005b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e01b      	b.n	8005b8c <USB_EPStartXfer+0x674>
 8005b54:	463b      	mov	r3, r7
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d116      	bne.n	8005b8c <USB_EPStartXfer+0x674>
 8005b5e:	1d3b      	adds	r3, r7, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6c:	4413      	add	r3, r2
 8005b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	011a      	lsls	r2, r3, #4
 8005b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b80:	643b      	str	r3, [r7, #64]	; 0x40
 8005b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	895b      	ldrh	r3, [r3, #10]
 8005b92:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6959      	ldr	r1, [r3, #20]
 8005b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ba6:	1d38      	adds	r0, r7, #4
 8005ba8:	6800      	ldr	r0, [r0, #0]
 8005baa:	f000 ff13 	bl	80069d4 <USB_WritePMA>
 8005bae:	e1e2      	b.n	8005f76 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005bba:	1d3b      	adds	r3, r7, #4
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	463b      	mov	r3, r7
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	663b      	str	r3, [r7, #96]	; 0x60
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c12:	4413      	add	r3, r2
 8005c14:	663b      	str	r3, [r7, #96]	; 0x60
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	011a      	lsls	r2, r3, #4
 8005c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c20:	4413      	add	r3, r2
 8005c22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	891b      	ldrh	r3, [r3, #8]
 8005c38:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6959      	ldr	r1, [r3, #20]
 8005c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c4c:	1d38      	adds	r0, r7, #4
 8005c4e:	6800      	ldr	r0, [r0, #0]
 8005c50:	f000 fec0 	bl	80069d4 <USB_WritePMA>
 8005c54:	e18f      	b.n	8005f76 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 808f 	beq.w	8005d90 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d164      	bne.n	8005d4c <USB_EPStartXfer+0x834>
 8005c82:	1d3b      	adds	r3, r7, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	673b      	str	r3, [r7, #112]	; 0x70
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c96:	4413      	add	r3, r2
 8005c98:	673b      	str	r3, [r7, #112]	; 0x70
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	011a      	lsls	r2, r3, #4
 8005ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d112      	bne.n	8005cda <USB_EPStartXfer+0x7c2>
 8005cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e054      	b.n	8005d84 <USB_EPStartXfer+0x86c>
 8005cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cde:	2b3e      	cmp	r3, #62	; 0x3e
 8005ce0:	d817      	bhi.n	8005d12 <USB_EPStartXfer+0x7fa>
 8005ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <USB_EPStartXfer+0x7ea>
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e038      	b.n	8005d84 <USB_EPStartXfer+0x86c>
 8005d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <USB_EPStartXfer+0x81a>
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	e01b      	b.n	8005d84 <USB_EPStartXfer+0x86c>
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d116      	bne.n	8005d84 <USB_EPStartXfer+0x86c>
 8005d56:	1d3b      	adds	r3, r7, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d64:	4413      	add	r3, r2
 8005d66:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d68:	463b      	mov	r3, r7
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	011a      	lsls	r2, r3, #4
 8005d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d72:	4413      	add	r3, r2
 8005d74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d78:	677b      	str	r3, [r7, #116]	; 0x74
 8005d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	895b      	ldrh	r3, [r3, #10]
 8005d8a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005d8e:	e097      	b.n	8005ec0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d168      	bne.n	8005e6c <USB_EPStartXfer+0x954>
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005db2:	4413      	add	r3, r2
 8005db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	011a      	lsls	r2, r3, #4
 8005dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d112      	bne.n	8005dfa <USB_EPStartXfer+0x8e2>
 8005dd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	e05d      	b.n	8005eb6 <USB_EPStartXfer+0x99e>
 8005dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8005e00:	d817      	bhi.n	8005e32 <USB_EPStartXfer+0x91a>
 8005e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <USB_EPStartXfer+0x90a>
 8005e18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	e041      	b.n	8005eb6 <USB_EPStartXfer+0x99e>
 8005e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <USB_EPStartXfer+0x93a>
 8005e48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	029b      	lsls	r3, r3, #10
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	e024      	b.n	8005eb6 <USB_EPStartXfer+0x99e>
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d11f      	bne.n	8005eb6 <USB_EPStartXfer+0x99e>
 8005e76:	1d3b      	adds	r3, r7, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e8e:	4413      	add	r3, r2
 8005e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	011a      	lsls	r2, r3, #4
 8005e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	891b      	ldrh	r3, [r3, #8]
 8005ebc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6959      	ldr	r1, [r3, #20]
 8005ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ed0:	1d38      	adds	r0, r7, #4
 8005ed2:	6800      	ldr	r0, [r0, #0]
 8005ed4:	f000 fd7e 	bl	80069d4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005ed8:	463b      	mov	r3, r7
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d122      	bne.n	8005f28 <USB_EPStartXfer+0xa10>
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8013      	strh	r3, [r2, #0]
 8005f26:	e026      	b.n	8005f76 <USB_EPStartXfer+0xa5e>
 8005f28:	463b      	mov	r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d121      	bne.n	8005f76 <USB_EPStartXfer+0xa5e>
 8005f32:	1d3b      	adds	r3, r7, #4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005f50:	1d3b      	adds	r3, r7, #4
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f107 020e 	add.w	r2, r7, #14
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	8013      	strh	r3, [r2, #0]
 8005f96:	f107 030e 	add.w	r3, r7, #14
 8005f9a:	f107 020e 	add.w	r2, r7, #14
 8005f9e:	8812      	ldrh	r2, [r2, #0]
 8005fa0:	f082 0210 	eor.w	r2, r2, #16
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	f107 030e 	add.w	r3, r7, #14
 8005faa:	f107 020e 	add.w	r2, r7, #14
 8005fae:	8812      	ldrh	r2, [r2, #0]
 8005fb0:	f082 0220 	eor.w	r2, r2, #32
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	463b      	mov	r3, r7
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	f107 030e 	add.w	r3, r7, #14
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	8013      	strh	r3, [r2, #0]
 8005fde:	e3b5      	b.n	800674c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	7b1b      	ldrb	r3, [r3, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f040 8090 	bne.w	800610c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fec:	463b      	mov	r3, r7
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d90e      	bls.n	800601a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006006:	463b      	mov	r3, r7
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006010:	1ad2      	subs	r2, r2, r3
 8006012:	463b      	mov	r3, r7
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	619a      	str	r2, [r3, #24]
 8006018:	e008      	b.n	800602c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006024:	463b      	mov	r3, r7
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2200      	movs	r2, #0
 800602a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800602c:	1d3b      	adds	r3, r7, #4
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006034:	1d3b      	adds	r3, r7, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603c:	b29b      	uxth	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006044:	4413      	add	r3, r2
 8006046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800604a:	463b      	mov	r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	011a      	lsls	r2, r3, #4
 8006052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006056:	4413      	add	r3, r2
 8006058:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800605c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d116      	bne.n	8006096 <USB_EPStartXfer+0xb7e>
 8006068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006074:	b29a      	uxth	r2, r3
 8006076:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800607a:	801a      	strh	r2, [r3, #0]
 800607c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608c:	b29a      	uxth	r2, r3
 800608e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006092:	801a      	strh	r2, [r3, #0]
 8006094:	e32c      	b.n	80066f0 <USB_EPStartXfer+0x11d8>
 8006096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609a:	2b3e      	cmp	r3, #62	; 0x3e
 800609c:	d818      	bhi.n	80060d0 <USB_EPStartXfer+0xbb8>
 800609e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d004      	beq.n	80060be <USB_EPStartXfer+0xba6>
 80060b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060b8:	3301      	adds	r3, #1
 80060ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e30f      	b.n	80066f0 <USB_EPStartXfer+0x11d8>
 80060d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <USB_EPStartXfer+0xbd8>
 80060e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060ea:	3b01      	subs	r3, #1
 80060ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e2f1      	b.n	80066f0 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800610c:	463b      	mov	r3, r7
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	78db      	ldrb	r3, [r3, #3]
 8006112:	2b02      	cmp	r3, #2
 8006114:	f040 818f 	bne.w	8006436 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006118:	463b      	mov	r3, r7
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d175      	bne.n	800620e <USB_EPStartXfer+0xcf6>
 8006122:	1d3b      	adds	r3, r7, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800612a:	1d3b      	adds	r3, r7, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006132:	b29b      	uxth	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800613a:	4413      	add	r3, r2
 800613c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006140:	463b      	mov	r3, r7
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	011a      	lsls	r2, r3, #4
 8006148:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800614c:	4413      	add	r3, r2
 800614e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d116      	bne.n	800618e <USB_EPStartXfer+0xc76>
 8006160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800616c:	b29a      	uxth	r2, r3
 800616e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006184:	b29a      	uxth	r2, r3
 8006186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e065      	b.n	800625a <USB_EPStartXfer+0xd42>
 800618e:	463b      	mov	r3, r7
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b3e      	cmp	r3, #62	; 0x3e
 8006196:	d81a      	bhi.n	80061ce <USB_EPStartXfer+0xcb6>
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061a4:	463b      	mov	r3, r7
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <USB_EPStartXfer+0xca4>
 80061b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061b6:	3301      	adds	r3, #1
 80061b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	029b      	lsls	r3, r3, #10
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	e045      	b.n	800625a <USB_EPStartXfer+0xd42>
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	095b      	lsrs	r3, r3, #5
 80061d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061da:	463b      	mov	r3, r7
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <USB_EPStartXfer+0xcda>
 80061e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061ec:	3b01      	subs	r3, #1
 80061ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	029b      	lsls	r3, r3, #10
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006204:	b29a      	uxth	r2, r3
 8006206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	e025      	b.n	800625a <USB_EPStartXfer+0xd42>
 800620e:	463b      	mov	r3, r7
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d120      	bne.n	800625a <USB_EPStartXfer+0xd42>
 8006218:	1d3b      	adds	r3, r7, #4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006220:	1d3b      	adds	r3, r7, #4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006230:	4413      	add	r3, r2
 8006232:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006236:	463b      	mov	r3, r7
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	011a      	lsls	r2, r3, #4
 800623e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006242:	4413      	add	r3, r2
 8006244:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	b29a      	uxth	r2, r3
 8006254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006262:	463b      	mov	r3, r7
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d175      	bne.n	8006358 <USB_EPStartXfer+0xe40>
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006284:	4413      	add	r3, r2
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800628a:	463b      	mov	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	011a      	lsls	r2, r3, #4
 8006292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006296:	4413      	add	r3, r2
 8006298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800629c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d116      	bne.n	80062d8 <USB_EPStartXfer+0xdc0>
 80062aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	e061      	b.n	800639c <USB_EPStartXfer+0xe84>
 80062d8:	463b      	mov	r3, r7
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b3e      	cmp	r3, #62	; 0x3e
 80062e0:	d81a      	bhi.n	8006318 <USB_EPStartXfer+0xe00>
 80062e2:	463b      	mov	r3, r7
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <USB_EPStartXfer+0xdee>
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006300:	3301      	adds	r3, #1
 8006302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630a:	b29b      	uxth	r3, r3
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	b29a      	uxth	r2, r3
 8006310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e041      	b.n	800639c <USB_EPStartXfer+0xe84>
 8006318:	463b      	mov	r3, r7
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006324:	463b      	mov	r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2b00      	cmp	r3, #0
 8006330:	d104      	bne.n	800633c <USB_EPStartXfer+0xe24>
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006336:	3b01      	subs	r3, #1
 8006338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006340:	b29b      	uxth	r3, r3
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	b29b      	uxth	r3, r3
 8006346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634e:	b29a      	uxth	r2, r3
 8006350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	e021      	b.n	800639c <USB_EPStartXfer+0xe84>
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d11c      	bne.n	800639c <USB_EPStartXfer+0xe84>
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006372:	4413      	add	r3, r2
 8006374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	011a      	lsls	r2, r3, #4
 8006380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006384:	4413      	add	r3, r2
 8006386:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800638a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800639a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800639c:	463b      	mov	r3, r7
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 81a4 	beq.w	80066f0 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	463b      	mov	r3, r7
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <USB_EPStartXfer+0xebc>
 80063c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10d      	bne.n	80063f0 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 8187 	bne.w	80066f0 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80063e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f040 8180 	bne.w	80066f0 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	463b      	mov	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800640e:	1d3b      	adds	r3, r7, #4
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	463b      	mov	r3, r7
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
 8006434:	e15c      	b.n	80066f0 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	78db      	ldrb	r3, [r3, #3]
 800643c:	2b01      	cmp	r3, #1
 800643e:	f040 8155 	bne.w	80066ec <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006442:	463b      	mov	r3, r7
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d90e      	bls.n	8006470 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006452:	463b      	mov	r3, r7
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800645c:	463b      	mov	r3, r7
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	463b      	mov	r3, r7
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	619a      	str	r2, [r3, #24]
 800646e:	e008      	b.n	8006482 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006470:	463b      	mov	r3, r7
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006482:	463b      	mov	r3, r7
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d16f      	bne.n	800656c <USB_EPStartXfer+0x1054>
 800648c:	1d3b      	adds	r3, r7, #4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800649c:	b29b      	uxth	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064a4:	4413      	add	r3, r2
 80064a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	011a      	lsls	r2, r3, #4
 80064b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064b6:	4413      	add	r3, r2
 80064b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d116      	bne.n	80064f6 <USB_EPStartXfer+0xfde>
 80064c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e05f      	b.n	80065b6 <USB_EPStartXfer+0x109e>
 80064f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064fa:	2b3e      	cmp	r3, #62	; 0x3e
 80064fc:	d818      	bhi.n	8006530 <USB_EPStartXfer+0x1018>
 80064fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <USB_EPStartXfer+0x1006>
 8006514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006518:	3301      	adds	r3, #1
 800651a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800651e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006522:	b29b      	uxth	r3, r3
 8006524:	029b      	lsls	r3, r3, #10
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e042      	b.n	80065b6 <USB_EPStartXfer+0x109e>
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800653a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <USB_EPStartXfer+0x1038>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654a:	3b01      	subs	r3, #1
 800654c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29b      	uxth	r3, r3
 800655a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006562:	b29a      	uxth	r2, r3
 8006564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	e024      	b.n	80065b6 <USB_EPStartXfer+0x109e>
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d11f      	bne.n	80065b6 <USB_EPStartXfer+0x109e>
 8006576:	1d3b      	adds	r3, r7, #4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800657e:	1d3b      	adds	r3, r7, #4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006586:	b29b      	uxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658e:	4413      	add	r3, r2
 8006590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006594:	463b      	mov	r3, r7
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	011a      	lsls	r2, r3, #4
 800659c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a0:	4413      	add	r3, r2
 80065a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	1d3b      	adds	r3, r7, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065be:	463b      	mov	r3, r7
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d16f      	bne.n	80066a8 <USB_EPStartXfer+0x1190>
 80065c8:	1d3b      	adds	r3, r7, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d0:	1d3b      	adds	r3, r7, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d8:	b29b      	uxth	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065e0:	4413      	add	r3, r2
 80065e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	011a      	lsls	r2, r3, #4
 80065ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065f2:	4413      	add	r3, r2
 80065f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d116      	bne.n	8006632 <USB_EPStartXfer+0x111a>
 8006604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e05e      	b.n	80066f0 <USB_EPStartXfer+0x11d8>
 8006632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006636:	2b3e      	cmp	r3, #62	; 0x3e
 8006638:	d818      	bhi.n	800666c <USB_EPStartXfer+0x1154>
 800663a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <USB_EPStartXfer+0x1142>
 8006650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006654:	3301      	adds	r3, #1
 8006656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800665a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800665e:	b29b      	uxth	r3, r3
 8006660:	029b      	lsls	r3, r3, #10
 8006662:	b29a      	uxth	r2, r3
 8006664:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e041      	b.n	80066f0 <USB_EPStartXfer+0x11d8>
 800666c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <USB_EPStartXfer+0x1174>
 8006682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006686:	3b01      	subs	r3, #1
 8006688:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800668c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006690:	b29b      	uxth	r3, r3
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	b29b      	uxth	r3, r3
 8006696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	e023      	b.n	80066f0 <USB_EPStartXfer+0x11d8>
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d11e      	bne.n	80066f0 <USB_EPStartXfer+0x11d8>
 80066b2:	1d3b      	adds	r3, r7, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066c2:	4413      	add	r3, r2
 80066c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066c8:	463b      	mov	r3, r7
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	011a      	lsls	r2, r3, #4
 80066d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d4:	4413      	add	r3, r2
 80066d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e001      	b.n	80066f0 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e02e      	b.n	800674e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066f0:	1d3b      	adds	r3, r7, #4
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	463b      	mov	r3, r7
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800670e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006712:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006716:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800671a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800671e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006722:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006726:	1d3b      	adds	r3, r7, #4
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	463b      	mov	r3, r7
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006748:	b29b      	uxth	r3, r3
 800674a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d020      	beq.n	80067ac <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006780:	81bb      	strh	r3, [r7, #12]
 8006782:	89bb      	ldrh	r3, [r7, #12]
 8006784:	f083 0310 	eor.w	r3, r3, #16
 8006788:	81bb      	strh	r3, [r7, #12]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	89bb      	ldrh	r3, [r7, #12]
 8006796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	8013      	strh	r3, [r2, #0]
 80067aa:	e01f      	b.n	80067ec <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	81fb      	strh	r3, [r7, #14]
 80067c4:	89fb      	ldrh	r3, [r7, #14]
 80067c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067ca:	81fb      	strh	r3, [r7, #14]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	441a      	add	r2, r3
 80067d6:	89fb      	ldrh	r3, [r7, #14]
 80067d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	7b1b      	ldrb	r3, [r3, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 809d 	bne.w	8006946 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d04c      	beq.n	80068ae <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	823b      	strh	r3, [r7, #16]
 8006822:	8a3b      	ldrh	r3, [r7, #16]
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01b      	beq.n	8006864 <USB_EPClearStall+0x6c>
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	81fb      	strh	r3, [r7, #14]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	89fb      	ldrh	r3, [r7, #14]
 8006850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006860:	b29b      	uxth	r3, r3
 8006862:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	78db      	ldrb	r3, [r3, #3]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d06c      	beq.n	8006946 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006882:	81bb      	strh	r3, [r7, #12]
 8006884:	89bb      	ldrh	r3, [r7, #12]
 8006886:	f083 0320 	eor.w	r3, r3, #32
 800688a:	81bb      	strh	r3, [r7, #12]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	89bb      	ldrh	r3, [r7, #12]
 8006898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8013      	strh	r3, [r2, #0]
 80068ac:	e04b      	b.n	8006946 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	82fb      	strh	r3, [r7, #22]
 80068bc:	8afb      	ldrh	r3, [r7, #22]
 80068be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01b      	beq.n	80068fe <USB_EPClearStall+0x106>
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068dc:	82bb      	strh	r3, [r7, #20]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	441a      	add	r2, r3
 80068e8:	8abb      	ldrh	r3, [r7, #20]
 80068ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006914:	827b      	strh	r3, [r7, #18]
 8006916:	8a7b      	ldrh	r3, [r7, #18]
 8006918:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800691c:	827b      	strh	r3, [r7, #18]
 800691e:	8a7b      	ldrh	r3, [r7, #18]
 8006920:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006924:	827b      	strh	r3, [r7, #18]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	8a7b      	ldrh	r3, [r7, #18]
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr

080069d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b08d      	sub	sp, #52	; 0x34
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4611      	mov	r1, r2
 80069e0:	461a      	mov	r2, r3
 80069e2:	460b      	mov	r3, r1
 80069e4:	80fb      	strh	r3, [r7, #6]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80069ea:	88bb      	ldrh	r3, [r7, #4]
 80069ec:	3301      	adds	r3, #1
 80069ee:	085b      	lsrs	r3, r3, #1
 80069f0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	005a      	lsls	r2, r3, #1
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a06:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a0c:	e01e      	b.n	8006a4c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	3301      	adds	r3, #1
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	3302      	adds	r3, #2
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	3301      	adds	r3, #1
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1dd      	bne.n	8006a0e <USB_WritePMA+0x3a>
  }
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	3734      	adds	r7, #52	; 0x34
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b08b      	sub	sp, #44	; 0x2c
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	80fb      	strh	r3, [r7, #6]
 8006a70:	4613      	mov	r3, r2
 8006a72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a74:	88bb      	ldrh	r3, [r7, #4]
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	005a      	lsls	r2, r3, #1
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a90:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
 8006a96:	e01b      	b.n	8006ad0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	3302      	adds	r3, #2
 8006ac8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	3b01      	subs	r3, #1
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e0      	bne.n	8006a98 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ad6:	88bb      	ldrh	r3, [r7, #4]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	701a      	strb	r2, [r3, #0]
  }
}
 8006af2:	bf00      	nop
 8006af4:	372c      	adds	r7, #44	; 0x2c
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7c1b      	ldrb	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d115      	bne.n	8006b40 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b18:	2202      	movs	r2, #2
 8006b1a:	2181      	movs	r1, #129	; 0x81
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 ffb2 	bl	8008a86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	2101      	movs	r1, #1
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 ffa8 	bl	8008a86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006b3e:	e012      	b.n	8006b66 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b40:	2340      	movs	r3, #64	; 0x40
 8006b42:	2202      	movs	r2, #2
 8006b44:	2181      	movs	r1, #129	; 0x81
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 ff9d 	bl	8008a86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b52:	2340      	movs	r3, #64	; 0x40
 8006b54:	2202      	movs	r2, #2
 8006b56:	2101      	movs	r1, #1
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 ff94 	bl	8008a86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b66:	2308      	movs	r3, #8
 8006b68:	2203      	movs	r2, #3
 8006b6a:	2182      	movs	r1, #130	; 0x82
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 ff8a 	bl	8008a86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b7c:	f002 f8aa 	bl	8008cd4 <USBD_static_malloc>
 8006b80:	4602      	mov	r2, r0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d102      	bne.n	8006b98 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006b92:	2301      	movs	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]
 8006b96:	e026      	b.n	8006be6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7c1b      	ldrb	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bcc:	2101      	movs	r1, #1
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f002 f84a 	bl	8008c68 <USBD_LL_PrepareReceive>
 8006bd4:	e007      	b.n	8006be6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bdc:	2340      	movs	r3, #64	; 0x40
 8006bde:	2101      	movs	r1, #1
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f002 f841 	bl	8008c68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c00:	2181      	movs	r1, #129	; 0x81
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 ff65 	bl	8008ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c0e:	2101      	movs	r1, #1
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 ff5e 	bl	8008ad2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c1e:	2182      	movs	r1, #130	; 0x82
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 ff56 	bl	8008ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00e      	beq.n	8006c54 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c46:	4618      	mov	r0, r3
 8006c48:	f002 f850 	bl	8008cec <USBD_static_free>
    pdev->pClassData = NULL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d039      	beq.n	8006cfc <USBD_CDC_Setup+0x9e>
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d17f      	bne.n	8006d8c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	88db      	ldrh	r3, [r3, #6]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d029      	beq.n	8006ce8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	b25b      	sxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da11      	bge.n	8006cc2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006caa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	88d2      	ldrh	r2, [r2, #6]
 8006cb0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cb2:	6939      	ldr	r1, [r7, #16]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	88db      	ldrh	r3, [r3, #6]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fa09 	bl	80080d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006cc0:	e06b      	b.n	8006d9a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785a      	ldrb	r2, [r3, #1]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	88db      	ldrh	r3, [r3, #6]
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cd8:	6939      	ldr	r1, [r7, #16]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	88db      	ldrh	r3, [r3, #6]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 fa24 	bl	800812e <USBD_CtlPrepareRx>
      break;
 8006ce6:	e058      	b.n	8006d9a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	7850      	ldrb	r0, [r2, #1]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	4798      	blx	r3
      break;
 8006cfa:	e04e      	b.n	8006d9a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b0b      	cmp	r3, #11
 8006d02:	d02e      	beq.n	8006d62 <USBD_CDC_Setup+0x104>
 8006d04:	2b0b      	cmp	r3, #11
 8006d06:	dc38      	bgt.n	8006d7a <USBD_CDC_Setup+0x11c>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <USBD_CDC_Setup+0xb4>
 8006d0c:	2b0a      	cmp	r3, #10
 8006d0e:	d014      	beq.n	8006d3a <USBD_CDC_Setup+0xdc>
 8006d10:	e033      	b.n	8006d7a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d107      	bne.n	8006d2c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d1c:	f107 030c 	add.w	r3, r7, #12
 8006d20:	2202      	movs	r2, #2
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 f9d4 	bl	80080d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d2a:	e02e      	b.n	8006d8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f965 	bl	8007ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8006d34:	2302      	movs	r3, #2
 8006d36:	75fb      	strb	r3, [r7, #23]
          break;
 8006d38:	e027      	b.n	8006d8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d107      	bne.n	8006d54 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d44:	f107 030f 	add.w	r3, r7, #15
 8006d48:	2201      	movs	r2, #1
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 f9c0 	bl	80080d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d52:	e01a      	b.n	8006d8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 f951 	bl	8007ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	75fb      	strb	r3, [r7, #23]
          break;
 8006d60:	e013      	b.n	8006d8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d00d      	beq.n	8006d88 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 f945 	bl	8007ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8006d74:	2302      	movs	r3, #2
 8006d76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d78:	e006      	b.n	8006d88 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 f93e 	bl	8007ffe <USBD_CtlError>
          ret = USBD_FAIL;
 8006d82:	2302      	movs	r3, #2
 8006d84:	75fb      	strb	r3, [r7, #23]
          break;
 8006d86:	e000      	b.n	8006d8a <USBD_CDC_Setup+0x12c>
          break;
 8006d88:	bf00      	nop
      }
      break;
 8006d8a:	e006      	b.n	8006d9a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 f935 	bl	8007ffe <USBD_CtlError>
      ret = USBD_FAIL;
 8006d94:	2302      	movs	r3, #2
 8006d96:	75fb      	strb	r3, [r7, #23]
      break;
 8006d98:	bf00      	nop
  }

  return ret;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dbe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d03a      	beq.n	8006e40 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006dca:	78fa      	ldrb	r2, [r7, #3]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	331c      	adds	r3, #28
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d029      	beq.n	8006e34 <USBD_CDC_DataIn+0x90>
 8006de0:	78fa      	ldrb	r2, [r7, #3]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	331c      	adds	r3, #28
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	78f9      	ldrb	r1, [r7, #3]
 8006df4:	68b8      	ldr	r0, [r7, #8]
 8006df6:	460b      	mov	r3, r1
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	4403      	add	r3, r0
 8006e00:	3338      	adds	r3, #56	; 0x38
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e08:	fb03 f301 	mul.w	r3, r3, r1
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d110      	bne.n	8006e34 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	331c      	adds	r3, #28
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e26:	78f9      	ldrb	r1, [r7, #3]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 fef8 	bl	8008c22 <USBD_LL_Transmit>
 8006e32:	e003      	b.n	8006e3c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	e000      	b.n	8006e42 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e40:	2302      	movs	r3, #2
  }
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 ff23 	bl	8008cae <USBD_LL_GetRxDataSize>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4798      	blx	r3

    return USBD_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e000      	b.n	8006e98 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006e96:	2302      	movs	r3, #2
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d015      	beq.n	8006ee6 <USBD_CDC_EP0_RxReady+0x46>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ec0:	2bff      	cmp	r3, #255	; 0xff
 8006ec2:	d010      	beq.n	8006ee6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ed2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006eda:	b292      	uxth	r2, r2
 8006edc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	22ff      	movs	r2, #255	; 0xff
 8006ee2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2243      	movs	r2, #67	; 0x43
 8006efc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000098 	.word	0x20000098

08006f10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2243      	movs	r2, #67	; 0x43
 8006f1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f1e:	4b03      	ldr	r3, [pc, #12]	; (8006f2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000054 	.word	0x20000054

08006f30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2243      	movs	r2, #67	; 0x43
 8006f3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f3e:	4b03      	ldr	r3, [pc, #12]	; (8006f4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	200000dc 	.word	0x200000dc

08006f50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f5e:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000010 	.word	0x20000010

08006f70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006fba:	88fa      	ldrh	r2, [r7, #6]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr

08006fce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fde:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bc80      	pop	{r7}
 8006ff2:	4770      	bx	lr

08006ff4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d01c      	beq.n	8007048 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007014:	2b00      	cmp	r3, #0
 8007016:	d115      	bne.n	8007044 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007036:	b29b      	uxth	r3, r3
 8007038:	2181      	movs	r1, #129	; 0x81
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fdf1 	bl	8008c22 <USBD_LL_Transmit>

      return USBD_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	e002      	b.n	800704a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007060:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d017      	beq.n	800709c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7c1b      	ldrb	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d109      	bne.n	8007088 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800707a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800707e:	2101      	movs	r1, #1
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 fdf1 	bl	8008c68 <USBD_LL_PrepareReceive>
 8007086:	e007      	b.n	8007098 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800708e:	2340      	movs	r3, #64	; 0x40
 8007090:	2101      	movs	r1, #1
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fde8 	bl	8008c68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	e000      	b.n	800709e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800709c:	2302      	movs	r3, #2
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	4613      	mov	r3, r2
 80070b2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	e01a      	b.n	80070f4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	79fa      	ldrb	r2, [r7, #7]
 80070ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f001 fc55 	bl	800899c <USBD_LL_Init>

  return USBD_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d006      	beq.n	800711e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]
 800711c:	e001      	b.n	8007122 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800711e:	2302      	movs	r3, #2
 8007120:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	bc80      	pop	{r7}
 800712c:	4770      	bx	lr

0800712e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fc8a 	bl	8008a50 <USBD_LL_Start>

  return USBD_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr

0800715a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007166:	2302      	movs	r3, #2
 8007168:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00c      	beq.n	800718e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	78fa      	ldrb	r2, [r7, #3]
 800717e:	4611      	mov	r1, r2
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	4798      	blx	r3
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	78fa      	ldrb	r2, [r7, #3]
 80071ae:	4611      	mov	r1, r2
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3

  return USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fed8 	bl	8007f86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071e4:	461a      	mov	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d016      	beq.n	8007228 <USBD_LL_SetupStage+0x6a>
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d81c      	bhi.n	8007238 <USBD_LL_SetupStage+0x7a>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <USBD_LL_SetupStage+0x4a>
 8007202:	2b01      	cmp	r3, #1
 8007204:	d008      	beq.n	8007218 <USBD_LL_SetupStage+0x5a>
 8007206:	e017      	b.n	8007238 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f9cb 	bl	80075ac <USBD_StdDevReq>
      break;
 8007216:	e01a      	b.n	800724e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fa2d 	bl	8007680 <USBD_StdItfReq>
      break;
 8007226:	e012      	b.n	800724e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa6d 	bl	8007710 <USBD_StdEPReq>
      break;
 8007236:	e00a      	b.n	800724e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800723e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007242:	b2db      	uxtb	r3, r3
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fc62 	bl	8008b10 <USBD_LL_StallEP>
      break;
 800724c:	bf00      	nop
  }

  return USBD_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	460b      	mov	r3, r1
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d14b      	bne.n	8007304 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007272:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800727a:	2b03      	cmp	r3, #3
 800727c:	d134      	bne.n	80072e8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	d919      	bls.n	80072be <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	1ad2      	subs	r2, r2, r3
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d203      	bcs.n	80072ac <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	e002      	b.n	80072b2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 ff57 	bl	800816a <USBD_CtlContinueRx>
 80072bc:	e038      	b.n	8007330 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d105      	bne.n	80072e0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 ff54 	bl	800818e <USBD_CtlSendStatus>
 80072e6:	e023      	b.n	8007330 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072ee:	2b05      	cmp	r3, #5
 80072f0:	d11e      	bne.n	8007330 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072fa:	2100      	movs	r1, #0
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f001 fc07 	bl	8008b10 <USBD_LL_StallEP>
 8007302:	e015      	b.n	8007330 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00d      	beq.n	800732c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007316:	2b03      	cmp	r3, #3
 8007318:	d108      	bne.n	800732c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	7afa      	ldrb	r2, [r7, #11]
 8007324:	4611      	mov	r1, r2
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	4798      	blx	r3
 800732a:	e001      	b.n	8007330 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800732c:	2302      	movs	r3, #2
 800732e:	e000      	b.n	8007332 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b086      	sub	sp, #24
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	460b      	mov	r3, r1
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d17f      	bne.n	800744e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3314      	adds	r3, #20
 8007352:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800735a:	2b02      	cmp	r3, #2
 800735c:	d15c      	bne.n	8007418 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	429a      	cmp	r2, r3
 8007368:	d915      	bls.n	8007396 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	b29b      	uxth	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fec1 	bl	800810a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007388:	2300      	movs	r3, #0
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f001 fc6a 	bl	8008c68 <USBD_LL_PrepareReceive>
 8007394:	e04e      	b.n	8007434 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	6912      	ldr	r2, [r2, #16]
 800739e:	fbb3 f1f2 	udiv	r1, r3, r2
 80073a2:	fb02 f201 	mul.w	r2, r2, r1
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d11c      	bne.n	80073e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d316      	bcc.n	80073e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d20f      	bcs.n	80073e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fe9d 	bl	800810a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d8:	2300      	movs	r3, #0
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 fc42 	bl	8008c68 <USBD_LL_PrepareReceive>
 80073e4:	e026      	b.n	8007434 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d105      	bne.n	8007408 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007408:	2180      	movs	r1, #128	; 0x80
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f001 fb80 	bl	8008b10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fecf 	bl	80081b4 <USBD_CtlReceiveStatus>
 8007416:	e00d      	b.n	8007434 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800741e:	2b04      	cmp	r3, #4
 8007420:	d004      	beq.n	800742c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f001 fb6e 	bl	8008b10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800743a:	2b01      	cmp	r3, #1
 800743c:	d11d      	bne.n	800747a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff fe81 	bl	8007146 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800744c:	e015      	b.n	800747a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00d      	beq.n	8007476 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007460:	2b03      	cmp	r3, #3
 8007462:	d108      	bne.n	8007476 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	7afa      	ldrb	r2, [r7, #11]
 800746e:	4611      	mov	r1, r2
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	4798      	blx	r3
 8007474:	e001      	b.n	800747a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007476:	2302      	movs	r3, #2
 8007478:	e000      	b.n	800747c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800748c:	2340      	movs	r3, #64	; 0x40
 800748e:	2200      	movs	r2, #0
 8007490:	2100      	movs	r1, #0
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 faf7 	bl	8008a86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2240      	movs	r2, #64	; 0x40
 80074a4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	2200      	movs	r2, #0
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 fae9 	bl	8008a86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2240      	movs	r2, #64	; 0x40
 80074be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d009      	beq.n	80074fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6852      	ldr	r2, [r2, #4]
 80074f4:	b2d2      	uxtb	r2, r2
 80074f6:	4611      	mov	r1, r2
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
  }

  return USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr

08007524 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2204      	movs	r2, #4
 800753c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755a:	2b04      	cmp	r3, #4
 800755c:	d105      	bne.n	800756a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	4770      	bx	lr

08007576 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	2b03      	cmp	r3, #3
 8007586:	d10b      	bne.n	80075a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d005      	beq.n	80075d2 <USBD_StdDevReq+0x26>
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d84f      	bhi.n	800766a <USBD_StdDevReq+0xbe>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <USBD_StdDevReq+0x36>
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d14b      	bne.n	800766a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
      break;
 80075e0:	e048      	b.n	8007674 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d839      	bhi.n	800765e <USBD_StdDevReq+0xb2>
 80075ea:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <USBD_StdDevReq+0x44>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007641 	.word	0x08007641
 80075f4:	08007655 	.word	0x08007655
 80075f8:	0800765f 	.word	0x0800765f
 80075fc:	0800764b 	.word	0x0800764b
 8007600:	0800765f 	.word	0x0800765f
 8007604:	08007623 	.word	0x08007623
 8007608:	08007619 	.word	0x08007619
 800760c:	0800765f 	.word	0x0800765f
 8007610:	08007637 	.word	0x08007637
 8007614:	0800762d 	.word	0x0800762d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f9dc 	bl	80079d8 <USBD_GetDescriptor>
          break;
 8007620:	e022      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb3f 	bl	8007ca8 <USBD_SetAddress>
          break;
 800762a:	e01d      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb7e 	bl	8007d30 <USBD_SetConfig>
          break;
 8007634:	e018      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc07 	bl	8007e4c <USBD_GetConfig>
          break;
 800763e:	e013      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fc37 	bl	8007eb6 <USBD_GetStatus>
          break;
 8007648:	e00e      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fc65 	bl	8007f1c <USBD_SetFeature>
          break;
 8007652:	e009      	b.n	8007668 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fc74 	bl	8007f44 <USBD_ClrFeature>
          break;
 800765c:	e004      	b.n	8007668 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fccc 	bl	8007ffe <USBD_CtlError>
          break;
 8007666:	bf00      	nop
      }
      break;
 8007668:	e004      	b.n	8007674 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fcc6 	bl	8007ffe <USBD_CtlError>
      break;
 8007672:	bf00      	nop
  }

  return ret;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop

08007680 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d005      	beq.n	80076a6 <USBD_StdItfReq+0x26>
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d82e      	bhi.n	80076fc <USBD_StdItfReq+0x7c>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <USBD_StdItfReq+0x26>
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d12a      	bne.n	80076fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	3b01      	subs	r3, #1
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d81d      	bhi.n	80076ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	889b      	ldrh	r3, [r3, #4]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d813      	bhi.n	80076e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	88db      	ldrh	r3, [r3, #6]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d110      	bne.n	80076f8 <USBD_StdItfReq+0x78>
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10d      	bne.n	80076f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fd56 	bl	800818e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076e2:	e009      	b.n	80076f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc89 	bl	8007ffe <USBD_CtlError>
          break;
 80076ec:	e004      	b.n	80076f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc84 	bl	8007ffe <USBD_CtlError>
          break;
 80076f6:	e000      	b.n	80076fa <USBD_StdItfReq+0x7a>
          break;
 80076f8:	bf00      	nop
      }
      break;
 80076fa:	e004      	b.n	8007706 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fc7d 	bl	8007ffe <USBD_CtlError>
      break;
 8007704:	bf00      	nop
  }

  return USBD_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	889b      	ldrh	r3, [r3, #4]
 8007722:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d007      	beq.n	8007740 <USBD_StdEPReq+0x30>
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	f200 8146 	bhi.w	80079c2 <USBD_StdEPReq+0x2b2>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <USBD_StdEPReq+0x40>
 800773a:	2b20      	cmp	r3, #32
 800773c:	f040 8141 	bne.w	80079c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
      break;
 800774e:	e13d      	b.n	80079cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007758:	2b20      	cmp	r3, #32
 800775a:	d10a      	bne.n	8007772 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	4798      	blx	r3
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	e12d      	b.n	80079ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d007      	beq.n	800778a <USBD_StdEPReq+0x7a>
 800777a:	2b03      	cmp	r3, #3
 800777c:	f300 811b 	bgt.w	80079b6 <USBD_StdEPReq+0x2a6>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d072      	beq.n	800786a <USBD_StdEPReq+0x15a>
 8007784:	2b01      	cmp	r3, #1
 8007786:	d03a      	beq.n	80077fe <USBD_StdEPReq+0xee>
 8007788:	e115      	b.n	80079b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	2b02      	cmp	r3, #2
 8007792:	d002      	beq.n	800779a <USBD_StdEPReq+0x8a>
 8007794:	2b03      	cmp	r3, #3
 8007796:	d015      	beq.n	80077c4 <USBD_StdEPReq+0xb4>
 8007798:	e02b      	b.n	80077f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00c      	beq.n	80077ba <USBD_StdEPReq+0xaa>
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d009      	beq.n	80077ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f9b0 	bl	8008b10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077b0:	2180      	movs	r1, #128	; 0x80
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f9ac 	bl	8008b10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077b8:	e020      	b.n	80077fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fc1e 	bl	8007ffe <USBD_CtlError>
              break;
 80077c2:	e01b      	b.n	80077fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	885b      	ldrh	r3, [r3, #2]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10e      	bne.n	80077ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00b      	beq.n	80077ea <USBD_StdEPReq+0xda>
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d008      	beq.n	80077ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	88db      	ldrh	r3, [r3, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f993 	bl	8008b10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fccf 	bl	800818e <USBD_CtlSendStatus>

              break;
 80077f0:	e004      	b.n	80077fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc02 	bl	8007ffe <USBD_CtlError>
              break;
 80077fa:	bf00      	nop
          }
          break;
 80077fc:	e0e0      	b.n	80079c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007804:	2b02      	cmp	r3, #2
 8007806:	d002      	beq.n	800780e <USBD_StdEPReq+0xfe>
 8007808:	2b03      	cmp	r3, #3
 800780a:	d015      	beq.n	8007838 <USBD_StdEPReq+0x128>
 800780c:	e026      	b.n	800785c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00c      	beq.n	800782e <USBD_StdEPReq+0x11e>
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b80      	cmp	r3, #128	; 0x80
 8007818:	d009      	beq.n	800782e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 f976 	bl	8008b10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007824:	2180      	movs	r1, #128	; 0x80
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 f972 	bl	8008b10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800782c:	e01c      	b.n	8007868 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fbe4 	bl	8007ffe <USBD_CtlError>
              break;
 8007836:	e017      	b.n	8007868 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	885b      	ldrh	r3, [r3, #2]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d112      	bne.n	8007866 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 f97d 	bl	8008b4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fc9a 	bl	800818e <USBD_CtlSendStatus>
              }
              break;
 800785a:	e004      	b.n	8007866 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fbcd 	bl	8007ffe <USBD_CtlError>
              break;
 8007864:	e000      	b.n	8007868 <USBD_StdEPReq+0x158>
              break;
 8007866:	bf00      	nop
          }
          break;
 8007868:	e0aa      	b.n	80079c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007870:	2b02      	cmp	r3, #2
 8007872:	d002      	beq.n	800787a <USBD_StdEPReq+0x16a>
 8007874:	2b03      	cmp	r3, #3
 8007876:	d032      	beq.n	80078de <USBD_StdEPReq+0x1ce>
 8007878:	e097      	b.n	80079aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <USBD_StdEPReq+0x180>
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d004      	beq.n	8007890 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fbb8 	bl	8007ffe <USBD_CtlError>
                break;
 800788e:	e091      	b.n	80079b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007894:	2b00      	cmp	r3, #0
 8007896:	da0b      	bge.n	80078b0 <USBD_StdEPReq+0x1a0>
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	3310      	adds	r3, #16
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	4413      	add	r3, r2
 80078ac:	3304      	adds	r3, #4
 80078ae:	e00b      	b.n	80078c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4413      	add	r3, r2
 80078c6:	3304      	adds	r3, #4
 80078c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2202      	movs	r2, #2
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fbfb 	bl	80080d2 <USBD_CtlSendData>
              break;
 80078dc:	e06a      	b.n	80079b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da11      	bge.n	800790a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	3318      	adds	r3, #24
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d117      	bne.n	8007930 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb7b 	bl	8007ffe <USBD_CtlError>
                  break;
 8007908:	e054      	b.n	80079b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb68 	bl	8007ffe <USBD_CtlError>
                  break;
 800792e:	e041      	b.n	80079b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007934:	2b00      	cmp	r3, #0
 8007936:	da0b      	bge.n	8007950 <USBD_StdEPReq+0x240>
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	3310      	adds	r3, #16
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4413      	add	r3, r2
 800794c:	3304      	adds	r3, #4
 800794e:	e00b      	b.n	8007968 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	4413      	add	r3, r2
 8007966:	3304      	adds	r3, #4
 8007968:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <USBD_StdEPReq+0x266>
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d103      	bne.n	800797e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e00e      	b.n	800799c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 f902 	bl	8008b8c <USBD_LL_IsStallEP>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e002      	b.n	800799c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2202      	movs	r2, #2
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb95 	bl	80080d2 <USBD_CtlSendData>
              break;
 80079a8:	e004      	b.n	80079b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb26 	bl	8007ffe <USBD_CtlError>
              break;
 80079b2:	bf00      	nop
          }
          break;
 80079b4:	e004      	b.n	80079c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fb20 	bl	8007ffe <USBD_CtlError>
          break;
 80079be:	bf00      	nop
      }
      break;
 80079c0:	e004      	b.n	80079cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fb1a 	bl	8007ffe <USBD_CtlError>
      break;
 80079ca:	bf00      	nop
  }

  return ret;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	885b      	ldrh	r3, [r3, #2]
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b06      	cmp	r3, #6
 80079fa:	f200 8128 	bhi.w	8007c4e <USBD_GetDescriptor+0x276>
 80079fe:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <USBD_GetDescriptor+0x2c>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a39 	.word	0x08007a39
 8007a0c:	08007a79 	.word	0x08007a79
 8007a10:	08007c4f 	.word	0x08007c4f
 8007a14:	08007c4f 	.word	0x08007c4f
 8007a18:	08007bef 	.word	0x08007bef
 8007a1c:	08007c1b 	.word	0x08007c1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
      break;
 8007a36:	e112      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	7c1b      	ldrb	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10d      	bne.n	8007a5c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	f107 0208 	add.w	r2, r7, #8
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
 8007a50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	2202      	movs	r2, #2
 8007a58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a5a:	e100      	b.n	8007c5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	f107 0208 	add.w	r2, r7, #8
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
 8007a6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	2202      	movs	r2, #2
 8007a74:	701a      	strb	r2, [r3, #0]
      break;
 8007a76:	e0f2      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	885b      	ldrh	r3, [r3, #2]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	f200 80ac 	bhi.w	8007bdc <USBD_GetDescriptor+0x204>
 8007a84:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <USBD_GetDescriptor+0xb4>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007aa5 	.word	0x08007aa5
 8007a90:	08007ad9 	.word	0x08007ad9
 8007a94:	08007b0d 	.word	0x08007b0d
 8007a98:	08007b41 	.word	0x08007b41
 8007a9c:	08007b75 	.word	0x08007b75
 8007aa0:	08007ba9 	.word	0x08007ba9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	7c12      	ldrb	r2, [r2, #16]
 8007abc:	f107 0108 	add.w	r1, r7, #8
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ac6:	e091      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa97 	bl	8007ffe <USBD_CtlError>
            err++;
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ad6:	e089      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	7c12      	ldrb	r2, [r2, #16]
 8007af0:	f107 0108 	add.w	r1, r7, #8
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
 8007af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afa:	e077      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa7d 	bl	8007ffe <USBD_CtlError>
            err++;
 8007b04:	7afb      	ldrb	r3, [r7, #11]
 8007b06:	3301      	adds	r3, #1
 8007b08:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0a:	e06f      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 0108 	add.w	r1, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2e:	e05d      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa63 	bl	8007ffe <USBD_CtlError>
            err++;
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3e:	e055      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	7c12      	ldrb	r2, [r2, #16]
 8007b58:	f107 0108 	add.w	r1, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b62:	e043      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa49 	bl	8007ffe <USBD_CtlError>
            err++;
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	72fb      	strb	r3, [r7, #11]
          break;
 8007b72:	e03b      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	7c12      	ldrb	r2, [r2, #16]
 8007b8c:	f107 0108 	add.w	r1, r7, #8
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b96:	e029      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa2f 	bl	8007ffe <USBD_CtlError>
            err++;
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ba6:	e021      	b.n	8007bec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bca:	e00f      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa15 	bl	8007ffe <USBD_CtlError>
            err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bda:	e007      	b.n	8007bec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa0d 	bl	8007ffe <USBD_CtlError>
          err++;
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	3301      	adds	r3, #1
 8007be8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007bea:	e038      	b.n	8007c5e <USBD_GetDescriptor+0x286>
 8007bec:	e037      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7c1b      	ldrb	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfe:	f107 0208 	add.w	r2, r7, #8
 8007c02:	4610      	mov	r0, r2
 8007c04:	4798      	blx	r3
 8007c06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c08:	e029      	b.n	8007c5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f9f6 	bl	8007ffe <USBD_CtlError>
        err++;
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	3301      	adds	r3, #1
 8007c16:	72fb      	strb	r3, [r7, #11]
      break;
 8007c18:	e021      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7c1b      	ldrb	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	f107 0208 	add.w	r2, r7, #8
 8007c2e:	4610      	mov	r0, r2
 8007c30:	4798      	blx	r3
 8007c32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3301      	adds	r3, #1
 8007c38:	2207      	movs	r2, #7
 8007c3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c3c:	e00f      	b.n	8007c5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9dc 	bl	8007ffe <USBD_CtlError>
        err++;
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c4c:	e007      	b.n	8007c5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f9d4 	bl	8007ffe <USBD_CtlError>
      err++;
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c5c:	bf00      	nop
  }

  if (err != 0U)
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d11c      	bne.n	8007c9e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c64:	893b      	ldrh	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d011      	beq.n	8007c8e <USBD_GetDescriptor+0x2b6>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	88db      	ldrh	r3, [r3, #6]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	88da      	ldrh	r2, [r3, #6]
 8007c76:	893b      	ldrh	r3, [r7, #8]
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	bf28      	it	cs
 8007c7c:	4613      	movcs	r3, r2
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c82:	893b      	ldrh	r3, [r7, #8]
 8007c84:	461a      	mov	r2, r3
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa22 	bl	80080d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	88db      	ldrh	r3, [r3, #6]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa79 	bl	800818e <USBD_CtlSendStatus>
 8007c9c:	e000      	b.n	8007ca0 <USBD_GetDescriptor+0x2c8>
    return;
 8007c9e:	bf00      	nop
    }
  }
}
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop

08007ca8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	889b      	ldrh	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d130      	bne.n	8007d1c <USBD_SetAddress+0x74>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	88db      	ldrh	r3, [r3, #6]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d12c      	bne.n	8007d1c <USBD_SetAddress+0x74>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	885b      	ldrh	r3, [r3, #2]
 8007cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc8:	d828      	bhi.n	8007d1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	885b      	ldrh	r3, [r3, #2]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d104      	bne.n	8007cea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f98b 	bl	8007ffe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce8:	e01d      	b.n	8007d26 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 ff74 	bl	8008be4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa46 	bl	800818e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d10:	e009      	b.n	8007d26 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1a:	e004      	b.n	8007d26 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f96d 	bl	8007ffe <USBD_CtlError>
  }
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	4b41      	ldr	r3, [pc, #260]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d44:	4b40      	ldr	r3, [pc, #256]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d904      	bls.n	8007d56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f955 	bl	8007ffe <USBD_CtlError>
 8007d54:	e075      	b.n	8007e42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d002      	beq.n	8007d66 <USBD_SetConfig+0x36>
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d023      	beq.n	8007dac <USBD_SetConfig+0x7c>
 8007d64:	e062      	b.n	8007e2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d66:	4b38      	ldr	r3, [pc, #224]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01a      	beq.n	8007da4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d6e:	4b36      	ldr	r3, [pc, #216]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2203      	movs	r2, #3
 8007d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d80:	4b31      	ldr	r3, [pc, #196]	; (8007e48 <USBD_SetConfig+0x118>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff f9e7 	bl	800715a <USBD_SetClassConfig>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d104      	bne.n	8007d9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f932 	bl	8007ffe <USBD_CtlError>
            return;
 8007d9a:	e052      	b.n	8007e42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f9f6 	bl	800818e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007da2:	e04e      	b.n	8007e42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f9f2 	bl	800818e <USBD_CtlSendStatus>
        break;
 8007daa:	e04a      	b.n	8007e42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007dac:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <USBD_SetConfig+0x118>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d112      	bne.n	8007dda <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007dbc:	4b22      	ldr	r3, [pc, #136]	; (8007e48 <USBD_SetConfig+0x118>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007dc6:	4b20      	ldr	r3, [pc, #128]	; (8007e48 <USBD_SetConfig+0x118>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff f9e3 	bl	8007198 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9db 	bl	800818e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007dd8:	e033      	b.n	8007e42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <USBD_SetConfig+0x118>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d01d      	beq.n	8007e24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff f9d1 	bl	8007198 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <USBD_SetConfig+0x118>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e00:	4b11      	ldr	r3, [pc, #68]	; (8007e48 <USBD_SetConfig+0x118>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff f9a7 	bl	800715a <USBD_SetClassConfig>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d104      	bne.n	8007e1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f8f2 	bl	8007ffe <USBD_CtlError>
            return;
 8007e1a:	e012      	b.n	8007e42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9b6 	bl	800818e <USBD_CtlSendStatus>
        break;
 8007e22:	e00e      	b.n	8007e42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f9b2 	bl	800818e <USBD_CtlSendStatus>
        break;
 8007e2a:	e00a      	b.n	8007e42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8e5 	bl	8007ffe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e34:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <USBD_SetConfig+0x118>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff f9ac 	bl	8007198 <USBD_ClrClassConfig>
        break;
 8007e40:	bf00      	nop
    }
  }
}
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	200001b1 	.word	0x200001b1

08007e4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d004      	beq.n	8007e68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f8cc 	bl	8007ffe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e66:	e022      	b.n	8007eae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	dc02      	bgt.n	8007e78 <USBD_GetConfig+0x2c>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dc03      	bgt.n	8007e7e <USBD_GetConfig+0x32>
 8007e76:	e015      	b.n	8007ea4 <USBD_GetConfig+0x58>
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d00b      	beq.n	8007e94 <USBD_GetConfig+0x48>
 8007e7c:	e012      	b.n	8007ea4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3308      	adds	r3, #8
 8007e88:	2201      	movs	r2, #1
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f920 	bl	80080d2 <USBD_CtlSendData>
        break;
 8007e92:	e00c      	b.n	8007eae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	2201      	movs	r2, #1
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f918 	bl	80080d2 <USBD_CtlSendData>
        break;
 8007ea2:	e004      	b.n	8007eae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f8a9 	bl	8007ffe <USBD_CtlError>
        break;
 8007eac:	bf00      	nop
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d81e      	bhi.n	8007f0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	88db      	ldrh	r3, [r3, #6]
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d004      	beq.n	8007ede <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f891 	bl	8007ffe <USBD_CtlError>
        break;
 8007edc:	e01a      	b.n	8007f14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f043 0202 	orr.w	r2, r3, #2
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	330c      	adds	r3, #12
 8007efe:	2202      	movs	r2, #2
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f8e5 	bl	80080d2 <USBD_CtlSendData>
      break;
 8007f08:	e004      	b.n	8007f14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f876 	bl	8007ffe <USBD_CtlError>
      break;
 8007f12:	bf00      	nop
  }
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	885b      	ldrh	r3, [r3, #2]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d106      	bne.n	8007f3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f929 	bl	800818e <USBD_CtlSendStatus>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f54:	3b01      	subs	r3, #1
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d80b      	bhi.n	8007f72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d10c      	bne.n	8007f7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f90f 	bl	800818e <USBD_CtlSendStatus>
      }
      break;
 8007f70:	e004      	b.n	8007f7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f842 	bl	8007ffe <USBD_CtlError>
      break;
 8007f7a:	e000      	b.n	8007f7e <USBD_ClrFeature+0x3a>
      break;
 8007f7c:	bf00      	nop
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	785a      	ldrb	r2, [r3, #1]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3303      	adds	r3, #3
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	3305      	adds	r3, #5
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	021b      	lsls	r3, r3, #8
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	3306      	adds	r3, #6
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	3307      	adds	r3, #7
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	80da      	strh	r2, [r3, #6]

}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008008:	2180      	movs	r1, #128	; 0x80
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fd80 	bl	8008b10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008010:	2100      	movs	r1, #0
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fd7c 	bl	8008b10 <USBD_LL_StallEP>
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d032      	beq.n	800809c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f834 	bl	80080a4 <USBD_GetLen>
 800803c:	4603      	mov	r3, r0
 800803e:	3301      	adds	r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	75fa      	strb	r2, [r7, #23]
 8008050:	461a      	mov	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4413      	add	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	75fa      	strb	r2, [r7, #23]
 8008062:	461a      	mov	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4413      	add	r3, r2
 8008068:	2203      	movs	r2, #3
 800806a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800806c:	e012      	b.n	8008094 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	60fa      	str	r2, [r7, #12]
 8008074:	7dfa      	ldrb	r2, [r7, #23]
 8008076:	1c51      	adds	r1, r2, #1
 8008078:	75f9      	strb	r1, [r7, #23]
 800807a:	4611      	mov	r1, r2
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	440a      	add	r2, r1
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	75fa      	strb	r2, [r7, #23]
 800808a:	461a      	mov	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4413      	add	r3, r2
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e8      	bne.n	800806e <USBD_GetString+0x4e>
    }
  }
}
 800809c:	bf00      	nop
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80080b0:	e005      	b.n	80080be <USBD_GetLen+0x1a>
  {
    len++;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	3301      	adds	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3301      	adds	r3, #1
 80080bc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f5      	bne.n	80080b2 <USBD_GetLen+0xe>
  }

  return len;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	4613      	mov	r3, r2
 80080de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080e8:	88fa      	ldrh	r2, [r7, #6]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080ee:	88fa      	ldrh	r2, [r7, #6]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	2100      	movs	r1, #0
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 fd91 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	4613      	mov	r3, r2
 8008116:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	2100      	movs	r1, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fd7f 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	4613      	mov	r3, r2
 800813a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2203      	movs	r2, #3
 8008140:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008144:	88fa      	ldrh	r2, [r7, #6]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800814c:	88fa      	ldrh	r2, [r7, #6]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	2100      	movs	r1, #0
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 fd84 	bl	8008c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4613      	mov	r3, r2
 8008176:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	2100      	movs	r1, #0
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fd72 	bl	8008c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2204      	movs	r2, #4
 800819a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800819e:	2300      	movs	r3, #0
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fd3c 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2205      	movs	r2, #5
 80081c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081c4:	2300      	movs	r3, #0
 80081c6:	2200      	movs	r2, #0
 80081c8:	2100      	movs	r1, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fd4c 	bl	8008c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081e2:	463b      	mov	r3, r7
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	609a      	str	r2, [r3, #8]
 80081ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80081ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081f4:	2301      	movs	r3, #1
 80081f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80081f8:	2302      	movs	r3, #2
 80081fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80081fc:	2303      	movs	r3, #3
 80081fe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008200:	463b      	mov	r3, r7
 8008202:	4619      	mov	r1, r3
 8008204:	4819      	ldr	r0, [pc, #100]	; (800826c <MX_USB_DEVICE_Init+0x90>)
 8008206:	f7f9 f8ad 	bl	8001364 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800820a:	2200      	movs	r2, #0
 800820c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008210:	4816      	ldr	r0, [pc, #88]	; (800826c <MX_USB_DEVICE_Init+0x90>)
 8008212:	f7f9 fa2b 	bl	800166c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008216:	2064      	movs	r0, #100	; 0x64
 8008218:	f7f8 ff72 	bl	8001100 <HAL_Delay>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800821c:	2200      	movs	r2, #0
 800821e:	4914      	ldr	r1, [pc, #80]	; (8008270 <MX_USB_DEVICE_Init+0x94>)
 8008220:	4814      	ldr	r0, [pc, #80]	; (8008274 <MX_USB_DEVICE_Init+0x98>)
 8008222:	f7fe ff40 	bl	80070a6 <USBD_Init>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <MX_USB_DEVICE_Init+0x54>
  {
    Error_Handler();
 800822c:	f7f8 fe26 	bl	8000e7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008230:	4911      	ldr	r1, [pc, #68]	; (8008278 <MX_USB_DEVICE_Init+0x9c>)
 8008232:	4810      	ldr	r0, [pc, #64]	; (8008274 <MX_USB_DEVICE_Init+0x98>)
 8008234:	f7fe ff62 	bl	80070fc <USBD_RegisterClass>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <MX_USB_DEVICE_Init+0x66>
  {
    Error_Handler();
 800823e:	f7f8 fe1d 	bl	8000e7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008242:	490e      	ldr	r1, [pc, #56]	; (800827c <MX_USB_DEVICE_Init+0xa0>)
 8008244:	480b      	ldr	r0, [pc, #44]	; (8008274 <MX_USB_DEVICE_Init+0x98>)
 8008246:	f7fe fe93 	bl	8006f70 <USBD_CDC_RegisterInterface>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <MX_USB_DEVICE_Init+0x78>
  {
    Error_Handler();
 8008250:	f7f8 fe14 	bl	8000e7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008254:	4807      	ldr	r0, [pc, #28]	; (8008274 <MX_USB_DEVICE_Init+0x98>)
 8008256:	f7fe ff6a 	bl	800712e <USBD_Start>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <MX_USB_DEVICE_Init+0x88>
  {
    Error_Handler();
 8008260:	f7f8 fe0c 	bl	8000e7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	40010800 	.word	0x40010800
 8008270:	20000130 	.word	0x20000130
 8008274:	200024b4 	.word	0x200024b4
 8008278:	2000001c 	.word	0x2000001c
 800827c:	20000120 	.word	0x20000120

08008280 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008286:	2200      	movs	r2, #0
 8008288:	4915      	ldr	r1, [pc, #84]	; (80082e0 <CDC_Init_FS+0x60>)
 800828a:	4816      	ldr	r0, [pc, #88]	; (80082e4 <CDC_Init_FS+0x64>)
 800828c:	f7fe fe86 	bl	8006f9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008290:	4915      	ldr	r1, [pc, #84]	; (80082e8 <CDC_Init_FS+0x68>)
 8008292:	4814      	ldr	r0, [pc, #80]	; (80082e4 <CDC_Init_FS+0x64>)
 8008294:	f7fe fe9b 	bl	8006fce <USBD_CDC_SetRxBuffer>

  // https://stackoverflow.com/a/26925578
  uint32_t baudrate = 9600;
 8008298:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800829c:	607b      	str	r3, [r7, #4]
  lcBuffer[0] = (uint8_t)(baudrate);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <CDC_Init_FS+0x6c>)
 80082a4:	701a      	strb	r2, [r3, #0]
  lcBuffer[1] = (uint8_t)(baudrate >> 8);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	0a1b      	lsrs	r3, r3, #8
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <CDC_Init_FS+0x6c>)
 80082ae:	705a      	strb	r2, [r3, #1]
  lcBuffer[2] = (uint8_t)(baudrate >> 16);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <CDC_Init_FS+0x6c>)
 80082b8:	709a      	strb	r2, [r3, #2]
  lcBuffer[3] = (uint8_t)(baudrate >> 24);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	0e1b      	lsrs	r3, r3, #24
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <CDC_Init_FS+0x6c>)
 80082c2:	70da      	strb	r2, [r3, #3]
  lcBuffer[4] = 0; // 1 Stop bit
 80082c4:	4b09      	ldr	r3, [pc, #36]	; (80082ec <CDC_Init_FS+0x6c>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	711a      	strb	r2, [r3, #4]
  lcBuffer[5] = 0; // No parity
 80082ca:	4b08      	ldr	r3, [pc, #32]	; (80082ec <CDC_Init_FS+0x6c>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	715a      	strb	r2, [r3, #5]
  lcBuffer[6] = 8; // 8 data bits
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <CDC_Init_FS+0x6c>)
 80082d2:	2208      	movs	r2, #8
 80082d4:	719a      	strb	r2, [r3, #6]

  return (USBD_OK);
 80082d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20002b60 	.word	0x20002b60
 80082e4:	200024b4 	.word	0x200024b4
 80082e8:	20002778 	.word	0x20002778
 80082ec:	20003048 	.word	0x20003048

080082f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr
	...

08008300 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
 800830c:	4613      	mov	r3, r2
 800830e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	2b23      	cmp	r3, #35	; 0x23
 8008314:	f200 808e 	bhi.w	8008434 <CDC_Control_FS+0x134>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <CDC_Control_FS+0x20>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008435 	.word	0x08008435
 8008324:	08008435 	.word	0x08008435
 8008328:	08008435 	.word	0x08008435
 800832c:	08008435 	.word	0x08008435
 8008330:	08008435 	.word	0x08008435
 8008334:	08008435 	.word	0x08008435
 8008338:	08008435 	.word	0x08008435
 800833c:	08008435 	.word	0x08008435
 8008340:	08008435 	.word	0x08008435
 8008344:	08008435 	.word	0x08008435
 8008348:	08008435 	.word	0x08008435
 800834c:	08008435 	.word	0x08008435
 8008350:	08008435 	.word	0x08008435
 8008354:	08008435 	.word	0x08008435
 8008358:	08008435 	.word	0x08008435
 800835c:	08008435 	.word	0x08008435
 8008360:	08008435 	.word	0x08008435
 8008364:	08008435 	.word	0x08008435
 8008368:	08008435 	.word	0x08008435
 800836c:	08008435 	.word	0x08008435
 8008370:	08008435 	.word	0x08008435
 8008374:	08008435 	.word	0x08008435
 8008378:	08008435 	.word	0x08008435
 800837c:	08008435 	.word	0x08008435
 8008380:	08008435 	.word	0x08008435
 8008384:	08008435 	.word	0x08008435
 8008388:	08008435 	.word	0x08008435
 800838c:	08008435 	.word	0x08008435
 8008390:	08008435 	.word	0x08008435
 8008394:	08008435 	.word	0x08008435
 8008398:	08008435 	.word	0x08008435
 800839c:	08008435 	.word	0x08008435
 80083a0:	080083b1 	.word	0x080083b1
 80083a4:	080083eb 	.word	0x080083eb
 80083a8:	08008435 	.word	0x08008435
 80083ac:	08008435 	.word	0x08008435
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        lcBuffer[0] = pbuf[0];
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	4b22      	ldr	r3, [pc, #136]	; (8008440 <CDC_Control_FS+0x140>)
 80083b6:	701a      	strb	r2, [r3, #0]
        lcBuffer[1] = pbuf[1];
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	785a      	ldrb	r2, [r3, #1]
 80083bc:	4b20      	ldr	r3, [pc, #128]	; (8008440 <CDC_Control_FS+0x140>)
 80083be:	705a      	strb	r2, [r3, #1]
        lcBuffer[2] = pbuf[2];
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	789a      	ldrb	r2, [r3, #2]
 80083c4:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <CDC_Control_FS+0x140>)
 80083c6:	709a      	strb	r2, [r3, #2]
        lcBuffer[3] = pbuf[3];
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	78da      	ldrb	r2, [r3, #3]
 80083cc:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <CDC_Control_FS+0x140>)
 80083ce:	70da      	strb	r2, [r3, #3]
        lcBuffer[4] = pbuf[4];
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	791a      	ldrb	r2, [r3, #4]
 80083d4:	4b1a      	ldr	r3, [pc, #104]	; (8008440 <CDC_Control_FS+0x140>)
 80083d6:	711a      	strb	r2, [r3, #4]
        lcBuffer[5] = pbuf[5];
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	795a      	ldrb	r2, [r3, #5]
 80083dc:	4b18      	ldr	r3, [pc, #96]	; (8008440 <CDC_Control_FS+0x140>)
 80083de:	715a      	strb	r2, [r3, #5]
        lcBuffer[6] = pbuf[6];
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	799a      	ldrb	r2, [r3, #6]
 80083e4:	4b16      	ldr	r3, [pc, #88]	; (8008440 <CDC_Control_FS+0x140>)
 80083e6:	719a      	strb	r2, [r3, #6]
    break;
 80083e8:	e025      	b.n	8008436 <CDC_Control_FS+0x136>

    case CDC_GET_LINE_CODING:
        pbuf[0] = lcBuffer[0];
 80083ea:	4b15      	ldr	r3, [pc, #84]	; (8008440 <CDC_Control_FS+0x140>)
 80083ec:	781a      	ldrb	r2, [r3, #0]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	701a      	strb	r2, [r3, #0]
        pbuf[1] = lcBuffer[1];
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	4a12      	ldr	r2, [pc, #72]	; (8008440 <CDC_Control_FS+0x140>)
 80083f8:	7852      	ldrb	r2, [r2, #1]
 80083fa:	701a      	strb	r2, [r3, #0]
        pbuf[2] = lcBuffer[2];
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	3302      	adds	r3, #2
 8008400:	4a0f      	ldr	r2, [pc, #60]	; (8008440 <CDC_Control_FS+0x140>)
 8008402:	7892      	ldrb	r2, [r2, #2]
 8008404:	701a      	strb	r2, [r3, #0]
        pbuf[3] = lcBuffer[3];
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	3303      	adds	r3, #3
 800840a:	4a0d      	ldr	r2, [pc, #52]	; (8008440 <CDC_Control_FS+0x140>)
 800840c:	78d2      	ldrb	r2, [r2, #3]
 800840e:	701a      	strb	r2, [r3, #0]
        pbuf[4] = lcBuffer[4];
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	3304      	adds	r3, #4
 8008414:	4a0a      	ldr	r2, [pc, #40]	; (8008440 <CDC_Control_FS+0x140>)
 8008416:	7912      	ldrb	r2, [r2, #4]
 8008418:	701a      	strb	r2, [r3, #0]
        pbuf[5] = lcBuffer[5];
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	3305      	adds	r3, #5
 800841e:	4a08      	ldr	r2, [pc, #32]	; (8008440 <CDC_Control_FS+0x140>)
 8008420:	7952      	ldrb	r2, [r2, #5]
 8008422:	701a      	strb	r2, [r3, #0]
        pbuf[6] = lcBuffer[6];
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	3306      	adds	r3, #6
 8008428:	4a05      	ldr	r2, [pc, #20]	; (8008440 <CDC_Control_FS+0x140>)
 800842a:	7992      	ldrb	r2, [r2, #6]
 800842c:	701a      	strb	r2, [r3, #0]

        // Get line coding is invoked when the host connects, clear the RxBuffer when this occurs
        CDC_FlushRxBuffer_FS();
 800842e:	f000 f8bb 	bl	80085a8 <CDC_FlushRxBuffer_FS>
    break;
 8008432:	e000      	b.n	8008436 <CDC_Control_FS+0x136>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008434:	bf00      	nop
  }

  return (USBD_OK);
 8008436:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20003048 	.word	0x20003048

08008444 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4818      	ldr	r0, [pc, #96]	; (80084b4 <CDC_Receive_FS+0x70>)
 8008452:	f7fe fdbc 	bl	8006fce <USBD_CDC_SetRxBuffer>

  uint8_t len = (uint8_t) *Len; // Get length
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	73fb      	strb	r3, [r7, #15]

  uint16_t tempHeadPos = rxBufferHeadPos; // Increment temp head pos while writing, then update main variable when complete
 800845c:	4b16      	ldr	r3, [pc, #88]	; (80084b8 <CDC_Receive_FS+0x74>)
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	82fb      	strh	r3, [r7, #22]

  for (uint32_t i = 0; i < len; i++) {
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	e016      	b.n	8008496 <CDC_Receive_FS+0x52>
    rxBuffer[tempHeadPos] = Buf[i];
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	441a      	add	r2, r3
 800846e:	8afb      	ldrh	r3, [r7, #22]
 8008470:	7811      	ldrb	r1, [r2, #0]
 8008472:	4a12      	ldr	r2, [pc, #72]	; (80084bc <CDC_Receive_FS+0x78>)
 8008474:	54d1      	strb	r1, [r2, r3]

    // Compact position increment logic
    tempHeadPos = (uint16_t)((uint16_t)(tempHeadPos + 1) % HL_RX_BUFFER_SIZE);
 8008476:	8afb      	ldrh	r3, [r7, #22]
 8008478:	3301      	adds	r3, #1
 800847a:	b29b      	uxth	r3, r3
 800847c:	b2db      	uxtb	r3, r3
 800847e:	82fb      	strh	r3, [r7, #22]
    if (tempHeadPos == HL_RX_BUFFER_SIZE) {
      tempHeadPos = 0;
    }
    */

    if (tempHeadPos == rxBufferTailPos) {
 8008480:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <CDC_Receive_FS+0x7c>)
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29b      	uxth	r3, r3
 8008486:	8afa      	ldrh	r2, [r7, #22]
 8008488:	429a      	cmp	r2, r3
 800848a:	d101      	bne.n	8008490 <CDC_Receive_FS+0x4c>
      return USBD_FAIL;
 800848c:	2302      	movs	r3, #2
 800848e:	e00d      	b.n	80084ac <CDC_Receive_FS+0x68>
  for (uint32_t i = 0; i < len; i++) {
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3301      	adds	r3, #1
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	7bfb      	ldrb	r3, [r7, #15]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	429a      	cmp	r2, r3
 800849c:	d3e4      	bcc.n	8008468 <CDC_Receive_FS+0x24>
    }
  }

  rxBufferHeadPos = tempHeadPos;
 800849e:	4a06      	ldr	r2, [pc, #24]	; (80084b8 <CDC_Receive_FS+0x74>)
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	8013      	strh	r3, [r2, #0]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084a4:	4803      	ldr	r0, [pc, #12]	; (80084b4 <CDC_Receive_FS+0x70>)
 80084a6:	f7fe fdd4 	bl	8007052 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 80084aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	200024b4 	.word	0x200024b4
 80084b8:	200001b2 	.word	0x200001b2
 80084bc:	20002f48 	.word	0x20002f48
 80084c0:	200001b4 	.word	0x200001b4

080084c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <CDC_Transmit_FS+0x48>)
 80084d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e00b      	b.n	8008502 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084ea:	887b      	ldrh	r3, [r7, #2]
 80084ec:	461a      	mov	r2, r3
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	4806      	ldr	r0, [pc, #24]	; (800850c <CDC_Transmit_FS+0x48>)
 80084f2:	f7fe fd53 	bl	8006f9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084f6:	4805      	ldr	r0, [pc, #20]	; (800850c <CDC_Transmit_FS+0x48>)
 80084f8:	f7fe fd7c 	bl	8006ff4 <USBD_CDC_TransmitPacket>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008500:	7bfb      	ldrb	r3, [r7, #15]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200024b4 	.word	0x200024b4

08008510 <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

uint8_t CDC_ReadRxBuffer_FS(uint8_t* Buf, uint16_t Len) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	460b      	mov	r3, r1
 800851a:	807b      	strh	r3, [r7, #2]
	uint16_t bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 800851c:	f000 f830 	bl	8008580 <CDC_GetRxBufferBytesAvailable_FS>
 8008520:	4603      	mov	r3, r0
 8008522:	81bb      	strh	r3, [r7, #12]

	if (bytesAvailable < Len)
 8008524:	89ba      	ldrh	r2, [r7, #12]
 8008526:	887b      	ldrh	r3, [r7, #2]
 8008528:	429a      	cmp	r2, r3
 800852a:	d201      	bcs.n	8008530 <CDC_ReadRxBuffer_FS+0x20>
		return USB_CDC_RX_BUFFER_NO_DATA;
 800852c:	2301      	movs	r3, #1
 800852e:	e01e      	b.n	800856e <CDC_ReadRxBuffer_FS+0x5e>

	for (uint8_t i = 0; i < Len; i++) {
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]
 8008534:	e015      	b.n	8008562 <CDC_ReadRxBuffer_FS+0x52>
		Buf[i] = rxBuffer[rxBufferTailPos];
 8008536:	4b10      	ldr	r3, [pc, #64]	; (8008578 <CDC_ReadRxBuffer_FS+0x68>)
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	b29b      	uxth	r3, r3
 800853c:	4619      	mov	r1, r3
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	4413      	add	r3, r2
 8008544:	4a0d      	ldr	r2, [pc, #52]	; (800857c <CDC_ReadRxBuffer_FS+0x6c>)
 8008546:	5c52      	ldrb	r2, [r2, r1]
 8008548:	701a      	strb	r2, [r3, #0]
		rxBufferTailPos = (uint16_t)((uint16_t)(rxBufferTailPos + 1) % HL_RX_BUFFER_SIZE);
 800854a:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <CDC_ReadRxBuffer_FS+0x68>)
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	3301      	adds	r3, #1
 8008552:	b29b      	uxth	r3, r3
 8008554:	b2db      	uxtb	r3, r3
 8008556:	b29a      	uxth	r2, r3
 8008558:	4b07      	ldr	r3, [pc, #28]	; (8008578 <CDC_ReadRxBuffer_FS+0x68>)
 800855a:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < Len; i++) {
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	3301      	adds	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	b29b      	uxth	r3, r3
 8008566:	887a      	ldrh	r2, [r7, #2]
 8008568:	429a      	cmp	r2, r3
 800856a:	d8e4      	bhi.n	8008536 <CDC_ReadRxBuffer_FS+0x26>
			rxBufferTailPos = 0;
		}
		*/
	}

	return USB_CDC_RX_BUFFER_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	200001b4 	.word	0x200001b4
 800857c:	20002f48 	.word	0x20002f48

08008580 <CDC_GetRxBufferBytesAvailable_FS>:
  }

  return USB_CDC_RX_BUFFER_OK;
}

uint16_t CDC_GetRxBufferBytesAvailable_FS() {
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0

	// Compact version
    return (uint16_t)(rxBufferHeadPos - rxBufferTailPos) % HL_RX_BUFFER_SIZE;
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <CDC_GetRxBufferBytesAvailable_FS+0x20>)
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29a      	uxth	r2, r3
 800858a:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <CDC_GetRxBufferBytesAvailable_FS+0x24>)
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	b29b      	uxth	r3, r3
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	b29b      	uxth	r3, r3
 8008594:	b2db      	uxtb	r3, r3
 8008596:	b29b      	uxth	r3, r3
	if (headPos >= tailPos)
		return headPos - tailPos;
	else
		return HL_RX_BUFFER_SIZE - tailPos + headPos;
	*/
}
 8008598:	4618      	mov	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr
 80085a0:	200001b2 	.word	0x200001b2
 80085a4:	200001b4 	.word	0x200001b4

080085a8 <CDC_FlushRxBuffer_FS>:

void CDC_FlushRxBuffer_FS() {
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
    for (int i = 0; i < HL_RX_BUFFER_SIZE; i++) {
 80085ae:	2300      	movs	r3, #0
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	e007      	b.n	80085c4 <CDC_FlushRxBuffer_FS+0x1c>
    	rxBuffer[i] = 0;
 80085b4:	4a0a      	ldr	r2, [pc, #40]	; (80085e0 <CDC_FlushRxBuffer_FS+0x38>)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4413      	add	r3, r2
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < HL_RX_BUFFER_SIZE; i++) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3301      	adds	r3, #1
 80085c2:	607b      	str	r3, [r7, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2bff      	cmp	r3, #255	; 0xff
 80085c8:	ddf4      	ble.n	80085b4 <CDC_FlushRxBuffer_FS+0xc>
    }

    rxBufferHeadPos = 0;
 80085ca:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <CDC_FlushRxBuffer_FS+0x3c>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	801a      	strh	r2, [r3, #0]
    rxBufferTailPos = 0;
 80085d0:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <CDC_FlushRxBuffer_FS+0x40>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	801a      	strh	r2, [r3, #0]
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr
 80085e0:	20002f48 	.word	0x20002f48
 80085e4:	200001b2 	.word	0x200001b2
 80085e8:	200001b4 	.word	0x200001b4

080085ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2212      	movs	r2, #18
 80085fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085fe:	4b03      	ldr	r3, [pc, #12]	; (800860c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	2000014c 	.word	0x2000014c

08008610 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2204      	movs	r2, #4
 8008620:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008622:	4b03      	ldr	r3, [pc, #12]	; (8008630 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	20000160 	.word	0x20000160

08008634 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d105      	bne.n	8008652 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	4907      	ldr	r1, [pc, #28]	; (8008668 <USBD_FS_ProductStrDescriptor+0x34>)
 800864a:	4808      	ldr	r0, [pc, #32]	; (800866c <USBD_FS_ProductStrDescriptor+0x38>)
 800864c:	f7ff fce8 	bl	8008020 <USBD_GetString>
 8008650:	e004      	b.n	800865c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	4904      	ldr	r1, [pc, #16]	; (8008668 <USBD_FS_ProductStrDescriptor+0x34>)
 8008656:	4805      	ldr	r0, [pc, #20]	; (800866c <USBD_FS_ProductStrDescriptor+0x38>)
 8008658:	f7ff fce2 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20003050 	.word	0x20003050
 800866c:	08008e14 	.word	0x08008e14

08008670 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	4904      	ldr	r1, [pc, #16]	; (8008690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008680:	4804      	ldr	r0, [pc, #16]	; (8008694 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008682:	f7ff fccd 	bl	8008020 <USBD_GetString>
  return USBD_StrDesc;
 8008686:	4b02      	ldr	r3, [pc, #8]	; (8008690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20003050 	.word	0x20003050
 8008694:	08008e2c 	.word	0x08008e2c

08008698 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	221a      	movs	r2, #26
 80086a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086aa:	f000 f843 	bl	8008734 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086ae:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20000164 	.word	0x20000164

080086bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4907      	ldr	r1, [pc, #28]	; (80086f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086d2:	4808      	ldr	r0, [pc, #32]	; (80086f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086d4:	f7ff fca4 	bl	8008020 <USBD_GetString>
 80086d8:	e004      	b.n	80086e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4904      	ldr	r1, [pc, #16]	; (80086f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086de:	4805      	ldr	r0, [pc, #20]	; (80086f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086e0:	f7ff fc9e 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086e4:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20003050 	.word	0x20003050
 80086f4:	08008e40 	.word	0x08008e40

080086f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008704:	79fb      	ldrb	r3, [r7, #7]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	4907      	ldr	r1, [pc, #28]	; (800872c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800870e:	4808      	ldr	r0, [pc, #32]	; (8008730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008710:	f7ff fc86 	bl	8008020 <USBD_GetString>
 8008714:	e004      	b.n	8008720 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4904      	ldr	r1, [pc, #16]	; (800872c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800871a:	4805      	ldr	r0, [pc, #20]	; (8008730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800871c:	f7ff fc80 	bl	8008020 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008720:	4b02      	ldr	r3, [pc, #8]	; (800872c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20003050 	.word	0x20003050
 8008730:	08008e4c 	.word	0x08008e4c

08008734 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800873a:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <Get_SerialNum+0x44>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008740:	4b0e      	ldr	r3, [pc, #56]	; (800877c <Get_SerialNum+0x48>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008746:	4b0e      	ldr	r3, [pc, #56]	; (8008780 <Get_SerialNum+0x4c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d009      	beq.n	800876e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800875a:	2208      	movs	r2, #8
 800875c:	4909      	ldr	r1, [pc, #36]	; (8008784 <Get_SerialNum+0x50>)
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f814 	bl	800878c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008764:	2204      	movs	r2, #4
 8008766:	4908      	ldr	r1, [pc, #32]	; (8008788 <Get_SerialNum+0x54>)
 8008768:	68b8      	ldr	r0, [r7, #8]
 800876a:	f000 f80f 	bl	800878c <IntToUnicode>
  }
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	1ffff7e8 	.word	0x1ffff7e8
 800877c:	1ffff7ec 	.word	0x1ffff7ec
 8008780:	1ffff7f0 	.word	0x1ffff7f0
 8008784:	20000166 	.word	0x20000166
 8008788:	20000176 	.word	0x20000176

0800878c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]
 80087a2:	e027      	b.n	80087f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	0f1b      	lsrs	r3, r3, #28
 80087a8:	2b09      	cmp	r3, #9
 80087aa:	d80b      	bhi.n	80087c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	0f1b      	lsrs	r3, r3, #28
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	4619      	mov	r1, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	440b      	add	r3, r1
 80087bc:	3230      	adds	r2, #48	; 0x30
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e00a      	b.n	80087da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	0f1b      	lsrs	r3, r3, #28
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	4619      	mov	r1, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	440b      	add	r3, r1
 80087d4:	3237      	adds	r2, #55	; 0x37
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	3301      	adds	r3, #1
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	4413      	add	r3, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	3301      	adds	r3, #1
 80087f2:	75fb      	strb	r3, [r7, #23]
 80087f4:	7dfa      	ldrb	r2, [r7, #23]
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d3d3      	bcc.n	80087a4 <IntToUnicode+0x18>
  }
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	371c      	adds	r7, #28
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a11      	ldr	r2, [pc, #68]	; (800885c <HAL_PCD_MspInit+0x54>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d11b      	bne.n	8008852 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800881a:	4b11      	ldr	r3, [pc, #68]	; (8008860 <HAL_PCD_MspInit+0x58>)
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	4a10      	ldr	r2, [pc, #64]	; (8008860 <HAL_PCD_MspInit+0x58>)
 8008820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008824:	61d3      	str	r3, [r2, #28]
 8008826:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <HAL_PCD_MspInit+0x58>)
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008832:	2200      	movs	r2, #0
 8008834:	2100      	movs	r1, #0
 8008836:	2013      	movs	r0, #19
 8008838:	f7f8 fd5d 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800883c:	2013      	movs	r0, #19
 800883e:	f7f8 fd76 	bl	800132e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008842:	2200      	movs	r2, #0
 8008844:	2100      	movs	r1, #0
 8008846:	2014      	movs	r0, #20
 8008848:	f7f8 fd55 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800884c:	2014      	movs	r0, #20
 800884e:	f7f8 fd6e 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	40005c00 	.word	0x40005c00
 8008860:	40021000 	.word	0x40021000

08008864 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008878:	4619      	mov	r1, r3
 800887a:	4610      	mov	r0, r2
 800887c:	f7fe fc9f 	bl	80071be <USBD_LL_SetupStage>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800889a:	78fa      	ldrb	r2, [r7, #3]
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	440b      	add	r3, r1
 80088a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	4619      	mov	r1, r3
 80088b2:	f7fe fcd1 	bl	8007258 <USBD_LL_DataOutStage>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	440b      	add	r3, r1
 80088de:	333c      	adds	r3, #60	; 0x3c
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	4619      	mov	r1, r3
 80088e6:	f7fe fd28 	bl	800733a <USBD_LL_DataInStage>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fe38 	bl	8007576 <USBD_LL_SOF>
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008916:	2301      	movs	r3, #1
 8008918:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d001      	beq.n	8008926 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008922:	f7f8 faab 	bl	8000e7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800892c:	7bfa      	ldrb	r2, [r7, #15]
 800892e:	4611      	mov	r1, r2
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fde8 	bl	8007506 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800893c:	4618      	mov	r0, r3
 800893e:	f7fe fda1 	bl	8007484 <USBD_LL_Reset>
}
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
	...

0800894c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fde2 	bl	8007524 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008968:	4b04      	ldr	r3, [pc, #16]	; (800897c <HAL_PCD_SuspendCallback+0x30>)
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	4a03      	ldr	r2, [pc, #12]	; (800897c <HAL_PCD_SuspendCallback+0x30>)
 800896e:	f043 0306 	orr.w	r3, r3, #6
 8008972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	e000ed00 	.word	0xe000ed00

08008980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fddc 	bl	800754c <USBD_LL_Resume>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089a4:	4a28      	ldr	r2, [pc, #160]	; (8008a48 <USBD_LL_Init+0xac>)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a26      	ldr	r2, [pc, #152]	; (8008a48 <USBD_LL_Init+0xac>)
 80089b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089b4:	4b24      	ldr	r3, [pc, #144]	; (8008a48 <USBD_LL_Init+0xac>)
 80089b6:	4a25      	ldr	r2, [pc, #148]	; (8008a4c <USBD_LL_Init+0xb0>)
 80089b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089ba:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <USBD_LL_Init+0xac>)
 80089bc:	2208      	movs	r2, #8
 80089be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089c0:	4b21      	ldr	r3, [pc, #132]	; (8008a48 <USBD_LL_Init+0xac>)
 80089c2:	2202      	movs	r2, #2
 80089c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089c6:	4b20      	ldr	r3, [pc, #128]	; (8008a48 <USBD_LL_Init+0xac>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089cc:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <USBD_LL_Init+0xac>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089d2:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <USBD_LL_Init+0xac>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089d8:	481b      	ldr	r0, [pc, #108]	; (8008a48 <USBD_LL_Init+0xac>)
 80089da:	f7f9 ff8d 	bl	80028f8 <HAL_PCD_Init>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80089e4:	f7f8 fa4a 	bl	8000e7c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ee:	2318      	movs	r3, #24
 80089f0:	2200      	movs	r2, #0
 80089f2:	2100      	movs	r1, #0
 80089f4:	f7fb facf 	bl	8003f96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089fe:	2358      	movs	r3, #88	; 0x58
 8008a00:	2200      	movs	r2, #0
 8008a02:	2180      	movs	r1, #128	; 0x80
 8008a04:	f7fb fac7 	bl	8003f96 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a0e:	23c0      	movs	r3, #192	; 0xc0
 8008a10:	2200      	movs	r2, #0
 8008a12:	2181      	movs	r1, #129	; 0x81
 8008a14:	f7fb fabf 	bl	8003f96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a22:	2200      	movs	r2, #0
 8008a24:	2101      	movs	r1, #1
 8008a26:	f7fb fab6 	bl	8003f96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a34:	2200      	movs	r2, #0
 8008a36:	2182      	movs	r1, #130	; 0x82
 8008a38:	f7fb faad 	bl	8003f96 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20003250 	.word	0x20003250
 8008a4c:	40005c00 	.word	0x40005c00

08008a50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fa f851 	bl	8002b0e <HAL_PCD_Start>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f94e 	bl	8008d14 <USBD_Get_USB_Status>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	4608      	mov	r0, r1
 8008a90:	4611      	mov	r1, r2
 8008a92:	461a      	mov	r2, r3
 8008a94:	4603      	mov	r3, r0
 8008a96:	70fb      	strb	r3, [r7, #3]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70bb      	strb	r3, [r7, #2]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aae:	78bb      	ldrb	r3, [r7, #2]
 8008ab0:	883a      	ldrh	r2, [r7, #0]
 8008ab2:	78f9      	ldrb	r1, [r7, #3]
 8008ab4:	f7fa f9cb 	bl	8002e4e <HAL_PCD_EP_Open>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 f928 	bl	8008d14 <USBD_Get_USB_Status>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fa fa12 	bl	8002f1a <HAL_PCD_EP_Close>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f909 	bl	8008d14 <USBD_Get_USB_Status>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fa fad2 	bl	80030d8 <HAL_PCD_EP_SetStall>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f8ea 	bl	8008d14 <USBD_Get_USB_Status>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fa fb13 	bl	8003198 <HAL_PCD_EP_ClrStall>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f8cb 	bl	8008d14 <USBD_Get_USB_Status>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da0c      	bge.n	8008bc2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bae:	68f9      	ldr	r1, [r7, #12]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	440b      	add	r3, r1
 8008bbc:	3302      	adds	r3, #2
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	e00b      	b.n	8008bda <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bc8:	68f9      	ldr	r1, [r7, #12]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	440b      	add	r3, r1
 8008bd4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008bd8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bc80      	pop	{r7}
 8008be2:	4770      	bx	lr

08008be4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fa f8fe 	bl	8002e04 <HAL_PCD_SetAddress>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f880 	bl	8008d14 <USBD_Get_USB_Status>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	460b      	mov	r3, r1
 8008c30:	72fb      	strb	r3, [r7, #11]
 8008c32:	4613      	mov	r3, r2
 8008c34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c44:	893b      	ldrh	r3, [r7, #8]
 8008c46:	7af9      	ldrb	r1, [r7, #11]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	f7fa fa02 	bl	8003052 <HAL_PCD_EP_Transmit>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f85d 	bl	8008d14 <USBD_Get_USB_Status>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	607a      	str	r2, [r7, #4]
 8008c72:	461a      	mov	r2, r3
 8008c74:	460b      	mov	r3, r1
 8008c76:	72fb      	strb	r3, [r7, #11]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c8a:	893b      	ldrh	r3, [r7, #8]
 8008c8c:	7af9      	ldrb	r1, [r7, #11]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	f7fa f98b 	bl	8002faa <HAL_PCD_EP_Receive>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f83a 	bl	8008d14 <USBD_Get_USB_Status>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ca4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fa f9ad 	bl	8003024 <HAL_PCD_EP_GetRxCount>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <USBD_static_malloc+0x14>)
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bc80      	pop	{r7}
 8008ce6:	4770      	bx	lr
 8008ce8:	200001b8 	.word	0x200001b8

08008cec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]

}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bc80      	pop	{r7}
 8008cfc:	4770      	bx	lr

08008cfe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d0a:	bf00      	nop
 8008d0c:	370c      	adds	r7, #12
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bc80      	pop	{r7}
 8008d12:	4770      	bx	lr

08008d14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d817      	bhi.n	8008d58 <USBD_Get_USB_Status+0x44>
 8008d28:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <USBD_Get_USB_Status+0x1c>)
 8008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2e:	bf00      	nop
 8008d30:	08008d41 	.word	0x08008d41
 8008d34:	08008d47 	.word	0x08008d47
 8008d38:	08008d4d 	.word	0x08008d4d
 8008d3c:	08008d53 	.word	0x08008d53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
    break;
 8008d44:	e00b      	b.n	8008d5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d46:	2302      	movs	r3, #2
 8008d48:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4a:	e008      	b.n	8008d5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d50:	e005      	b.n	8008d5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d52:	2302      	movs	r3, #2
 8008d54:	73fb      	strb	r3, [r7, #15]
    break;
 8008d56:	e002      	b.n	8008d5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d58:	2302      	movs	r3, #2
 8008d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5c:	bf00      	nop
  }
  return usb_status;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop

08008d6c <__libc_init_array>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	2600      	movs	r6, #0
 8008d70:	4d0c      	ldr	r5, [pc, #48]	; (8008da4 <__libc_init_array+0x38>)
 8008d72:	4c0d      	ldr	r4, [pc, #52]	; (8008da8 <__libc_init_array+0x3c>)
 8008d74:	1b64      	subs	r4, r4, r5
 8008d76:	10a4      	asrs	r4, r4, #2
 8008d78:	42a6      	cmp	r6, r4
 8008d7a:	d109      	bne.n	8008d90 <__libc_init_array+0x24>
 8008d7c:	f000 f830 	bl	8008de0 <_init>
 8008d80:	2600      	movs	r6, #0
 8008d82:	4d0a      	ldr	r5, [pc, #40]	; (8008dac <__libc_init_array+0x40>)
 8008d84:	4c0a      	ldr	r4, [pc, #40]	; (8008db0 <__libc_init_array+0x44>)
 8008d86:	1b64      	subs	r4, r4, r5
 8008d88:	10a4      	asrs	r4, r4, #2
 8008d8a:	42a6      	cmp	r6, r4
 8008d8c:	d105      	bne.n	8008d9a <__libc_init_array+0x2e>
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d94:	4798      	blx	r3
 8008d96:	3601      	adds	r6, #1
 8008d98:	e7ee      	b.n	8008d78 <__libc_init_array+0xc>
 8008d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9e:	4798      	blx	r3
 8008da0:	3601      	adds	r6, #1
 8008da2:	e7f2      	b.n	8008d8a <__libc_init_array+0x1e>
 8008da4:	08008e7c 	.word	0x08008e7c
 8008da8:	08008e7c 	.word	0x08008e7c
 8008dac:	08008e7c 	.word	0x08008e7c
 8008db0:	08008e80 	.word	0x08008e80

08008db4 <memcmp>:
 8008db4:	b530      	push	{r4, r5, lr}
 8008db6:	2400      	movs	r4, #0
 8008db8:	3901      	subs	r1, #1
 8008dba:	42a2      	cmp	r2, r4
 8008dbc:	d101      	bne.n	8008dc2 <memcmp+0xe>
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	e005      	b.n	8008dce <memcmp+0x1a>
 8008dc2:	5d03      	ldrb	r3, [r0, r4]
 8008dc4:	3401      	adds	r4, #1
 8008dc6:	5d0d      	ldrb	r5, [r1, r4]
 8008dc8:	42ab      	cmp	r3, r5
 8008dca:	d0f6      	beq.n	8008dba <memcmp+0x6>
 8008dcc:	1b58      	subs	r0, r3, r5
 8008dce:	bd30      	pop	{r4, r5, pc}

08008dd0 <memset>:
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	4402      	add	r2, r0
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d100      	bne.n	8008dda <memset+0xa>
 8008dd8:	4770      	bx	lr
 8008dda:	f803 1b01 	strb.w	r1, [r3], #1
 8008dde:	e7f9      	b.n	8008dd4 <memset+0x4>

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
