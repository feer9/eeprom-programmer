
eeprom_programmer_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003494  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035dc  080035dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080035dc  080035dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035dc  080035dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080035e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002150  20000010  080035f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002160  080035f4  00022160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f263  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002088  00000000  00000000  0002f29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00031328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  00031d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001802f  00000000  00000000  00032658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c614  00000000  00000000  0004a687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000847ce  00000000  00000000  00056c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f8  00000000  00000000  000db4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003588 	.word	0x08003588

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003588 	.word	0x08003588

0800014c <sendCommandStart>:





int sendCommandStart() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	return serial_write(cmd_startxfer, 3);
 8000150:	2103      	movs	r1, #3
 8000152:	4803      	ldr	r0, [pc, #12]	; (8000160 <sendCommandStart+0x14>)
 8000154:	f000 fcf4 	bl	8000b40 <serial_write>
 8000158:	4603      	mov	r3, r0
}
 800015a:	4618      	mov	r0, r3
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	080035bc 	.word	0x080035bc

08000164 <sendCommandEnd>:
int sendCommandEnd() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	return serial_write(cmd_endxfer, 3);
 8000168:	2103      	movs	r1, #3
 800016a:	4803      	ldr	r0, [pc, #12]	; (8000178 <sendCommandEnd+0x14>)
 800016c:	f000 fce8 	bl	8000b40 <serial_write>
 8000170:	4603      	mov	r3, r0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	080035c0 	.word	0x080035c0

0800017c <sendCommand>:

int sendCommand(uint8_t cmd) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	return sendPackage(cmd, NULL, 0);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2200      	movs	r2, #0
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f805 	bl	800019c <sendPackage>
 8000192:	4603      	mov	r3, r0
}
 8000194:	4618      	mov	r0, r3
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}

0800019c <sendPackage>:

int sendPackage(uint8_t cmd, uint8_t *data, uint16_t len) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	6039      	str	r1, [r7, #0]
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	4613      	mov	r3, r2
 80001aa:	80bb      	strh	r3, [r7, #4]

	SEND(sendCommandStart());
 80001ac:	f7ff ffce 	bl	800014c <sendCommandStart>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <sendPackage+0x1e>
 80001b6:	2301      	movs	r3, #1
 80001b8:	e021      	b.n	80001fe <sendPackage+0x62>
	SEND(serial_write(&cmd, 1));
 80001ba:	1dfb      	adds	r3, r7, #7
 80001bc:	2101      	movs	r1, #1
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fcbe 	bl	8000b40 <serial_write>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <sendPackage+0x32>
 80001ca:	2301      	movs	r3, #1
 80001cc:	e017      	b.n	80001fe <sendPackage+0x62>

	if(data != NULL && len != 0) {
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d00c      	beq.n	80001ee <sendPackage+0x52>
 80001d4:	88bb      	ldrh	r3, [r7, #4]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d009      	beq.n	80001ee <sendPackage+0x52>
		SEND(serial_write(data, len));
 80001da:	88bb      	ldrh	r3, [r7, #4]
 80001dc:	4619      	mov	r1, r3
 80001de:	6838      	ldr	r0, [r7, #0]
 80001e0:	f000 fcae 	bl	8000b40 <serial_write>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <sendPackage+0x52>
 80001ea:	2301      	movs	r3, #1
 80001ec:	e007      	b.n	80001fe <sendPackage+0x62>
	}

	SEND(sendCommandEnd());
 80001ee:	f7ff ffb9 	bl	8000164 <sendCommandEnd>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <sendPackage+0x60>
 80001f8:	2301      	movs	r3, #1
 80001fa:	e000      	b.n	80001fe <sendPackage+0x62>

	return 0;
 80001fc:	2300      	movs	r3, #0
}
 80001fe:	4618      	mov	r0, r3
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}

08000206 <sendErr>:

int sendErr(uint8_t status) {
 8000206:	b580      	push	{r7, lr}
 8000208:	b082      	sub	sp, #8
 800020a:	af00      	add	r7, sp, #0
 800020c:	4603      	mov	r3, r0
 800020e:	71fb      	strb	r3, [r7, #7]
	return sendPackage(cmd_err, &status, 1);
 8000210:	1dfb      	adds	r3, r7, #7
 8000212:	2201      	movs	r2, #1
 8000214:	4619      	mov	r1, r3
 8000216:	20ff      	movs	r0, #255	; 0xff
 8000218:	f7ff ffc0 	bl	800019c <sendPackage>
 800021c:	4603      	mov	r3, r0
}
 800021e:	4618      	mov	r0, r3
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <sendOK>:

int sendOK(void) {
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
	return sendCommand(cmd_ok);
 800022a:	2010      	movs	r0, #16
 800022c:	f7ff ffa6 	bl	800017c <sendCommand>
 8000230:	4603      	mov	r3, r0
}
 8000232:	4618      	mov	r0, r3
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <receivePackage>:

int receivePackage(package_t *pkg){
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	uint8_t *buf = recvbuffer;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <receivePackage+0xc0>)
 8000242:	60fb      	str	r3, [r7, #12]

	if(pkg == NULL)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d101      	bne.n	800024e <receivePackage+0x16>
		return 1;
 800024a:	2301      	movs	r3, #1
 800024c:	e050      	b.n	80002f0 <receivePackage+0xb8>

	RECV(serial_read(buf, 4));
 800024e:	2104      	movs	r1, #4
 8000250:	68f8      	ldr	r0, [r7, #12]
 8000252:	f000 fc99 	bl	8000b88 <serial_read>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <receivePackage+0x28>
 800025c:	2301      	movs	r3, #1
 800025e:	e047      	b.n	80002f0 <receivePackage+0xb8>

	if(check_start(buf) != 0)
 8000260:	68f8      	ldr	r0, [r7, #12]
 8000262:	f000 f8a7 	bl	80003b4 <check_start>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <receivePackage+0x38>
		return 1;
 800026c:	2301      	movs	r3, #1
 800026e:	e03f      	b.n	80002f0 <receivePackage+0xb8>

	pkg->cmd = buf[3];
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	78da      	ldrb	r2, [r3, #3]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	701a      	strb	r2, [r3, #0]
	pkg->datalen = cmdHasData(pkg->cmd);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f83f 	bl	8000300 <cmdHasData>
 8000282:	4603      	mov	r3, r0
 8000284:	b29a      	uxth	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	805a      	strh	r2, [r3, #2]
	pkg->data = NULL;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]

	if(pkg->datalen != 0) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	885b      	ldrh	r3, [r3, #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d015      	beq.n	80002c4 <receivePackage+0x8c>

		if((pkg->cmd & 0xF0) == 0x50) // if receiving whole memory
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80002a0:	2b50      	cmp	r3, #80	; 0x50
 80002a2:	d101      	bne.n	80002a8 <receivePackage+0x70>
			buf = membuffer;
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <receivePackage+0xc4>)
 80002a6:	60fb      	str	r3, [r7, #12]

		RECV(serial_read(buf, pkg->datalen));
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	885b      	ldrh	r3, [r3, #2]
 80002ac:	4619      	mov	r1, r3
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f000 fc6a 	bl	8000b88 <serial_read>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <receivePackage+0x86>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e018      	b.n	80002f0 <receivePackage+0xb8>
		pkg->data = buf;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	605a      	str	r2, [r3, #4]
	}

	uint8_t buf2[3];
	RECV(serial_read(buf2, 3));
 80002c4:	f107 0308 	add.w	r3, r7, #8
 80002c8:	2103      	movs	r1, #3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fc5c 	bl	8000b88 <serial_read>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <receivePackage+0xa2>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00a      	b.n	80002f0 <receivePackage+0xb8>
	if(check_end(buf2) != 0)
 80002da:	f107 0308 	add.w	r3, r7, #8
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f878 	bl	80003d4 <check_end>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <receivePackage+0xb6>
		return 1;
 80002ea:	2301      	movs	r3, #1
 80002ec:	e000      	b.n	80002f0 <receivePackage+0xb8>

	return HAL_OK;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000044 	.word	0x20000044
 80002fc:	200000c8 	.word	0x200000c8

08000300 <cmdHasData>:

int cmdHasData(uint8_t command) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
	switch(command) {
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2bff      	cmp	r3, #255	; 0xff
 800030e:	d04a      	beq.n	80003a6 <cmdHasData+0xa6>
 8000310:	2bff      	cmp	r3, #255	; 0xff
 8000312:	dc4a      	bgt.n	80003aa <cmdHasData+0xaa>
 8000314:	2b52      	cmp	r3, #82	; 0x52
 8000316:	dc48      	bgt.n	80003aa <cmdHasData+0xaa>
 8000318:	2b40      	cmp	r3, #64	; 0x40
 800031a:	da04      	bge.n	8000326 <cmdHasData+0x26>
 800031c:	2b01      	cmp	r3, #1
 800031e:	d02f      	beq.n	8000380 <cmdHasData+0x80>
 8000320:	2b10      	cmp	r3, #16
 8000322:	d03e      	beq.n	80003a2 <cmdHasData+0xa2>
 8000324:	e041      	b.n	80003aa <cmdHasData+0xaa>
 8000326:	3b40      	subs	r3, #64	; 0x40
 8000328:	2b12      	cmp	r3, #18
 800032a:	d83e      	bhi.n	80003aa <cmdHasData+0xaa>
 800032c:	a201      	add	r2, pc, #4	; (adr r2, 8000334 <cmdHasData+0x34>)
 800032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000332:	bf00      	nop
 8000334:	08000381 	.word	0x08000381
 8000338:	08000381 	.word	0x08000381
 800033c:	08000381 	.word	0x08000381
 8000340:	080003ab 	.word	0x080003ab
 8000344:	080003ab 	.word	0x080003ab
 8000348:	080003ab 	.word	0x080003ab
 800034c:	080003ab 	.word	0x080003ab
 8000350:	080003ab 	.word	0x080003ab
 8000354:	080003ab 	.word	0x080003ab
 8000358:	080003ab 	.word	0x080003ab
 800035c:	080003ab 	.word	0x080003ab
 8000360:	080003ab 	.word	0x080003ab
 8000364:	080003ab 	.word	0x080003ab
 8000368:	080003ab 	.word	0x080003ab
 800036c:	080003ab 	.word	0x080003ab
 8000370:	080003ab 	.word	0x080003ab
 8000374:	08000385 	.word	0x08000385
 8000378:	0800038f 	.word	0x0800038f
 800037c:	08000399 	.word	0x08000399

	case cmd_init:

	case cmd_readmem16:
	case cmd_readmemx64:
	case cmd_readmem256: return 0;
 8000380:	2300      	movs	r3, #0
 8000382:	e013      	b.n	80003ac <cmdHasData+0xac>

	case cmd_writemem16: return getMemSize(MEMTYPE_24LC16);
 8000384:	2000      	movs	r0, #0
 8000386:	f000 fb19 	bl	80009bc <getMemSize>
 800038a:	4603      	mov	r3, r0
 800038c:	e00e      	b.n	80003ac <cmdHasData+0xac>
	case cmd_writememx64: return getMemSize(MEMTYPE_X24645);
 800038e:	2001      	movs	r0, #1
 8000390:	f000 fb14 	bl	80009bc <getMemSize>
 8000394:	4603      	mov	r3, r0
 8000396:	e009      	b.n	80003ac <cmdHasData+0xac>
	case cmd_writemem256: return getMemSize(MEMTYPE_24LC256); // will have to split this
 8000398:	2002      	movs	r0, #2
 800039a:	f000 fb0f 	bl	80009bc <getMemSize>
 800039e:	4603      	mov	r3, r0
 80003a0:	e004      	b.n	80003ac <cmdHasData+0xac>

	case cmd_ok:  return 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e002      	b.n	80003ac <cmdHasData+0xac>
	case cmd_err: return 1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	e000      	b.n	80003ac <cmdHasData+0xac>

	default: return 0;
 80003aa:	2300      	movs	r3, #0
	}
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <check_start>:

int check_start(uint8_t *p) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	return memcmp(p, cmd_startxfer, 3);
 80003bc:	2203      	movs	r2, #3
 80003be:	4904      	ldr	r1, [pc, #16]	; (80003d0 <check_start+0x1c>)
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f003 f8cb 	bl	800355c <memcmp>
 80003c6:	4603      	mov	r3, r0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	080035bc 	.word	0x080035bc

080003d4 <check_end>:

int check_end(uint8_t *p) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	return memcmp(p, cmd_endxfer, 3);
 80003dc:	2203      	movs	r2, #3
 80003de:	4904      	ldr	r1, [pc, #16]	; (80003f0 <check_end+0x1c>)
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f003 f8bb 	bl	800355c <memcmp>
 80003e6:	4603      	mov	r3, r0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	080035c0 	.word	0x080035c0

080003f4 <uart_fsm>:


/*********************************************************/

void uart_fsm(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
	static int st = 0, requested_mem, fails = 0;
	static package_t package;
	int ret;

	switch (st)
 80003fa:	4b73      	ldr	r3, [pc, #460]	; (80005c8 <uart_fsm+0x1d4>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2bf1      	cmp	r3, #241	; 0xf1
 8000400:	f000 80d1 	beq.w	80005a6 <uart_fsm+0x1b2>
 8000404:	2bf1      	cmp	r3, #241	; 0xf1
 8000406:	f300 80d2 	bgt.w	80005ae <uart_fsm+0x1ba>
 800040a:	2b52      	cmp	r3, #82	; 0x52
 800040c:	f300 80cf 	bgt.w	80005ae <uart_fsm+0x1ba>
 8000410:	2b40      	cmp	r3, #64	; 0x40
 8000412:	da0a      	bge.n	800042a <uart_fsm+0x36>
 8000414:	2b02      	cmp	r3, #2
 8000416:	f000 80bd 	beq.w	8000594 <uart_fsm+0x1a0>
 800041a:	2b02      	cmp	r3, #2
 800041c:	f300 80c7 	bgt.w	80005ae <uart_fsm+0x1ba>
 8000420:	2b00      	cmp	r3, #0
 8000422:	d02f      	beq.n	8000484 <uart_fsm+0x90>
 8000424:	2b01      	cmp	r3, #1
 8000426:	d043      	beq.n	80004b0 <uart_fsm+0xbc>
 8000428:	e0c1      	b.n	80005ae <uart_fsm+0x1ba>
 800042a:	3b40      	subs	r3, #64	; 0x40
 800042c:	2b12      	cmp	r3, #18
 800042e:	f200 80be 	bhi.w	80005ae <uart_fsm+0x1ba>
 8000432:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <uart_fsm+0x44>)
 8000434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000438:	0800052d 	.word	0x0800052d
 800043c:	0800052d 	.word	0x0800052d
 8000440:	0800055b 	.word	0x0800055b
 8000444:	080005af 	.word	0x080005af
 8000448:	080005af 	.word	0x080005af
 800044c:	080005af 	.word	0x080005af
 8000450:	080005af 	.word	0x080005af
 8000454:	080005af 	.word	0x080005af
 8000458:	080005af 	.word	0x080005af
 800045c:	080005af 	.word	0x080005af
 8000460:	080005af 	.word	0x080005af
 8000464:	080005af 	.word	0x080005af
 8000468:	080005af 	.word	0x080005af
 800046c:	080005af 	.word	0x080005af
 8000470:	080005af 	.word	0x080005af
 8000474:	080005af 	.word	0x080005af
 8000478:	08000563 	.word	0x08000563
 800047c:	08000563 	.word	0x08000563
 8000480:	0800058d 	.word	0x0800058d
	{
	case 0:
		// try to establish connection with serial port server
		ret = receivePackage(&package);
 8000484:	4851      	ldr	r0, [pc, #324]	; (80005cc <uart_fsm+0x1d8>)
 8000486:	f7ff fed7 	bl	8000238 <receivePackage>
 800048a:	6078      	str	r0, [r7, #4]

		if (ret == HAL_OK) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	f040 8091 	bne.w	80005b6 <uart_fsm+0x1c2>
			if(package.cmd == cmd_init) {
 8000494:	4b4d      	ldr	r3, [pc, #308]	; (80005cc <uart_fsm+0x1d8>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	f040 808c 	bne.w	80005b6 <uart_fsm+0x1c2>
				sendCommand(cmd_init);
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff fe6c 	bl	800017c <sendCommand>
				st++;
 80004a4:	4b48      	ldr	r3, [pc, #288]	; (80005c8 <uart_fsm+0x1d4>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	4a47      	ldr	r2, [pc, #284]	; (80005c8 <uart_fsm+0x1d4>)
 80004ac:	6013      	str	r3, [r2, #0]
			}
		}
		break;
 80004ae:	e082      	b.n	80005b6 <uart_fsm+0x1c2>
	case 1:

		ret = receivePackage(&package);
 80004b0:	4846      	ldr	r0, [pc, #280]	; (80005cc <uart_fsm+0x1d8>)
 80004b2:	f7ff fec1 	bl	8000238 <receivePackage>
 80004b6:	6078      	str	r0, [r7, #4]
		if(ret != HAL_OK) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00f      	beq.n	80004de <uart_fsm+0xea>
			if(++fails >= 5) {
 80004be:	4b44      	ldr	r3, [pc, #272]	; (80005d0 <uart_fsm+0x1dc>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	4a42      	ldr	r2, [pc, #264]	; (80005d0 <uart_fsm+0x1dc>)
 80004c6:	6013      	str	r3, [r2, #0]
 80004c8:	4b41      	ldr	r3, [pc, #260]	; (80005d0 <uart_fsm+0x1dc>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b04      	cmp	r3, #4
 80004ce:	dd74      	ble.n	80005ba <uart_fsm+0x1c6>
				fails = 0;
 80004d0:	4b3f      	ldr	r3, [pc, #252]	; (80005d0 <uart_fsm+0x1dc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
				st = 0;
 80004d6:	4b3c      	ldr	r3, [pc, #240]	; (80005c8 <uart_fsm+0x1d4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
			}
			break;
 80004dc:	e06d      	b.n	80005ba <uart_fsm+0x1c6>
		}
		fails = 0;
 80004de:	4b3c      	ldr	r3, [pc, #240]	; (80005d0 <uart_fsm+0x1dc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
		st = package.cmd;
 80004e4:	4b39      	ldr	r3, [pc, #228]	; (80005cc <uart_fsm+0x1d8>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <uart_fsm+0x1d4>)
 80004ec:	601a      	str	r2, [r3, #0]

		int tmp = st & 0xF0;
 80004ee:	4b36      	ldr	r3, [pc, #216]	; (80005c8 <uart_fsm+0x1d4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004f6:	603b      	str	r3, [r7, #0]
		if(tmp == 0x40 || tmp == 0x50) { // if requesting memory w/r
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	2b40      	cmp	r3, #64	; 0x40
 80004fc:	d002      	beq.n	8000504 <uart_fsm+0x110>
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2b50      	cmp	r3, #80	; 0x50
 8000502:	d15c      	bne.n	80005be <uart_fsm+0x1ca>

			requested_mem = st & 0x0F;
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <uart_fsm+0x1d4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 030f 	and.w	r3, r3, #15
 800050c:	4a31      	ldr	r2, [pc, #196]	; (80005d4 <uart_fsm+0x1e0>)
 800050e:	6013      	str	r3, [r2, #0]
			if(requested_mem != g_memtype) {
 8000510:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <uart_fsm+0x1e4>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <uart_fsm+0x1e0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	429a      	cmp	r2, r3
 800051c:	d04f      	beq.n	80005be <uart_fsm+0x1ca>
				sendErr(2);
 800051e:	2002      	movs	r0, #2
 8000520:	f7ff fe71 	bl	8000206 <sendErr>
				st = 1;
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <uart_fsm+0x1d4>)
 8000526:	2201      	movs	r2, #1
 8000528:	601a      	str	r2, [r3, #0]
			}
		}

		break;
 800052a:	e048      	b.n	80005be <uart_fsm+0x1ca>

	case cmd_readmem16:  // this isn't a state, unless I had used interruptions
	case cmd_readmemx64:
		// read memory and sent back the content
		if(readMemory(membuffer) == HAL_OK) {
 800052c:	482b      	ldr	r0, [pc, #172]	; (80005dc <uart_fsm+0x1e8>)
 800052e:	f000 fab3 	bl	8000a98 <readMemory>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d109      	bne.n	800054c <uart_fsm+0x158>
			sendPackage(package.cmd, membuffer, g_memsize);
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <uart_fsm+0x1d8>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <uart_fsm+0x1ec>)
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	b292      	uxth	r2, r2
 8000542:	4926      	ldr	r1, [pc, #152]	; (80005dc <uart_fsm+0x1e8>)
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fe29 	bl	800019c <sendPackage>
 800054a:	e002      	b.n	8000552 <uart_fsm+0x15e>
		}
		else {
			sendErr(10);
 800054c:	200a      	movs	r0, #10
 800054e:	f7ff fe5a 	bl	8000206 <sendErr>
		}
		st = 1;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <uart_fsm+0x1d4>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
		break;
 8000558:	e032      	b.n	80005c0 <uart_fsm+0x1cc>

	case cmd_readmem256:
		st = 1;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <uart_fsm+0x1d4>)
 800055c:	2201      	movs	r2, #1
 800055e:	601a      	str	r2, [r3, #0]
		break;
 8000560:	e02e      	b.n	80005c0 <uart_fsm+0x1cc>

	case cmd_writemem16:
	case cmd_writememx64:
		// write to eeprom the content received
		if(saveMemory(package.data) != HAL_OK) {
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <uart_fsm+0x1d8>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fac0 	bl	8000aec <saveMemory>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d006      	beq.n	8000580 <uart_fsm+0x18c>
			sendErr(st);
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <uart_fsm+0x1d4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff fe44 	bl	8000206 <sendErr>
 800057e:	e001      	b.n	8000584 <uart_fsm+0x190>
		}
		else {
			sendOK();
 8000580:	f7ff fe51 	bl	8000226 <sendOK>
		}
		st = 1;
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <uart_fsm+0x1d4>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
		break;
 800058a:	e019      	b.n	80005c0 <uart_fsm+0x1cc>

	case cmd_writemem256:
		st = 1;
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <uart_fsm+0x1d4>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
		break;
 8000592:	e015      	b.n	80005c0 <uart_fsm+0x1cc>


	case cmd_ping:
		sendPackage(cmd_ping, NULL,0);
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	2002      	movs	r0, #2
 800059a:	f7ff fdff 	bl	800019c <sendPackage>
		st = 1;
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <uart_fsm+0x1d4>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
		break;
 80005a4:	e00c      	b.n	80005c0 <uart_fsm+0x1cc>

	case cmd_disconnect:
		st = 0;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <uart_fsm+0x1d4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
		break;
 80005ac:	e008      	b.n	80005c0 <uart_fsm+0x1cc>

	default:
		st=0;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <uart_fsm+0x1d4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
		break;
 80005b4:	e004      	b.n	80005c0 <uart_fsm+0x1cc>
		break;
 80005b6:	bf00      	nop
 80005b8:	e002      	b.n	80005c0 <uart_fsm+0x1cc>
			break;
 80005ba:	bf00      	nop
 80005bc:	e000      	b.n	80005c0 <uart_fsm+0x1cc>
		break;
 80005be:	bf00      	nop
	}
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	20000030 	.word	0x20000030
 80005d0:	20000038 	.word	0x20000038
 80005d4:	2000003c 	.word	0x2000003c
 80005d8:	20000000 	.word	0x20000000
 80005dc:	200000c8 	.word	0x200000c8
 80005e0:	200000c4 	.word	0x200000c4

080005e4 <MEMX24645_write_page>:
// 24LC16B answers to address 0x50 to 0x57
// X24645 answers to address 0x00 to 0x1F


int MEMX24645_write_page(const uint8_t *page, uint16_t register_address)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af04      	add	r7, sp, #16
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	int ret = HAL_OK, attempts = 100; // just to be sure... it fails with 10
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	613b      	str	r3, [r7, #16]
	uint8_t slave_address = (memx24645_addr7 | ((register_address >> 8) & 0x1FU)) << 1U;
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 031f 	and.w	r3, r3, #31
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MEMX24645_write_page+0x70>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4313      	orrs	r3, r2
 800060c:	b2db      	uxtb	r3, r3
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_address = register_address & 0xFFU;
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	73bb      	strb	r3, [r7, #14]

	while(--attempts &&
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	3b01      	subs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d013      	beq.n	800064a <MEMX24645_write_page+0x66>
		  (ret=HAL_I2C_Mem_Write(&hi2c2, slave_address, byte_address, 1, (uint8_t *)page, 32, 5000)) != HAL_OK);
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b299      	uxth	r1, r3
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	b29a      	uxth	r2, r3
 800062a:	f241 3388 	movw	r3, #5000	; 0x1388
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2320      	movs	r3, #32
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <MEMX24645_write_page+0x74>)
 800063c:	f001 f910 	bl	8001860 <HAL_I2C_Mem_Write>
 8000640:	4603      	mov	r3, r0
 8000642:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1e5      	bne.n	8000616 <MEMX24645_write_page+0x32>

	return ret;
 800064a:	697b      	ldr	r3, [r7, #20]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000040 	.word	0x20000040
 8000658:	200020c8 	.word	0x200020c8

0800065c <MEMX24645_write>:

int MEMX24645_write(const uint8_t *buffer, uint16_t register_base, uint16_t size)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
 8000668:	4613      	mov	r3, r2
 800066a:	803b      	strh	r3, [r7, #0]
	int ret = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
	uint16_t register_top = register_base + size;
 8000670:	887a      	ldrh	r2, [r7, #2]
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	4413      	add	r3, r2
 8000676:	81fb      	strh	r3, [r7, #14]
	uint32_t register_address;

	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	e00f      	b.n	800069e <MEMX24645_write+0x42>
	{
		if( (ret=MEMX24645_write_page(&buffer[register_address], register_address)) != HAL_OK)
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	4413      	add	r3, r2
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	b292      	uxth	r2, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ffaa 	bl	80005e4 <MEMX24645_write_page>
 8000690:	6178      	str	r0, [r7, #20]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d107      	bne.n	80006a8 <MEMX24645_write+0x4c>
	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	3320      	adds	r3, #32
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	89fb      	ldrh	r3, [r7, #14]
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d3eb      	bcc.n	800067e <MEMX24645_write+0x22>
 80006a6:	e000      	b.n	80006aa <MEMX24645_write+0x4e>
			break;
 80006a8:	bf00      	nop
	}

	return ret;
 80006aa:	697b      	ldr	r3, [r7, #20]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <MEMX24645_write_reg>:

int MEMX24645_write_reg(uint8_t reg, uint16_t register_address)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af04      	add	r7, sp, #16
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
	int ret = HAL_OK, attempts = 10;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	230a      	movs	r3, #10
 80006ca:	613b      	str	r3, [r7, #16]
	uint8_t slave_address = (memx24645_addr7 | ((register_address >> 8) & 0x1FU)) << 1U;
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f003 031f 	and.w	r3, r3, #31
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MEMX24645_write_reg+0x74>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_address = register_address & 0xFFU;
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	73bb      	strb	r3, [r7, #14]

	while(--attempts &&
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d012      	beq.n	800071c <MEMX24645_write_reg+0x68>
		  (ret=HAL_I2C_Mem_Write(&hi2c2, slave_address, byte_address, 1, &reg, 1, 100)) != HAL_OK);
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	b299      	uxth	r1, r3
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	9302      	str	r3, [sp, #8]
 8000702:	2301      	movs	r3, #1
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <MEMX24645_write_reg+0x78>)
 800070e:	f001 f8a7 	bl	8001860 <HAL_I2C_Mem_Write>
 8000712:	4603      	mov	r3, r0
 8000714:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1e6      	bne.n	80006ea <MEMX24645_write_reg+0x36>

	return ret;
 800071c:	697b      	ldr	r3, [r7, #20]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000040 	.word	0x20000040
 800072c:	200020c8 	.word	0x200020c8

08000730 <MEMX24645_read_page>:

	return ret;
}

int MEMX24645_read_page(uint8_t *page, uint16_t register_address)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af04      	add	r7, sp, #16
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	807b      	strh	r3, [r7, #2]
	int ret = HAL_OK, attempts = 10;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	230a      	movs	r3, #10
 8000742:	613b      	str	r3, [r7, #16]
	uint8_t slave_address = (memx24645_addr7 | ((register_address >> 8) & 0x1FU)) << 1U;
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	b29b      	uxth	r3, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 031f 	and.w	r3, r3, #31
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MEMX24645_read_page+0x70>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4313      	orrs	r3, r2
 8000758:	b2db      	uxtb	r3, r3
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_address = register_address & 0xFFU;
 800075e:	887b      	ldrh	r3, [r7, #2]
 8000760:	73bb      	strb	r3, [r7, #14]

	while(--attempts &&
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3b01      	subs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d013      	beq.n	8000796 <MEMX24645_read_page+0x66>
		  ((ret=HAL_I2C_Mem_Read(&hi2c2, slave_address, byte_address, 1, page, 32, 1000)) != HAL_OK) );
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	b299      	uxth	r1, r3
 8000772:	7bbb      	ldrb	r3, [r7, #14]
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2320      	movs	r3, #32
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <MEMX24645_read_page+0x74>)
 8000788:	f001 f964 	bl	8001a54 <HAL_I2C_Mem_Read>
 800078c:	4603      	mov	r3, r0
 800078e:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1e5      	bne.n	8000762 <MEMX24645_read_page+0x32>

	return ret;
 8000796:	697b      	ldr	r3, [r7, #20]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000040 	.word	0x20000040
 80007a4:	200020c8 	.word	0x200020c8

080007a8 <MEMX24645_read>:

int MEMX24645_read(uint8_t *buf, uint16_t register_base, uint16_t size)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
 80007b4:	4613      	mov	r3, r2
 80007b6:	803b      	strh	r3, [r7, #0]
	int ret = HAL_OK;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
	uint16_t register_top = register_base + size;
 80007bc:	887a      	ldrh	r2, [r7, #2]
 80007be:	883b      	ldrh	r3, [r7, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	81fb      	strh	r3, [r7, #14]
	uint32_t register_address;

	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	e00f      	b.n	80007ea <MEMX24645_read+0x42>
	{
		if ((ret=MEMX24645_read_page(&buf[register_address], register_address)) != HAL_OK)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	4413      	add	r3, r2
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	b292      	uxth	r2, r2
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffaa 	bl	8000730 <MEMX24645_read_page>
 80007dc:	6178      	str	r0, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d107      	bne.n	80007f4 <MEMX24645_read+0x4c>
	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	3320      	adds	r3, #32
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	89fb      	ldrh	r3, [r7, #14]
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d3eb      	bcc.n	80007ca <MEMX24645_read+0x22>
 80007f2:	e000      	b.n	80007f6 <MEMX24645_read+0x4e>
			break;
 80007f4:	bf00      	nop
	}

	return ret;
 80007f6:	697b      	ldr	r3, [r7, #20]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MEM24LC16_write_page>:
}
#endif

// 24LC16 MEMORY PAGES ARE ONLY 16 BYTES LONG !!!
int MEM24LC16_write_page(const uint8_t *page, uint16_t register_address)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af04      	add	r7, sp, #16
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	807b      	strh	r3, [r7, #2]
	int ret = HAL_OK, attempts = 120; // TODO: tune attempts value
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	2378      	movs	r3, #120	; 0x78
 8000812:	613b      	str	r3, [r7, #16]
	uint8_t control_byte = (mem24lc16_addr7 | ((register_address >> 8) & 0x07U)) << 1U;
 8000814:	887b      	ldrh	r3, [r7, #2]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b29b      	uxth	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MEM24LC16_write_page+0x70>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4313      	orrs	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
	uint8_t word_address = register_address & 0xFFU;
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	73bb      	strb	r3, [r7, #14]


	while(--attempts &&
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	3b01      	subs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d013      	beq.n	8000866 <MEM24LC16_write_page+0x66>
		  ((ret=HAL_I2C_Mem_Write(&hi2c2, control_byte, word_address, 1, (uint8_t *)page, 16, 1000)) != HAL_OK) );
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	b299      	uxth	r1, r3
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	b29a      	uxth	r2, r3
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	2310      	movs	r3, #16
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <MEM24LC16_write_page+0x74>)
 8000858:	f001 f802 	bl	8001860 <HAL_I2C_Mem_Write>
 800085c:	4603      	mov	r3, r0
 800085e:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1e5      	bne.n	8000832 <MEM24LC16_write_page+0x32>

	return ret;
 8000866:	697b      	ldr	r3, [r7, #20]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000001 	.word	0x20000001
 8000874:	200020c8 	.word	0x200020c8

08000878 <MEM24LC16_write>:

int MEM24LC16_write(const uint8_t *buffer, uint16_t register_base, uint16_t size)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	807b      	strh	r3, [r7, #2]
 8000884:	4613      	mov	r3, r2
 8000886:	803b      	strh	r3, [r7, #0]
	int ret = HAL_OK;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
	uint16_t register_top = register_base + size;
 800088c:	887a      	ldrh	r2, [r7, #2]
 800088e:	883b      	ldrh	r3, [r7, #0]
 8000890:	4413      	add	r3, r2
 8000892:	81fb      	strh	r3, [r7, #14]
	uint32_t register_address;

	for(register_address = register_base; register_address < register_top; register_address += 16)
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	e00f      	b.n	80008ba <MEM24LC16_write+0x42>
	{
		if( (ret=MEM24LC16_write_page(&buffer[register_address], register_address)) != HAL_OK)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	4413      	add	r3, r2
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	b292      	uxth	r2, r2
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ffaa 	bl	8000800 <MEM24LC16_write_page>
 80008ac:	6178      	str	r0, [r7, #20]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d107      	bne.n	80008c4 <MEM24LC16_write+0x4c>
	for(register_address = register_base; register_address < register_top; register_address += 16)
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	3310      	adds	r3, #16
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	89fb      	ldrh	r3, [r7, #14]
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d3eb      	bcc.n	800089a <MEM24LC16_write+0x22>
 80008c2:	e000      	b.n	80008c6 <MEM24LC16_write+0x4e>
			break;
 80008c4:	bf00      	nop
	}

	return ret;
 80008c6:	697b      	ldr	r3, [r7, #20]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <MEM24LC16_read_page>:

int MEM24LC16_read_page(uint8_t *page, uint16_t register_address)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af04      	add	r7, sp, #16
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	807b      	strh	r3, [r7, #2]
	int ret = HAL_OK, attempts = 10;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	230a      	movs	r3, #10
 80008e2:	613b      	str	r3, [r7, #16]
	uint8_t control_byte = (mem24lc16_addr7 | ((register_address >> 8) & 0x07U)) << 1U;
 80008e4:	887b      	ldrh	r3, [r7, #2]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0307 	and.w	r3, r3, #7
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MEM24LC16_read_page+0x70>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
	uint8_t word_address = register_address & 0xFF;
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	73bb      	strb	r3, [r7, #14]

	while(--attempts &&
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	3b01      	subs	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d013      	beq.n	8000936 <MEM24LC16_read_page+0x66>
			((ret=HAL_I2C_Mem_Read(&hi2c2, control_byte, word_address, 1, page, 32, 1000)) != HAL_OK) );
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	b299      	uxth	r1, r3
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	b29a      	uxth	r2, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	2320      	movs	r3, #32
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <MEM24LC16_read_page+0x74>)
 8000928:	f001 f894 	bl	8001a54 <HAL_I2C_Mem_Read>
 800092c:	4603      	mov	r3, r0
 800092e:	617b      	str	r3, [r7, #20]
	while(--attempts &&
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1e5      	bne.n	8000902 <MEM24LC16_read_page+0x32>

	return ret;
 8000936:	697b      	ldr	r3, [r7, #20]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000001 	.word	0x20000001
 8000944:	200020c8 	.word	0x200020c8

08000948 <MEM24LC16_read>:

int MEM24LC16_read(uint8_t *buf, uint16_t register_base, uint16_t size)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
 8000954:	4613      	mov	r3, r2
 8000956:	803b      	strh	r3, [r7, #0]
	int ret = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
	uint16_t register_top = register_base + size; // ¿-1?
 800095c:	887a      	ldrh	r2, [r7, #2]
 800095e:	883b      	ldrh	r3, [r7, #0]
 8000960:	4413      	add	r3, r2
 8000962:	81fb      	strh	r3, [r7, #14]
	uint32_t register_address;

	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 8000964:	887b      	ldrh	r3, [r7, #2]
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	e00f      	b.n	800098a <MEM24LC16_read+0x42>
	{
		if ((ret=MEM24LC16_read_page(&buf[register_address], register_address)) != HAL_OK)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4413      	add	r3, r2
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	b292      	uxth	r2, r2
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ffaa 	bl	80008d0 <MEM24LC16_read_page>
 800097c:	6178      	str	r0, [r7, #20]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d107      	bne.n	8000994 <MEM24LC16_read+0x4c>
	for(register_address = register_base; register_address < register_top; register_address += PAGE_SZ)
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	3320      	adds	r3, #32
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	89fb      	ldrh	r3, [r7, #14]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	429a      	cmp	r2, r3
 8000990:	d3eb      	bcc.n	800096a <MEM24LC16_read+0x22>
 8000992:	e000      	b.n	8000996 <MEM24LC16_read+0x4e>
			break;
 8000994:	bf00      	nop
	}

	return ret;
 8000996:	697b      	ldr	r3, [r7, #20]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MEMX24645_enableWriteAccess>:

void MEMX24645_enableWriteAccess()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	if(HAL_OK != MEMX24645_write_reg(0x02, 0x1FFF)) {
 80009a4:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fe83 	bl	80006b4 <MEMX24645_write_reg>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d000      	beq.n	80009b6 <MEMX24645_enableWriteAccess+0x16>
		while(1); // Do not continue
 80009b4:	e7fe      	b.n	80009b4 <MEMX24645_enableWriteAccess+0x14>
	}
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <getMemSize>:


uint32_t getMemSize(int memtype) {
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	//                           MEMTYPE_24LC16, MEMTYPE_X24645, MEMTYPE_24LC256
	const uint32_t memsizes[] = { 0x800,          0x2000,         0x8000 };
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <getMemSize+0x3c>)
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80009cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if(memtype >= MEMTYPE_24LC16 && memtype <= MEMTYPE_mAX)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0a      	blt.n	80009ec <getMemSize+0x30>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	dc07      	bgt.n	80009ec <getMemSize+0x30>
		return memsizes[memtype];
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	f107 0218 	add.w	r2, r7, #24
 80009e4:	4413      	add	r3, r2
 80009e6:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80009ea:	e000      	b.n	80009ee <getMemSize+0x32>

	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	371c      	adds	r7, #28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	080035a0 	.word	0x080035a0

080009fc <EEPROM_Init>:


void EEPROM_Init()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	int ret = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]


	while(ret != HAL_OK)
 8000a06:	e028      	b.n	8000a5a <EEPROM_Init+0x5e>
	{
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f000 fb41 	bl	8001090 <HAL_Delay>
		ret = HAL_I2C_IsDeviceReady(&hi2c2, memx24645_addr7 << 1U, 3u, 5u);
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <EEPROM_Init+0x88>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	b299      	uxth	r1, r3
 8000a18:	2305      	movs	r3, #5
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	481a      	ldr	r0, [pc, #104]	; (8000a88 <EEPROM_Init+0x8c>)
 8000a1e:	f001 fa81 	bl	8001f24 <HAL_I2C_IsDeviceReady>
 8000a22:	4603      	mov	r3, r0
 8000a24:	607b      	str	r3, [r7, #4]
		if(ret == HAL_OK) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d103      	bne.n	8000a34 <EEPROM_Init+0x38>
			g_memtype = MEMTYPE_X24645;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <EEPROM_Init+0x90>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
			break;
 8000a32:	e015      	b.n	8000a60 <EEPROM_Init+0x64>
		}
		ret = HAL_I2C_IsDeviceReady(&hi2c2, mem24lc16_addr7 << 1U, 3u, 5u);
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <EEPROM_Init+0x94>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	b299      	uxth	r1, r3
 8000a3e:	2305      	movs	r3, #5
 8000a40:	2203      	movs	r2, #3
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <EEPROM_Init+0x8c>)
 8000a44:	f001 fa6e 	bl	8001f24 <HAL_I2C_IsDeviceReady>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	607b      	str	r3, [r7, #4]
		if(ret == HAL_OK) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d103      	bne.n	8000a5a <EEPROM_Init+0x5e>
			g_memtype = MEMTYPE_24LC16;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <EEPROM_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
			break;
 8000a58:	e002      	b.n	8000a60 <EEPROM_Init+0x64>
	while(ret != HAL_OK)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1d3      	bne.n	8000a08 <EEPROM_Init+0xc>
		}
	}
	g_memsize = getMemSize(g_memtype);
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <EEPROM_Init+0x90>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ffa9 	bl	80009bc <getMemSize>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <EEPROM_Init+0x98>)
 8000a6e:	6013      	str	r3, [r2, #0]

	if(g_memtype == MEMTYPE_X24645) {
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <EEPROM_Init+0x90>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d101      	bne.n	8000a7c <EEPROM_Init+0x80>
		MEMX24645_enableWriteAccess();
 8000a78:	f7ff ff92 	bl	80009a0 <MEMX24645_enableWriteAccess>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000040 	.word	0x20000040
 8000a88:	200020c8 	.word	0x200020c8
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000001 	.word	0x20000001
 8000a94:	200000c4 	.word	0x200000c4

08000a98 <readMemory>:
#include "main.h"



int readMemory(uint8_t *buffer)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if(g_memtype== MEMTYPE_24LC16) {
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <readMemory+0x4c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d109      	bne.n	8000abc <readMemory+0x24>
		return MEM24LC16_read(buffer, 0, g_memsize);
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <readMemory+0x50>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ff48 	bl	8000948 <MEM24LC16_read>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	e00f      	b.n	8000adc <readMemory+0x44>
	}
	else if(g_memtype == MEMTYPE_X24645) {
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <readMemory+0x4c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d109      	bne.n	8000ad8 <readMemory+0x40>
		return MEMX24645_read(buffer, 0, g_memsize);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <readMemory+0x50>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fe6a 	bl	80007a8 <MEMX24645_read>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	e001      	b.n	8000adc <readMemory+0x44>
	}
	return -1;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	200000c4 	.word	0x200000c4

08000aec <saveMemory>:

int saveMemory(const uint8_t *data)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if(g_memtype == MEMTYPE_24LC16)
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <saveMemory+0x4c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d109      	bne.n	8000b10 <saveMemory+0x24>
		return MEM24LC16_write(data, 0, g_memsize);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <saveMemory+0x50>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff feb6 	bl	8000878 <MEM24LC16_write>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	e00f      	b.n	8000b30 <saveMemory+0x44>
	else if(g_memtype == MEMTYPE_X24645)
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <saveMemory+0x4c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d109      	bne.n	8000b2c <saveMemory+0x40>
		return MEMX24645_write(data, 0, g_memsize);
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <saveMemory+0x50>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fd9a 	bl	800065c <MEMX24645_write>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	e001      	b.n	8000b30 <saveMemory+0x44>
	return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	200000c4 	.word	0x200000c4

08000b40 <serial_write>:
int serial_clearScreen(void) {
	uint8_t clearScreen[] = {0x1B, 0x5B, 0x32, 0x4A};
	return serial_write(clearScreen, sizeof clearScreen);
}

int serial_write(const uint8_t *data, uint16_t len) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
	uint8_t retries = 5;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	73fb      	strb	r3, [r7, #15]
	int ret = 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]

	while(retries-- && ret != HAL_OK) {
 8000b54:	e008      	b.n	8000b68 <serial_write+0x28>
		ret = HAL_UART_Transmit(&huart2, (uint8_t *) data, len, 1000) ;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	4809      	ldr	r0, [pc, #36]	; (8000b84 <serial_write+0x44>)
 8000b60:	f002 facf 	bl	8003102 <HAL_UART_Transmit>
 8000b64:	4603      	mov	r3, r0
 8000b66:	60bb      	str	r3, [r7, #8]
	while(retries-- && ret != HAL_OK) {
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	73fa      	strb	r2, [r7, #15]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <serial_write+0x38>
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1ee      	bne.n	8000b56 <serial_write+0x16>
	}

	return ret;
 8000b78:	68bb      	ldr	r3, [r7, #8]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000211c 	.word	0x2000211c

08000b88 <serial_read>:

int serial_read(uint8_t *data, uint16_t len) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Receive(&huart2, data, len, 1000) ;
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <serial_read+0x24>)
 8000b9e:	f002 fb42 	bl	8003226 <HAL_UART_Receive>
 8000ba2:	4603      	mov	r3, r0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000211c 	.word	0x2000211c

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f000 fa0a 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f80b 	bl	8000bd2 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 f8a6 	bl	8000d0c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000bc0:	f000 f84c 	bl	8000c5c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000bc4:	f000 f878 	bl	8000cb8 <MX_USART2_UART_Init>
  EEPROM_Init();
 8000bc8:	f7ff ff18 	bl	80009fc <EEPROM_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uart_fsm();
 8000bcc:	f7ff fc12 	bl	80003f4 <uart_fsm>
 8000bd0:	e7fc      	b.n	8000bcc <main+0x1c>

08000bd2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b090      	sub	sp, #64	; 0x40
 8000bd6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	2228      	movs	r2, #40	; 0x28
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fcc9 	bl	8003578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	2302      	movs	r3, #2
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fe0a 	bl	8002834 <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c26:	f000 f8bb 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2102      	movs	r1, #2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 f875 	bl	8002d34 <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c50:	f000 f8a6 	bl	8000da0 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3740      	adds	r7, #64	; 0x40
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_I2C2_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_I2C2_Init+0x58>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_I2C2_Init+0x50>)
 8000c9a:	f000 fc9d 	bl	80015d8 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 f87c 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200020c8 	.word	0x200020c8
 8000cb0:	40005800 	.word	0x40005800
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_USART2_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f002 f9ba 	bl	8003068 <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f000 f851 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000211c 	.word	0x2000211c
 8000d08:	40004400 	.word	0x40004400

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d26:	f043 0320 	orr.w	r3, r3, #32
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0320 	and.w	r3, r3, #32
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_GPIO_Init+0x8c>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <MX_GPIO_Init+0x90>)
 8000d6e:	f000 fc1b 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d72:	2302      	movs	r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_GPIO_Init+0x90>)
 8000d8a:	f000 fa89 	bl	80012a0 <HAL_GPIO_Init>

}
 8000d8e:	bf00      	nop
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>
	...

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_MspInit+0x5c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x5c>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_MspInit+0x60>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_MspInit+0x60>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000

08000e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_I2C_MspInit+0x74>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d124      	bne.n	8000e7a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_I2C_MspInit+0x78>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_I2C_MspInit+0x78>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_I2C_MspInit+0x78>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4e:	2312      	movs	r3, #18
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <HAL_I2C_MspInit+0x7c>)
 8000e5e:	f000 fa1f 	bl	80012a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_I2C_MspInit+0x78>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_I2C_MspInit+0x78>)
 8000e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_I2C_MspInit+0x78>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40005800 	.word	0x40005800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010c00 	.word	0x40010c00

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <HAL_UART_MspInit+0x88>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d12f      	bne.n	8000f10 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_UART_MspInit+0x8c>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <HAL_UART_MspInit+0x8c>)
 8000eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_UART_MspInit+0x8c>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_UART_MspInit+0x8c>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <HAL_UART_MspInit+0x8c>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_UART_MspInit+0x8c>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480b      	ldr	r0, [pc, #44]	; (8000f20 <HAL_UART_MspInit+0x90>)
 8000ef4:	f000 f9d4 	bl	80012a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_UART_MspInit+0x90>)
 8000f0c:	f000 f9c8 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010800 	.word	0x40010800

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6a:	f000 f875 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
	...

08000f80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f82:	e003      	b.n	8000f8c <LoopCopyDataInit>

08000f84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f8a:	3104      	adds	r1, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f94:	d3f6      	bcc.n	8000f84 <CopyDataInit>
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f98:	e002      	b.n	8000fa0 <LoopFillZerobss>

08000f9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f9c:	f842 3b04 	str.w	r3, [r2], #4

08000fa0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fa2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fa4:	d3f9      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fa6:	f7ff ffe4 	bl	8000f72 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f002 fab3 	bl	8003514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff fdff 	bl	8000bb0 <main>
  bx lr
 8000fb2:	4770      	bx	lr
  ldr r3, =_sidata
 8000fb4:	080035e4 	.word	0x080035e4
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fbc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000fc0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000fc4:	20002160 	.word	0x20002160

08000fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_2_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_Init+0x28>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x28>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 f92b 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fee0 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f935 	bl	8001286 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001034:	f000 f90b 	bl	800124e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000004 	.word	0x20000004
 8001050:	2000000c 	.word	0x2000000c
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_IncTick+0x1c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_IncTick+0x20>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a03      	ldr	r2, [pc, #12]	; (8001078 <HAL_IncTick+0x20>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	2000000c 	.word	0x2000000c
 8001078:	2000215c 	.word	0x2000215c

0800107c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_GetTick+0x10>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	2000215c 	.word	0x2000215c

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff fff0 	bl	800107c <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffe0 	bl	800107c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000000c 	.word	0x2000000c

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001218:	f7ff ff90 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff49 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff5e 	bl	8001120 <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ff90 	bl	8001190 <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff5f 	bl	800113c <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffb0 	bl	80011f4 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b08b      	sub	sp, #44	; 0x2c
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	e169      	b.n	8001588 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012b4:	2201      	movs	r2, #1
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8158 	bne.w	8001582 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a9a      	ldr	r2, [pc, #616]	; (8001540 <HAL_GPIO_Init+0x2a0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d05e      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012dc:	4a98      	ldr	r2, [pc, #608]	; (8001540 <HAL_GPIO_Init+0x2a0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d875      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012e2:	4a98      	ldr	r2, [pc, #608]	; (8001544 <HAL_GPIO_Init+0x2a4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d058      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012e8:	4a96      	ldr	r2, [pc, #600]	; (8001544 <HAL_GPIO_Init+0x2a4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d86f      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012ee:	4a96      	ldr	r2, [pc, #600]	; (8001548 <HAL_GPIO_Init+0x2a8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d052      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 80012f4:	4a94      	ldr	r2, [pc, #592]	; (8001548 <HAL_GPIO_Init+0x2a8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d869      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 80012fa:	4a94      	ldr	r2, [pc, #592]	; (800154c <HAL_GPIO_Init+0x2ac>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d04c      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 8001300:	4a92      	ldr	r2, [pc, #584]	; (800154c <HAL_GPIO_Init+0x2ac>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d863      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 8001306:	4a92      	ldr	r2, [pc, #584]	; (8001550 <HAL_GPIO_Init+0x2b0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d046      	beq.n	800139a <HAL_GPIO_Init+0xfa>
 800130c:	4a90      	ldr	r2, [pc, #576]	; (8001550 <HAL_GPIO_Init+0x2b0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d85d      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 8001312:	2b12      	cmp	r3, #18
 8001314:	d82a      	bhi.n	800136c <HAL_GPIO_Init+0xcc>
 8001316:	2b12      	cmp	r3, #18
 8001318:	d859      	bhi.n	80013ce <HAL_GPIO_Init+0x12e>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <HAL_GPIO_Init+0x80>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	0800139b 	.word	0x0800139b
 8001324:	08001375 	.word	0x08001375
 8001328:	08001387 	.word	0x08001387
 800132c:	080013c9 	.word	0x080013c9
 8001330:	080013cf 	.word	0x080013cf
 8001334:	080013cf 	.word	0x080013cf
 8001338:	080013cf 	.word	0x080013cf
 800133c:	080013cf 	.word	0x080013cf
 8001340:	080013cf 	.word	0x080013cf
 8001344:	080013cf 	.word	0x080013cf
 8001348:	080013cf 	.word	0x080013cf
 800134c:	080013cf 	.word	0x080013cf
 8001350:	080013cf 	.word	0x080013cf
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013cf 	.word	0x080013cf
 800135c:	080013cf 	.word	0x080013cf
 8001360:	080013cf 	.word	0x080013cf
 8001364:	0800137d 	.word	0x0800137d
 8001368:	08001391 	.word	0x08001391
 800136c:	4a79      	ldr	r2, [pc, #484]	; (8001554 <HAL_GPIO_Init+0x2b4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001372:	e02c      	b.n	80013ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	623b      	str	r3, [r7, #32]
          break;
 800137a:	e029      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	3304      	adds	r3, #4
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e024      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	3308      	adds	r3, #8
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e01f      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	330c      	adds	r3, #12
 8001396:	623b      	str	r3, [r7, #32]
          break;
 8001398:	e01a      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013a2:	2304      	movs	r3, #4
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e013      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d105      	bne.n	80013bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b0:	2308      	movs	r3, #8
 80013b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	611a      	str	r2, [r3, #16]
          break;
 80013ba:	e009      	b.n	80013d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013bc:	2308      	movs	r3, #8
 80013be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	615a      	str	r2, [r3, #20]
          break;
 80013c6:	e003      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x130>
          break;
 80013ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2bff      	cmp	r3, #255	; 0xff
 80013d4:	d801      	bhi.n	80013da <HAL_GPIO_Init+0x13a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	e001      	b.n	80013de <HAL_GPIO_Init+0x13e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3304      	adds	r3, #4
 80013de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2bff      	cmp	r3, #255	; 0xff
 80013e4:	d802      	bhi.n	80013ec <HAL_GPIO_Init+0x14c>
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x152>
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	3b08      	subs	r3, #8
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	210f      	movs	r1, #15
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	6a39      	ldr	r1, [r7, #32]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	431a      	orrs	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80b1 	beq.w	8001582 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <HAL_GPIO_Init+0x2b8>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x2b8>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_GPIO_Init+0x2b8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001438:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_GPIO_Init+0x2bc>)
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	220f      	movs	r2, #15
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a40      	ldr	r2, [pc, #256]	; (8001560 <HAL_GPIO_Init+0x2c0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d013      	beq.n	800148c <HAL_GPIO_Init+0x1ec>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a3f      	ldr	r2, [pc, #252]	; (8001564 <HAL_GPIO_Init+0x2c4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d00d      	beq.n	8001488 <HAL_GPIO_Init+0x1e8>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <HAL_GPIO_Init+0x2c8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d007      	beq.n	8001484 <HAL_GPIO_Init+0x1e4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a3d      	ldr	r2, [pc, #244]	; (800156c <HAL_GPIO_Init+0x2cc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d101      	bne.n	8001480 <HAL_GPIO_Init+0x1e0>
 800147c:	2303      	movs	r3, #3
 800147e:	e006      	b.n	800148e <HAL_GPIO_Init+0x1ee>
 8001480:	2304      	movs	r3, #4
 8001482:	e004      	b.n	800148e <HAL_GPIO_Init+0x1ee>
 8001484:	2302      	movs	r3, #2
 8001486:	e002      	b.n	800148e <HAL_GPIO_Init+0x1ee>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_GPIO_Init+0x1ee>
 800148c:	2300      	movs	r3, #0
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	f002 0203 	and.w	r2, r2, #3
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	4093      	lsls	r3, r2
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800149e:	492f      	ldr	r1, [pc, #188]	; (800155c <HAL_GPIO_Init+0x2bc>)
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	492c      	ldr	r1, [pc, #176]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4928      	ldr	r1, [pc, #160]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4922      	ldr	r1, [pc, #136]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	491e      	ldr	r1, [pc, #120]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	4918      	ldr	r1, [pc, #96]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	4914      	ldr	r1, [pc, #80]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 8001520:	4013      	ands	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d021      	beq.n	8001574 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	490e      	ldr	r1, [pc, #56]	; (8001570 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	60cb      	str	r3, [r1, #12]
 800153c:	e021      	b.n	8001582 <HAL_GPIO_Init+0x2e2>
 800153e:	bf00      	nop
 8001540:	10320000 	.word	0x10320000
 8001544:	10310000 	.word	0x10310000
 8001548:	10220000 	.word	0x10220000
 800154c:	10210000 	.word	0x10210000
 8001550:	10120000 	.word	0x10120000
 8001554:	10110000 	.word	0x10110000
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000
 8001560:	40010800 	.word	0x40010800
 8001564:	40010c00 	.word	0x40010c00
 8001568:	40011000 	.word	0x40011000
 800156c:	40011400 	.word	0x40011400
 8001570:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_GPIO_Init+0x304>)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	43db      	mvns	r3, r3
 800157c:	4909      	ldr	r1, [pc, #36]	; (80015a4 <HAL_GPIO_Init+0x304>)
 800157e:	4013      	ands	r3, r2
 8001580:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	3301      	adds	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	fa22 f303 	lsr.w	r3, r2, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	f47f ae8e 	bne.w	80012b4 <HAL_GPIO_Init+0x14>
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	372c      	adds	r7, #44	; 0x2c
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015c4:	e003      	b.n	80015ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	041a      	lsls	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	611a      	str	r2, [r3, #16]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e12b      	b.n	8001842 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fc06 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	; 0x24
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800162a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800163a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800163c:	f001 fcce 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8001640:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a81      	ldr	r2, [pc, #516]	; (800184c <HAL_I2C_Init+0x274>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d807      	bhi.n	800165c <HAL_I2C_Init+0x84>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4a80      	ldr	r2, [pc, #512]	; (8001850 <HAL_I2C_Init+0x278>)
 8001650:	4293      	cmp	r3, r2
 8001652:	bf94      	ite	ls
 8001654:	2301      	movls	r3, #1
 8001656:	2300      	movhi	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e006      	b.n	800166a <HAL_I2C_Init+0x92>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a7d      	ldr	r2, [pc, #500]	; (8001854 <HAL_I2C_Init+0x27c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	bf94      	ite	ls
 8001664:	2301      	movls	r3, #1
 8001666:	2300      	movhi	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0e7      	b.n	8001842 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4a78      	ldr	r2, [pc, #480]	; (8001858 <HAL_I2C_Init+0x280>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0c9b      	lsrs	r3, r3, #18
 800167c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	430a      	orrs	r2, r1
 8001690:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a6a      	ldr	r2, [pc, #424]	; (800184c <HAL_I2C_Init+0x274>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d802      	bhi.n	80016ac <HAL_I2C_Init+0xd4>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	e009      	b.n	80016c0 <HAL_I2C_Init+0xe8>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016b2:	fb02 f303 	mul.w	r3, r2, r3
 80016b6:	4a69      	ldr	r2, [pc, #420]	; (800185c <HAL_I2C_Init+0x284>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	3301      	adds	r3, #1
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	495c      	ldr	r1, [pc, #368]	; (800184c <HAL_I2C_Init+0x274>)
 80016dc:	428b      	cmp	r3, r1
 80016de:	d819      	bhi.n	8001714 <HAL_I2C_Init+0x13c>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e59      	subs	r1, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016f4:	400b      	ands	r3, r1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <HAL_I2C_Init+0x138>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e59      	subs	r1, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fbb1 f3f3 	udiv	r3, r1, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170e:	e051      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001710:	2304      	movs	r3, #4
 8001712:	e04f      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d111      	bne.n	8001740 <HAL_I2C_Init+0x168>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	fbb0 f3f3 	udiv	r3, r0, r3
 800172e:	3301      	adds	r3, #1
 8001730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	e012      	b.n	8001766 <HAL_I2C_Init+0x18e>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	0099      	lsls	r1, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Init+0x196>
 800176a:	2301      	movs	r3, #1
 800176c:	e022      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10e      	bne.n	8001794 <HAL_I2C_Init+0x1bc>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1e58      	subs	r0, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	440b      	add	r3, r1
 8001784:	fbb0 f3f3 	udiv	r3, r0, r3
 8001788:	3301      	adds	r3, #1
 800178a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001792:	e00f      	b.n	80017b4 <HAL_I2C_Init+0x1dc>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	0099      	lsls	r1, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	6809      	ldr	r1, [r1, #0]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6911      	ldr	r1, [r2, #16]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68d2      	ldr	r2, [r2, #12]
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	000186a0 	.word	0x000186a0
 8001850:	001e847f 	.word	0x001e847f
 8001854:	003d08ff 	.word	0x003d08ff
 8001858:	431bde83 	.word	0x431bde83
 800185c:	10624dd3 	.word	0x10624dd3

08001860 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4603      	mov	r3, r0
 8001870:	817b      	strh	r3, [r7, #10]
 8001872:	460b      	mov	r3, r1
 8001874:	813b      	strh	r3, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800187a:	f7ff fbff 	bl	800107c <HAL_GetTick>
 800187e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	f040 80d9 	bne.w	8001a40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2319      	movs	r3, #25
 8001894:	2201      	movs	r2, #1
 8001896:	496d      	ldr	r1, [pc, #436]	; (8001a4c <HAL_I2C_Mem_Write+0x1ec>)
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fdef 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	e0cc      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_Mem_Write+0x56>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e0c5      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d007      	beq.n	80018dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2221      	movs	r2, #33	; 0x21
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a3a      	ldr	r2, [r7, #32]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800190c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <HAL_I2C_Mem_Write+0x1f0>)
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800191e:	88f8      	ldrh	r0, [r7, #6]
 8001920:	893a      	ldrh	r2, [r7, #8]
 8001922:	8979      	ldrh	r1, [r7, #10]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4603      	mov	r3, r0
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fc26 	bl	8002180 <I2C_RequestMemoryWrite>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d052      	beq.n	80019e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e081      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fe70 	bl	8002628 <I2C_WaitOnTXEFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00d      	beq.n	800196a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2b04      	cmp	r3, #4
 8001954:	d107      	bne.n	8001966 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001964:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06b      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d11b      	bne.n	80019e0 <HAL_I2C_Mem_Write+0x180>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d017      	beq.n	80019e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1aa      	bne.n	800193e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fe5c 	bl	80026aa <I2C_WaitOnBTFFlagUntilTimeout>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d107      	bne.n	8001a10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e016      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e000      	b.n	8001a42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a40:	2302      	movs	r3, #2
  }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	00100002 	.word	0x00100002
 8001a50:	ffff0000 	.word	0xffff0000

08001a54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	817b      	strh	r3, [r7, #10]
 8001a66:	460b      	mov	r3, r1
 8001a68:	813b      	strh	r3, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a72:	f7ff fb03 	bl	800107c <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	f040 8244 	bne.w	8001f0e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2319      	movs	r3, #25
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4982      	ldr	r1, [pc, #520]	; (8001c98 <HAL_I2C_Mem_Read+0x244>)
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fcf3 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e237      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_I2C_Mem_Read+0x5a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e230      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d007      	beq.n	8001ad4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2222      	movs	r2, #34	; 0x22
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4a62      	ldr	r2, [pc, #392]	; (8001c9c <HAL_I2C_Mem_Read+0x248>)
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b16:	88f8      	ldrh	r0, [r7, #6]
 8001b18:	893a      	ldrh	r2, [r7, #8]
 8001b1a:	8979      	ldrh	r1, [r7, #10]
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4603      	mov	r3, r0
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 fbc0 	bl	80022ac <I2C_RequestMemoryRead>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e1ec      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d113      	bne.n	8001b66 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e1c0      	b.n	8001ee8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d11e      	bne.n	8001bac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7e:	b672      	cpsid	i
}
 8001b80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ba8:	b662      	cpsie	i
}
 8001baa:	e035      	b.n	8001c18 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d11e      	bne.n	8001bf2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bee:	b662      	cpsie	i
}
 8001bf0:	e012      	b.n	8001c18 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c00:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001c18:	e166      	b.n	8001ee8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	f200 811f 	bhi.w	8001e62 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d123      	bne.n	8001c74 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 fd7b 	bl	800272c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e167      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c72:	e139      	b.n	8001ee8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d152      	bne.n	8001d22 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c82:	2200      	movs	r2, #0
 8001c84:	4906      	ldr	r1, [pc, #24]	; (8001ca0 <HAL_I2C_Mem_Read+0x24c>)
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fbf8 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d008      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e13c      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
 8001c96:	bf00      	nop
 8001c98:	00100002 	.word	0x00100002
 8001c9c:	ffff0000 	.word	0xffff0000
 8001ca0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cea:	b662      	cpsie	i
}
 8001cec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d20:	e0e2      	b.n	8001ee8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d28:	2200      	movs	r2, #0
 8001d2a:	497b      	ldr	r1, [pc, #492]	; (8001f18 <HAL_I2C_Mem_Read+0x4c4>)
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 fba5 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0e9      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d82:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_I2C_Mem_Read+0x4c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	08db      	lsrs	r3, r3, #3
 8001d88:	4a65      	ldr	r2, [pc, #404]	; (8001f20 <HAL_I2C_Mem_Read+0x4cc>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0a1a      	lsrs	r2, r3, #8
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00da      	lsls	r2, r3, #3
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d118      	bne.n	8001dda <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001dca:	b662      	cpsie	i
}
 8001dcc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e09a      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d1d9      	bne.n	8001d9c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e2a:	b662      	cpsie	i
}
 8001e2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e60:	e042      	b.n	8001ee8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fc60 	bl	800272c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e04c      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d118      	bne.n	8001ee8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f47f ae94 	bne.w	8001c1a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
  }
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	00010004 	.word	0x00010004
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	14f8b589 	.word	0x14f8b589

08001f24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	460b      	mov	r3, r1
 8001f32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff f8a2 	bl	800107c <HAL_GetTick>
 8001f38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	f040 8111 	bne.w	800216e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2319      	movs	r3, #25
 8001f52:	2201      	movs	r2, #1
 8001f54:	4988      	ldr	r1, [pc, #544]	; (8002178 <HAL_I2C_IsDeviceReady+0x254>)
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fa90 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
 8001f64:	e104      	b.n	8002170 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_I2C_IsDeviceReady+0x50>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0fd      	b.n	8002170 <HAL_I2C_IsDeviceReady+0x24c>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d007      	beq.n	8001f9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2224      	movs	r2, #36	; 0x24
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a70      	ldr	r2, [pc, #448]	; (800217c <HAL_I2C_IsDeviceReady+0x258>)
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fa4e 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff4:	d103      	bne.n	8001ffe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e0b6      	b.n	8002170 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002002:	897b      	ldrh	r3, [r7, #10]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002010:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002012:	f7ff f833 	bl	800107c <HAL_GetTick>
 8002016:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002046:	e025      	b.n	8002094 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7ff f818 	bl	800107c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <HAL_I2C_IsDeviceReady+0x13a>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	22a0      	movs	r2, #160	; 0xa0
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b02      	cmp	r3, #2
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2ba0      	cmp	r3, #160	; 0xa0
 800209e:	d005      	beq.n	80020ac <HAL_I2C_IsDeviceReady+0x188>
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d102      	bne.n	80020ac <HAL_I2C_IsDeviceReady+0x188>
 80020a6:	7dbb      	ldrb	r3, [r7, #22]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0cd      	beq.n	8002048 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d129      	bne.n	8002116 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2319      	movs	r3, #25
 80020ee:	2201      	movs	r2, #1
 80020f0:	4921      	ldr	r1, [pc, #132]	; (8002178 <HAL_I2C_IsDeviceReady+0x254>)
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f9c2 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e036      	b.n	8002170 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e02c      	b.n	8002170 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002124:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800212e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2319      	movs	r3, #25
 8002136:	2201      	movs	r2, #1
 8002138:	490f      	ldr	r1, [pc, #60]	; (8002178 <HAL_I2C_IsDeviceReady+0x254>)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f99e 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e012      	b.n	8002170 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3301      	adds	r3, #1
 800214e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	f4ff af32 	bcc.w	8001fbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
  }
}
 8002170:	4618      	mov	r0, r3
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	00100002 	.word	0x00100002
 800217c:	ffff0000 	.word	0xffff0000

08002180 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	460b      	mov	r3, r1
 8002194:	813b      	strh	r3, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f960 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d0:	d103      	bne.n	80021da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e05f      	b.n	800229e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021de:	897b      	ldrh	r3, [r7, #10]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	6a3a      	ldr	r2, [r7, #32]
 80021f2:	492d      	ldr	r1, [pc, #180]	; (80022a8 <I2C_RequestMemoryWrite+0x128>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f998 	bl	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e04c      	b.n	800229e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fa02 	bl	8002628 <I2C_WaitOnTXEFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00d      	beq.n	8002246 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2b04      	cmp	r3, #4
 8002230:	d107      	bne.n	8002242 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002240:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e02b      	b.n	800229e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800224c:	893b      	ldrh	r3, [r7, #8]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	611a      	str	r2, [r3, #16]
 8002256:	e021      	b.n	800229c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002258:	893b      	ldrh	r3, [r7, #8]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2da      	uxtb	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002268:	6a39      	ldr	r1, [r7, #32]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f9dc 	bl	8002628 <I2C_WaitOnTXEFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00d      	beq.n	8002292 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b04      	cmp	r3, #4
 800227c:	d107      	bne.n	800228e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e005      	b.n	800229e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002292:	893b      	ldrh	r3, [r7, #8]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	00010002 	.word	0x00010002

080022ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	4608      	mov	r0, r1
 80022b6:	4611      	mov	r1, r2
 80022b8:	461a      	mov	r2, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	817b      	strh	r3, [r7, #10]
 80022be:	460b      	mov	r3, r1
 80022c0:	813b      	strh	r3, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f8c2 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230c:	d103      	bne.n	8002316 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0aa      	b.n	8002470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800231a:	897b      	ldrh	r3, [r7, #10]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002328:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	4952      	ldr	r1, [pc, #328]	; (8002478 <I2C_RequestMemoryRead+0x1cc>)
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f8fa 	bl	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e097      	b.n	8002470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	6a39      	ldr	r1, [r7, #32]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f964 	bl	8002628 <I2C_WaitOnTXEFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b04      	cmp	r3, #4
 800236c:	d107      	bne.n	800237e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e076      	b.n	8002470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002388:	893b      	ldrh	r3, [r7, #8]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	e021      	b.n	80023d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002394:	893b      	ldrh	r3, [r7, #8]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a4:	6a39      	ldr	r1, [r7, #32]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f93e 	bl	8002628 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00d      	beq.n	80023ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d107      	bne.n	80023ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e050      	b.n	8002470 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023ce:	893b      	ldrh	r3, [r7, #8]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	6a39      	ldr	r1, [r7, #32]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f923 	bl	8002628 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00d      	beq.n	8002404 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d107      	bne.n	8002400 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e035      	b.n	8002470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002412:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2200      	movs	r2, #0
 800241c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f82b 	bl	800247c <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243a:	d103      	bne.n	8002444 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e013      	b.n	8002470 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002448:	897b      	ldrh	r3, [r7, #10]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	b2da      	uxtb	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	6a3a      	ldr	r2, [r7, #32]
 800245c:	4906      	ldr	r1, [pc, #24]	; (8002478 <I2C_RequestMemoryRead+0x1cc>)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f863 	bl	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	00010002 	.word	0x00010002

0800247c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248c:	e025      	b.n	80024da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002494:	d021      	beq.n	80024da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002496:	f7fe fdf1 	bl	800107c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d116      	bne.n	80024da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e023      	b.n	8002522 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10d      	bne.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4013      	ands	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	e00c      	b.n	800251a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4013      	ands	r3, r2
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf0c      	ite	eq
 8002512:	2301      	moveq	r3, #1
 8002514:	2300      	movne	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	429a      	cmp	r2, r3
 800251e:	d0b6      	beq.n	800248e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002538:	e051      	b.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002548:	d123      	bne.n	8002592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002562:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f043 0204 	orr.w	r2, r3, #4
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e046      	b.n	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002598:	d021      	beq.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259a:	f7fe fd6f 	bl	800107c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d116      	bne.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e020      	b.n	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10c      	bne.n	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4013      	ands	r3, r2
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	e00b      	b.n	800261a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	43da      	mvns	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d18d      	bne.n	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002634:	e02d      	b.n	8002692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8ce 	bl	80027d8 <I2C_IsAcknowledgeFailed>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e02d      	b.n	80026a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264c:	d021      	beq.n	8002692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264e:	f7fe fd15 	bl	800107c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d116      	bne.n	8002692 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f043 0220 	orr.w	r2, r3, #32
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e007      	b.n	80026a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d1ca      	bne.n	8002636 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026b6:	e02d      	b.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f88d 	bl	80027d8 <I2C_IsAcknowledgeFailed>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e02d      	b.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ce:	d021      	beq.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d0:	f7fe fcd4 	bl	800107c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d302      	bcc.n	80026e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d116      	bne.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e007      	b.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d1ca      	bne.n	80026b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002738:	e042      	b.n	80027c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b10      	cmp	r3, #16
 8002746:	d119      	bne.n	800277c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0210 	mvn.w	r2, #16
 8002750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e029      	b.n	80027d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7fe fc7e 	bl	800107c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e007      	b.n	80027d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d1b5      	bne.n	800273a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ee:	d11b      	bne.n	8002828 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f043 0204 	orr.w	r2, r3, #4
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e26c      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8087 	beq.w	8002962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002854:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b04      	cmp	r3, #4
 800285e:	d00c      	beq.n	800287a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002860:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d112      	bne.n	8002892 <HAL_RCC_OscConfig+0x5e>
 800286c:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d10b      	bne.n	8002892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287a:	4b89      	ldr	r3, [pc, #548]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d06c      	beq.n	8002960 <HAL_RCC_OscConfig+0x12c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d168      	bne.n	8002960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e246      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289a:	d106      	bne.n	80028aa <HAL_RCC_OscConfig+0x76>
 800289c:	4b80      	ldr	r3, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a7f      	ldr	r2, [pc, #508]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	e02e      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0x98>
 80028b2:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a77      	ldr	r2, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e01d      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0xbc>
 80028d6:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a71      	ldr	r2, [pc, #452]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0xd4>
 80028f0:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a67      	ldr	r2, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fbb4 	bl	800107c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe fbb0 	bl	800107c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1fa      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0xe4>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe fba0 	bl	800107c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe fb9c 	bl	800107c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1e6      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x10c>
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d063      	beq.n	8002a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800297a:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d11c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x18c>
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d116      	bne.n	80029c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x176>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e1ba      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4939      	ldr	r1, [pc, #228]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	e03a      	b.n	8002a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fb55 	bl	800107c <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe fb51 	bl	800107c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e19b      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4927      	ldr	r1, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
 8002a08:	e015      	b.n	8002a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fb34 	bl	800107c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a18:	f7fe fb30 	bl	800107c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e17a      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d03a      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d019      	beq.n	8002a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe fb14 	bl	800107c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fb10 	bl	800107c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e15a      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f000 fad8 	bl	800302c <RCC_Delay>
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe fafa 	bl	800107c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8a:	e00f      	b.n	8002aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe faf6 	bl	800107c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d908      	bls.n	8002aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e140      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	42420000 	.word	0x42420000
 8002aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	4b9e      	ldr	r3, [pc, #632]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e9      	bne.n	8002a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80a6 	beq.w	8002c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aca:	4b97      	ldr	r3, [pc, #604]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	4b94      	ldr	r3, [pc, #592]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4a93      	ldr	r2, [pc, #588]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	61d3      	str	r3, [r2, #28]
 8002ae2:	4b91      	ldr	r3, [pc, #580]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b8e      	ldr	r3, [pc, #568]	; (8002d2c <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b8b      	ldr	r3, [pc, #556]	; (8002d2c <HAL_RCC_OscConfig+0x4f8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a8a      	ldr	r2, [pc, #552]	; (8002d2c <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fab7 	bl	800107c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7fe fab3 	bl	800107c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	; 0x64
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0fd      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b81      	ldr	r3, [pc, #516]	; (8002d2c <HAL_RCC_OscConfig+0x4f8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x312>
 8002b38:	4b7b      	ldr	r3, [pc, #492]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a7a      	ldr	r2, [pc, #488]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6213      	str	r3, [r2, #32]
 8002b44:	e02d      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x334>
 8002b4e:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a75      	ldr	r2, [pc, #468]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b73      	ldr	r3, [pc, #460]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a72      	ldr	r2, [pc, #456]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	e01c      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x356>
 8002b70:	4b6d      	ldr	r3, [pc, #436]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4a6c      	ldr	r2, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6213      	str	r3, [r2, #32]
 8002b88:	e00b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002b8a:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a66      	ldr	r2, [pc, #408]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	4a63      	ldr	r2, [pc, #396]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	f023 0304 	bic.w	r3, r3, #4
 8002ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d015      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7fe fa67 	bl	800107c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe fa63 	bl	800107c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0ab      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ee      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x37e>
 8002bd4:	e014      	b.n	8002c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fa51 	bl	800107c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fe fa4d 	bl	800107c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e095      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf4:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ee      	bne.n	8002bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c06:	4b48      	ldr	r3, [pc, #288]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4a47      	ldr	r2, [pc, #284]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8081 	beq.w	8002d1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c1c:	4b42      	ldr	r3, [pc, #264]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d061      	beq.n	8002cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d146      	bne.n	8002cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c30:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <HAL_RCC_OscConfig+0x4fc>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe fa21 	bl	800107c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe fa1d 	bl	800107c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e067      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d108      	bne.n	8002c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c66:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	492d      	ldr	r1, [pc, #180]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a19      	ldr	r1, [r3, #32]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	4927      	ldr	r1, [pc, #156]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCC_OscConfig+0x4fc>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fe f9f1 	bl	800107c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe f9ed 	bl	800107c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e037      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x46a>
 8002cbc:	e02f      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <HAL_RCC_OscConfig+0x4fc>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f9da 	bl	800107c <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe f9d6 	bl	800107c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e020      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x498>
 8002cea:	e018      	b.n	8002d1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e013      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x4f4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d001      	beq.n	8002d1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	42420060 	.word	0x42420060

08002d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0d0      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d910      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	4965      	ldr	r1, [pc, #404]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0b8      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002db2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	494d      	ldr	r1, [pc, #308]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d040      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e07f      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e073      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06b      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4936      	ldr	r1, [pc, #216]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e24:	f7fe f92a 	bl	800107c <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe f926 	bl	800107c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e053      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d210      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 0207 	bic.w	r2, r3, #7
 8002e6a:	4922      	ldr	r1, [pc, #136]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e032      	b.n	8002eea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec2:	f000 f821 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	490a      	ldr	r1, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	5ccb      	ldrb	r3, [r1, r3]
 8002ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1cc>)
 8002edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe f888 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	080035c4 	.word	0x080035c4
 8002f00:	20000004 	.word	0x20000004
 8002f04:	20000008 	.word	0x20000008

08002f08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f08:	b490      	push	{r4, r7}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f0e:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f10:	1d3c      	adds	r4, r7, #4
 8002f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f18:	f240 2301 	movw	r3, #513	; 0x201
 8002f1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x40>
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d003      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x46>
 8002f46:	e02d      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f4a:	623b      	str	r3, [r7, #32]
      break;
 8002f4c:	e02d      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	0c9b      	lsrs	r3, r3, #18
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f60:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0c5b      	lsrs	r3, r3, #17
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f80:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f86:	fb02 f203 	mul.w	r2, r2, r3
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	e004      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4a0b      	ldr	r2, [pc, #44]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f98:	fb02 f303 	mul.w	r3, r2, r3
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	623b      	str	r3, [r7, #32]
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa6:	623b      	str	r3, [r7, #32]
      break;
 8002fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002faa:	6a3b      	ldr	r3, [r7, #32]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc90      	pop	{r4, r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	080035ac 	.word	0x080035ac
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	007a1200 	.word	0x007a1200
 8002fc4:	003d0900 	.word	0x003d0900

08002fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fcc:	4b02      	ldr	r3, [pc, #8]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	20000004 	.word	0x20000004

08002fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fe0:	f7ff fff2 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4903      	ldr	r1, [pc, #12]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	080035d4 	.word	0x080035d4

08003004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003008:	f7ff ffde 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	0adb      	lsrs	r3, r3, #11
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4903      	ldr	r1, [pc, #12]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	080035d4 	.word	0x080035d4

0800302c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <RCC_Delay+0x34>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <RCC_Delay+0x38>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0a5b      	lsrs	r3, r3, #9
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003048:	bf00      	nop
  }
  while (Delay --);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	60fa      	str	r2, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f9      	bne.n	8003048 <RCC_Delay+0x1c>
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	20000004 	.word	0x20000004
 8003064:	10624dd3 	.word	0x10624dd3

08003068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e03f      	b.n	80030fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd fefe 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f9a3 	bl	80033f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b08a      	sub	sp, #40	; 0x28
 8003106:	af02      	add	r7, sp, #8
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	d17c      	bne.n	800321c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_UART_Transmit+0x2c>
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e075      	b.n	800321e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_UART_Transmit+0x3e>
 800313c:	2302      	movs	r3, #2
 800313e:	e06e      	b.n	800321e <HAL_UART_Transmit+0x11c>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2221      	movs	r2, #33	; 0x21
 8003152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003156:	f7fd ff91 	bl	800107c <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003170:	d108      	bne.n	8003184 <HAL_UART_Transmit+0x82>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d104      	bne.n	8003184 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	e003      	b.n	800318c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003194:	e02a      	b.n	80031ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8df 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e036      	b.n	800321e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	3302      	adds	r3, #2
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	e007      	b.n	80031de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	3301      	adds	r3, #1
 80031dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1cf      	bne.n	8003196 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f8af 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e006      	b.n	800321e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b08a      	sub	sp, #40	; 0x28
 800322a:	af02      	add	r7, sp, #8
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	f040 8089 	bne.w	800335a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_UART_Receive+0x2e>
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e081      	b.n	800335c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_UART_Receive+0x40>
 8003262:	2302      	movs	r3, #2
 8003264:	e07a      	b.n	800335c <HAL_UART_Receive+0x136>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2222      	movs	r2, #34	; 0x22
 8003278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800327c:	f7fd fefe 	bl	800107c <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003296:	d108      	bne.n	80032aa <HAL_UART_Receive+0x84>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	e003      	b.n	80032b2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032ba:	e043      	b.n	8003344 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2200      	movs	r2, #0
 80032c4:	2120      	movs	r1, #32
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f84c 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e042      	b.n	800335c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10c      	bne.n	80032f6 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3302      	adds	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e01f      	b.n	8003336 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d007      	beq.n	8003310 <HAL_UART_Receive+0xea>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <HAL_UART_Receive+0xf8>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e008      	b.n	8003330 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332a:	b2da      	uxtb	r2, r3
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	3301      	adds	r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1b6      	bne.n	80032bc <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003374:	e02c      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337c:	d028      	beq.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <UART_WaitOnFlagUntilTimeout+0x30>
 8003384:	f7fd fe7a 	bl	800107c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	429a      	cmp	r2, r3
 8003392:	d21d      	bcs.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e00f      	b.n	80033f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d0c3      	beq.n	8003376 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003432:	f023 030c 	bic.w	r3, r3, #12
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	430b      	orrs	r3, r1
 800343e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2c      	ldr	r2, [pc, #176]	; (800350c <UART_SetConfig+0x114>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7ff fdd0 	bl	8003004 <HAL_RCC_GetPCLK2Freq>
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	e002      	b.n	800346e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003468:	f7ff fdb8 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 800346c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009a      	lsls	r2, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	4a22      	ldr	r2, [pc, #136]	; (8003510 <UART_SetConfig+0x118>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	0119      	lsls	r1, r3, #4
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009a      	lsls	r2, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <UART_SetConfig+0x118>)
 80034a6:	fba3 0302 	umull	r0, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2064      	movs	r0, #100	; 0x64
 80034ae:	fb00 f303 	mul.w	r3, r0, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	3332      	adds	r3, #50	; 0x32
 80034b8:	4a15      	ldr	r2, [pc, #84]	; (8003510 <UART_SetConfig+0x118>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c4:	4419      	add	r1, r3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009a      	lsls	r2, r3, #2
 80034d0:	441a      	add	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <UART_SetConfig+0x118>)
 80034de:	fba3 0302 	umull	r0, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2064      	movs	r0, #100	; 0x64
 80034e6:	fb00 f303 	mul.w	r3, r0, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	3332      	adds	r3, #50	; 0x32
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <UART_SetConfig+0x118>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	440a      	add	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40013800 	.word	0x40013800
 8003510:	51eb851f 	.word	0x51eb851f

08003514 <__libc_init_array>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	2600      	movs	r6, #0
 8003518:	4d0c      	ldr	r5, [pc, #48]	; (800354c <__libc_init_array+0x38>)
 800351a:	4c0d      	ldr	r4, [pc, #52]	; (8003550 <__libc_init_array+0x3c>)
 800351c:	1b64      	subs	r4, r4, r5
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	42a6      	cmp	r6, r4
 8003522:	d109      	bne.n	8003538 <__libc_init_array+0x24>
 8003524:	f000 f830 	bl	8003588 <_init>
 8003528:	2600      	movs	r6, #0
 800352a:	4d0a      	ldr	r5, [pc, #40]	; (8003554 <__libc_init_array+0x40>)
 800352c:	4c0a      	ldr	r4, [pc, #40]	; (8003558 <__libc_init_array+0x44>)
 800352e:	1b64      	subs	r4, r4, r5
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	42a6      	cmp	r6, r4
 8003534:	d105      	bne.n	8003542 <__libc_init_array+0x2e>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f855 3b04 	ldr.w	r3, [r5], #4
 800353c:	4798      	blx	r3
 800353e:	3601      	adds	r6, #1
 8003540:	e7ee      	b.n	8003520 <__libc_init_array+0xc>
 8003542:	f855 3b04 	ldr.w	r3, [r5], #4
 8003546:	4798      	blx	r3
 8003548:	3601      	adds	r6, #1
 800354a:	e7f2      	b.n	8003532 <__libc_init_array+0x1e>
 800354c:	080035dc 	.word	0x080035dc
 8003550:	080035dc 	.word	0x080035dc
 8003554:	080035dc 	.word	0x080035dc
 8003558:	080035e0 	.word	0x080035e0

0800355c <memcmp>:
 800355c:	b530      	push	{r4, r5, lr}
 800355e:	2400      	movs	r4, #0
 8003560:	3901      	subs	r1, #1
 8003562:	42a2      	cmp	r2, r4
 8003564:	d101      	bne.n	800356a <memcmp+0xe>
 8003566:	2000      	movs	r0, #0
 8003568:	e005      	b.n	8003576 <memcmp+0x1a>
 800356a:	5d03      	ldrb	r3, [r0, r4]
 800356c:	3401      	adds	r4, #1
 800356e:	5d0d      	ldrb	r5, [r1, r4]
 8003570:	42ab      	cmp	r3, r5
 8003572:	d0f6      	beq.n	8003562 <memcmp+0x6>
 8003574:	1b58      	subs	r0, r3, r5
 8003576:	bd30      	pop	{r4, r5, pc}

08003578 <memset>:
 8003578:	4603      	mov	r3, r0
 800357a:	4402      	add	r2, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <_init>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

08003594 <_fini>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	bf00      	nop
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr
